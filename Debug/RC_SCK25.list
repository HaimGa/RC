
RC_SCK25.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000371c  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  080038fc  080038fc  000138fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08003954  08003954  00013954  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800395c  0800395c  0001395c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08003960  08003960  00013960  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000170  20000000  08003964  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000558  20000170  08003ad4  00020170  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200006c8  08003ad4  000206c8  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020170  2**0
                  CONTENTS, READONLY
 10 .debug_info   00014cbe  00000000  00000000  000201a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000279f  00000000  00000000  00034e5e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000b00b  00000000  00000000  000375fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000ee0  00000000  00000000  00042608  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000e08  00000000  00000000  000434e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro  00022103  00000000  00000000  000442f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   0000b239  00000000  00000000  000663f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    000d6e5f  00000000  00000000  0007162c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  0014848b  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00002b70  00000000  00000000  00148508  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000170 	.word	0x20000170
 80001fc:	00000000 	.word	0x00000000
 8000200:	080038e4 	.word	0x080038e4

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000174 	.word	0x20000174
 800021c:	080038e4 	.word	0x080038e4

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_uldivmod>:
 80002d0:	b953      	cbnz	r3, 80002e8 <__aeabi_uldivmod+0x18>
 80002d2:	b94a      	cbnz	r2, 80002e8 <__aeabi_uldivmod+0x18>
 80002d4:	2900      	cmp	r1, #0
 80002d6:	bf08      	it	eq
 80002d8:	2800      	cmpeq	r0, #0
 80002da:	bf1c      	itt	ne
 80002dc:	f04f 31ff 	movne.w	r1, #4294967295
 80002e0:	f04f 30ff 	movne.w	r0, #4294967295
 80002e4:	f000 b97a 	b.w	80005dc <__aeabi_idiv0>
 80002e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f0:	f000 f806 	bl	8000300 <__udivmoddi4>
 80002f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002fc:	b004      	add	sp, #16
 80002fe:	4770      	bx	lr

08000300 <__udivmoddi4>:
 8000300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000304:	468c      	mov	ip, r1
 8000306:	460d      	mov	r5, r1
 8000308:	4604      	mov	r4, r0
 800030a:	9e08      	ldr	r6, [sp, #32]
 800030c:	2b00      	cmp	r3, #0
 800030e:	d151      	bne.n	80003b4 <__udivmoddi4+0xb4>
 8000310:	428a      	cmp	r2, r1
 8000312:	4617      	mov	r7, r2
 8000314:	d96d      	bls.n	80003f2 <__udivmoddi4+0xf2>
 8000316:	fab2 fe82 	clz	lr, r2
 800031a:	f1be 0f00 	cmp.w	lr, #0
 800031e:	d00b      	beq.n	8000338 <__udivmoddi4+0x38>
 8000320:	f1ce 0c20 	rsb	ip, lr, #32
 8000324:	fa01 f50e 	lsl.w	r5, r1, lr
 8000328:	fa20 fc0c 	lsr.w	ip, r0, ip
 800032c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000330:	ea4c 0c05 	orr.w	ip, ip, r5
 8000334:	fa00 f40e 	lsl.w	r4, r0, lr
 8000338:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 800033c:	0c25      	lsrs	r5, r4, #16
 800033e:	fbbc f8fa 	udiv	r8, ip, sl
 8000342:	fa1f f987 	uxth.w	r9, r7
 8000346:	fb0a cc18 	mls	ip, sl, r8, ip
 800034a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800034e:	fb08 f309 	mul.w	r3, r8, r9
 8000352:	42ab      	cmp	r3, r5
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x6c>
 8000356:	19ed      	adds	r5, r5, r7
 8000358:	f108 32ff 	add.w	r2, r8, #4294967295
 800035c:	f080 8123 	bcs.w	80005a6 <__udivmoddi4+0x2a6>
 8000360:	42ab      	cmp	r3, r5
 8000362:	f240 8120 	bls.w	80005a6 <__udivmoddi4+0x2a6>
 8000366:	f1a8 0802 	sub.w	r8, r8, #2
 800036a:	443d      	add	r5, r7
 800036c:	1aed      	subs	r5, r5, r3
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb5 f0fa 	udiv	r0, r5, sl
 8000374:	fb0a 5510 	mls	r5, sl, r0, r5
 8000378:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800037c:	fb00 f909 	mul.w	r9, r0, r9
 8000380:	45a1      	cmp	r9, r4
 8000382:	d909      	bls.n	8000398 <__udivmoddi4+0x98>
 8000384:	19e4      	adds	r4, r4, r7
 8000386:	f100 33ff 	add.w	r3, r0, #4294967295
 800038a:	f080 810a 	bcs.w	80005a2 <__udivmoddi4+0x2a2>
 800038e:	45a1      	cmp	r9, r4
 8000390:	f240 8107 	bls.w	80005a2 <__udivmoddi4+0x2a2>
 8000394:	3802      	subs	r0, #2
 8000396:	443c      	add	r4, r7
 8000398:	eba4 0409 	sub.w	r4, r4, r9
 800039c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003a0:	2100      	movs	r1, #0
 80003a2:	2e00      	cmp	r6, #0
 80003a4:	d061      	beq.n	800046a <__udivmoddi4+0x16a>
 80003a6:	fa24 f40e 	lsr.w	r4, r4, lr
 80003aa:	2300      	movs	r3, #0
 80003ac:	6034      	str	r4, [r6, #0]
 80003ae:	6073      	str	r3, [r6, #4]
 80003b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d907      	bls.n	80003c8 <__udivmoddi4+0xc8>
 80003b8:	2e00      	cmp	r6, #0
 80003ba:	d054      	beq.n	8000466 <__udivmoddi4+0x166>
 80003bc:	2100      	movs	r1, #0
 80003be:	e886 0021 	stmia.w	r6, {r0, r5}
 80003c2:	4608      	mov	r0, r1
 80003c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c8:	fab3 f183 	clz	r1, r3
 80003cc:	2900      	cmp	r1, #0
 80003ce:	f040 808e 	bne.w	80004ee <__udivmoddi4+0x1ee>
 80003d2:	42ab      	cmp	r3, r5
 80003d4:	d302      	bcc.n	80003dc <__udivmoddi4+0xdc>
 80003d6:	4282      	cmp	r2, r0
 80003d8:	f200 80fa 	bhi.w	80005d0 <__udivmoddi4+0x2d0>
 80003dc:	1a84      	subs	r4, r0, r2
 80003de:	eb65 0503 	sbc.w	r5, r5, r3
 80003e2:	2001      	movs	r0, #1
 80003e4:	46ac      	mov	ip, r5
 80003e6:	2e00      	cmp	r6, #0
 80003e8:	d03f      	beq.n	800046a <__udivmoddi4+0x16a>
 80003ea:	e886 1010 	stmia.w	r6, {r4, ip}
 80003ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003f2:	b912      	cbnz	r2, 80003fa <__udivmoddi4+0xfa>
 80003f4:	2701      	movs	r7, #1
 80003f6:	fbb7 f7f2 	udiv	r7, r7, r2
 80003fa:	fab7 fe87 	clz	lr, r7
 80003fe:	f1be 0f00 	cmp.w	lr, #0
 8000402:	d134      	bne.n	800046e <__udivmoddi4+0x16e>
 8000404:	1beb      	subs	r3, r5, r7
 8000406:	0c3a      	lsrs	r2, r7, #16
 8000408:	fa1f fc87 	uxth.w	ip, r7
 800040c:	2101      	movs	r1, #1
 800040e:	fbb3 f8f2 	udiv	r8, r3, r2
 8000412:	0c25      	lsrs	r5, r4, #16
 8000414:	fb02 3318 	mls	r3, r2, r8, r3
 8000418:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800041c:	fb0c f308 	mul.w	r3, ip, r8
 8000420:	42ab      	cmp	r3, r5
 8000422:	d907      	bls.n	8000434 <__udivmoddi4+0x134>
 8000424:	19ed      	adds	r5, r5, r7
 8000426:	f108 30ff 	add.w	r0, r8, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x132>
 800042c:	42ab      	cmp	r3, r5
 800042e:	f200 80d1 	bhi.w	80005d4 <__udivmoddi4+0x2d4>
 8000432:	4680      	mov	r8, r0
 8000434:	1aed      	subs	r5, r5, r3
 8000436:	b2a3      	uxth	r3, r4
 8000438:	fbb5 f0f2 	udiv	r0, r5, r2
 800043c:	fb02 5510 	mls	r5, r2, r0, r5
 8000440:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000444:	fb0c fc00 	mul.w	ip, ip, r0
 8000448:	45a4      	cmp	ip, r4
 800044a:	d907      	bls.n	800045c <__udivmoddi4+0x15c>
 800044c:	19e4      	adds	r4, r4, r7
 800044e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000452:	d202      	bcs.n	800045a <__udivmoddi4+0x15a>
 8000454:	45a4      	cmp	ip, r4
 8000456:	f200 80b8 	bhi.w	80005ca <__udivmoddi4+0x2ca>
 800045a:	4618      	mov	r0, r3
 800045c:	eba4 040c 	sub.w	r4, r4, ip
 8000460:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000464:	e79d      	b.n	80003a2 <__udivmoddi4+0xa2>
 8000466:	4631      	mov	r1, r6
 8000468:	4630      	mov	r0, r6
 800046a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046e:	f1ce 0420 	rsb	r4, lr, #32
 8000472:	fa05 f30e 	lsl.w	r3, r5, lr
 8000476:	fa07 f70e 	lsl.w	r7, r7, lr
 800047a:	fa20 f804 	lsr.w	r8, r0, r4
 800047e:	0c3a      	lsrs	r2, r7, #16
 8000480:	fa25 f404 	lsr.w	r4, r5, r4
 8000484:	ea48 0803 	orr.w	r8, r8, r3
 8000488:	fbb4 f1f2 	udiv	r1, r4, r2
 800048c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000490:	fb02 4411 	mls	r4, r2, r1, r4
 8000494:	fa1f fc87 	uxth.w	ip, r7
 8000498:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800049c:	fb01 f30c 	mul.w	r3, r1, ip
 80004a0:	42ab      	cmp	r3, r5
 80004a2:	fa00 f40e 	lsl.w	r4, r0, lr
 80004a6:	d909      	bls.n	80004bc <__udivmoddi4+0x1bc>
 80004a8:	19ed      	adds	r5, r5, r7
 80004aa:	f101 30ff 	add.w	r0, r1, #4294967295
 80004ae:	f080 808a 	bcs.w	80005c6 <__udivmoddi4+0x2c6>
 80004b2:	42ab      	cmp	r3, r5
 80004b4:	f240 8087 	bls.w	80005c6 <__udivmoddi4+0x2c6>
 80004b8:	3902      	subs	r1, #2
 80004ba:	443d      	add	r5, r7
 80004bc:	1aeb      	subs	r3, r5, r3
 80004be:	fa1f f588 	uxth.w	r5, r8
 80004c2:	fbb3 f0f2 	udiv	r0, r3, r2
 80004c6:	fb02 3310 	mls	r3, r2, r0, r3
 80004ca:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80004ce:	fb00 f30c 	mul.w	r3, r0, ip
 80004d2:	42ab      	cmp	r3, r5
 80004d4:	d907      	bls.n	80004e6 <__udivmoddi4+0x1e6>
 80004d6:	19ed      	adds	r5, r5, r7
 80004d8:	f100 38ff 	add.w	r8, r0, #4294967295
 80004dc:	d26f      	bcs.n	80005be <__udivmoddi4+0x2be>
 80004de:	42ab      	cmp	r3, r5
 80004e0:	d96d      	bls.n	80005be <__udivmoddi4+0x2be>
 80004e2:	3802      	subs	r0, #2
 80004e4:	443d      	add	r5, r7
 80004e6:	1aeb      	subs	r3, r5, r3
 80004e8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004ec:	e78f      	b.n	800040e <__udivmoddi4+0x10e>
 80004ee:	f1c1 0720 	rsb	r7, r1, #32
 80004f2:	fa22 f807 	lsr.w	r8, r2, r7
 80004f6:	408b      	lsls	r3, r1
 80004f8:	fa05 f401 	lsl.w	r4, r5, r1
 80004fc:	ea48 0303 	orr.w	r3, r8, r3
 8000500:	fa20 fe07 	lsr.w	lr, r0, r7
 8000504:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000508:	40fd      	lsrs	r5, r7
 800050a:	ea4e 0e04 	orr.w	lr, lr, r4
 800050e:	fbb5 f9fc 	udiv	r9, r5, ip
 8000512:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000516:	fb0c 5519 	mls	r5, ip, r9, r5
 800051a:	fa1f f883 	uxth.w	r8, r3
 800051e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000522:	fb09 f408 	mul.w	r4, r9, r8
 8000526:	42ac      	cmp	r4, r5
 8000528:	fa02 f201 	lsl.w	r2, r2, r1
 800052c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000530:	d908      	bls.n	8000544 <__udivmoddi4+0x244>
 8000532:	18ed      	adds	r5, r5, r3
 8000534:	f109 30ff 	add.w	r0, r9, #4294967295
 8000538:	d243      	bcs.n	80005c2 <__udivmoddi4+0x2c2>
 800053a:	42ac      	cmp	r4, r5
 800053c:	d941      	bls.n	80005c2 <__udivmoddi4+0x2c2>
 800053e:	f1a9 0902 	sub.w	r9, r9, #2
 8000542:	441d      	add	r5, r3
 8000544:	1b2d      	subs	r5, r5, r4
 8000546:	fa1f fe8e 	uxth.w	lr, lr
 800054a:	fbb5 f0fc 	udiv	r0, r5, ip
 800054e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000552:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000556:	fb00 f808 	mul.w	r8, r0, r8
 800055a:	45a0      	cmp	r8, r4
 800055c:	d907      	bls.n	800056e <__udivmoddi4+0x26e>
 800055e:	18e4      	adds	r4, r4, r3
 8000560:	f100 35ff 	add.w	r5, r0, #4294967295
 8000564:	d229      	bcs.n	80005ba <__udivmoddi4+0x2ba>
 8000566:	45a0      	cmp	r8, r4
 8000568:	d927      	bls.n	80005ba <__udivmoddi4+0x2ba>
 800056a:	3802      	subs	r0, #2
 800056c:	441c      	add	r4, r3
 800056e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000572:	eba4 0408 	sub.w	r4, r4, r8
 8000576:	fba0 8902 	umull	r8, r9, r0, r2
 800057a:	454c      	cmp	r4, r9
 800057c:	46c6      	mov	lr, r8
 800057e:	464d      	mov	r5, r9
 8000580:	d315      	bcc.n	80005ae <__udivmoddi4+0x2ae>
 8000582:	d012      	beq.n	80005aa <__udivmoddi4+0x2aa>
 8000584:	b156      	cbz	r6, 800059c <__udivmoddi4+0x29c>
 8000586:	ebba 030e 	subs.w	r3, sl, lr
 800058a:	eb64 0405 	sbc.w	r4, r4, r5
 800058e:	fa04 f707 	lsl.w	r7, r4, r7
 8000592:	40cb      	lsrs	r3, r1
 8000594:	431f      	orrs	r7, r3
 8000596:	40cc      	lsrs	r4, r1
 8000598:	6037      	str	r7, [r6, #0]
 800059a:	6074      	str	r4, [r6, #4]
 800059c:	2100      	movs	r1, #0
 800059e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005a2:	4618      	mov	r0, r3
 80005a4:	e6f8      	b.n	8000398 <__udivmoddi4+0x98>
 80005a6:	4690      	mov	r8, r2
 80005a8:	e6e0      	b.n	800036c <__udivmoddi4+0x6c>
 80005aa:	45c2      	cmp	sl, r8
 80005ac:	d2ea      	bcs.n	8000584 <__udivmoddi4+0x284>
 80005ae:	ebb8 0e02 	subs.w	lr, r8, r2
 80005b2:	eb69 0503 	sbc.w	r5, r9, r3
 80005b6:	3801      	subs	r0, #1
 80005b8:	e7e4      	b.n	8000584 <__udivmoddi4+0x284>
 80005ba:	4628      	mov	r0, r5
 80005bc:	e7d7      	b.n	800056e <__udivmoddi4+0x26e>
 80005be:	4640      	mov	r0, r8
 80005c0:	e791      	b.n	80004e6 <__udivmoddi4+0x1e6>
 80005c2:	4681      	mov	r9, r0
 80005c4:	e7be      	b.n	8000544 <__udivmoddi4+0x244>
 80005c6:	4601      	mov	r1, r0
 80005c8:	e778      	b.n	80004bc <__udivmoddi4+0x1bc>
 80005ca:	3802      	subs	r0, #2
 80005cc:	443c      	add	r4, r7
 80005ce:	e745      	b.n	800045c <__udivmoddi4+0x15c>
 80005d0:	4608      	mov	r0, r1
 80005d2:	e708      	b.n	80003e6 <__udivmoddi4+0xe6>
 80005d4:	f1a8 0802 	sub.w	r8, r8, #2
 80005d8:	443d      	add	r5, r7
 80005da:	e72b      	b.n	8000434 <__udivmoddi4+0x134>

080005dc <__aeabi_idiv0>:
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005e0:	b510      	push	{r4, lr}
 80005e2:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005e4:	4b0e      	ldr	r3, [pc, #56]	; (8000620 <HAL_InitTick+0x40>)
 80005e6:	7818      	ldrb	r0, [r3, #0]
 80005e8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005ec:	fbb3 f3f0 	udiv	r3, r3, r0
 80005f0:	4a0c      	ldr	r2, [pc, #48]	; (8000624 <HAL_InitTick+0x44>)
 80005f2:	6810      	ldr	r0, [r2, #0]
 80005f4:	fbb0 f0f3 	udiv	r0, r0, r3
 80005f8:	f000 fa28 	bl	8000a4c <HAL_SYSTICK_Config>
 80005fc:	b968      	cbnz	r0, 800061a <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005fe:	2c0f      	cmp	r4, #15
 8000600:	d901      	bls.n	8000606 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8000602:	2001      	movs	r0, #1
  }

  /* Return function status */
  return HAL_OK;
}
 8000604:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000606:	2200      	movs	r2, #0
 8000608:	4621      	mov	r1, r4
 800060a:	f04f 30ff 	mov.w	r0, #4294967295
 800060e:	f000 f9ed 	bl	80009ec <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000612:	4b05      	ldr	r3, [pc, #20]	; (8000628 <HAL_InitTick+0x48>)
 8000614:	601c      	str	r4, [r3, #0]
  return HAL_OK;
 8000616:	2000      	movs	r0, #0
 8000618:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800061a:	2001      	movs	r0, #1
 800061c:	bd10      	pop	{r4, pc}
 800061e:	bf00      	nop
 8000620:	20000000 	.word	0x20000000
 8000624:	20000108 	.word	0x20000108
 8000628:	20000004 	.word	0x20000004

0800062c <HAL_Init>:
{
 800062c:	b508      	push	{r3, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800062e:	2003      	movs	r0, #3
 8000630:	f000 f9ca 	bl	80009c8 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000634:	2000      	movs	r0, #0
 8000636:	f7ff ffd3 	bl	80005e0 <HAL_InitTick>
  HAL_MspInit();
 800063a:	f002 fb75 	bl	8002d28 <HAL_MspInit>
}
 800063e:	2000      	movs	r0, #0
 8000640:	bd08      	pop	{r3, pc}
	...

08000644 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000644:	4a03      	ldr	r2, [pc, #12]	; (8000654 <HAL_IncTick+0x10>)
 8000646:	6811      	ldr	r1, [r2, #0]
 8000648:	4b03      	ldr	r3, [pc, #12]	; (8000658 <HAL_IncTick+0x14>)
 800064a:	781b      	ldrb	r3, [r3, #0]
 800064c:	440b      	add	r3, r1
 800064e:	6013      	str	r3, [r2, #0]
 8000650:	4770      	bx	lr
 8000652:	bf00      	nop
 8000654:	200001a8 	.word	0x200001a8
 8000658:	20000000 	.word	0x20000000

0800065c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800065c:	4b01      	ldr	r3, [pc, #4]	; (8000664 <HAL_GetTick+0x8>)
 800065e:	6818      	ldr	r0, [r3, #0]
}
 8000660:	4770      	bx	lr
 8000662:	bf00      	nop
 8000664:	200001a8 	.word	0x200001a8

08000668 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000668:	b538      	push	{r3, r4, r5, lr}
 800066a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800066c:	f7ff fff6 	bl	800065c <HAL_GetTick>
 8000670:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000672:	f1b4 3fff 	cmp.w	r4, #4294967295
 8000676:	d002      	beq.n	800067e <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8000678:	4b04      	ldr	r3, [pc, #16]	; (800068c <HAL_Delay+0x24>)
 800067a:	781b      	ldrb	r3, [r3, #0]
 800067c:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800067e:	f7ff ffed 	bl	800065c <HAL_GetTick>
 8000682:	1b40      	subs	r0, r0, r5
 8000684:	4284      	cmp	r4, r0
 8000686:	d8fa      	bhi.n	800067e <HAL_Delay+0x16>
  {
  }
}
 8000688:	bd38      	pop	{r3, r4, r5, pc}
 800068a:	bf00      	nop
 800068c:	20000000 	.word	0x20000000

08000690 <ADC_Init>:
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8000690:	4b4a      	ldr	r3, [pc, #296]	; (80007bc <ADC_Init+0x12c>)
 8000692:	685a      	ldr	r2, [r3, #4]
 8000694:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8000698:	605a      	str	r2, [r3, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 800069a:	685a      	ldr	r2, [r3, #4]
 800069c:	6841      	ldr	r1, [r0, #4]
 800069e:	430a      	orrs	r2, r1
 80006a0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80006a2:	6802      	ldr	r2, [r0, #0]
 80006a4:	6853      	ldr	r3, [r2, #4]
 80006a6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80006aa:	6053      	str	r3, [r2, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80006ac:	6802      	ldr	r2, [r0, #0]
 80006ae:	6853      	ldr	r3, [r2, #4]
 80006b0:	6901      	ldr	r1, [r0, #16]
 80006b2:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80006b6:	6053      	str	r3, [r2, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80006b8:	6802      	ldr	r2, [r0, #0]
 80006ba:	6853      	ldr	r3, [r2, #4]
 80006bc:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 80006c0:	6053      	str	r3, [r2, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80006c2:	6802      	ldr	r2, [r0, #0]
 80006c4:	6853      	ldr	r3, [r2, #4]
 80006c6:	6881      	ldr	r1, [r0, #8]
 80006c8:	430b      	orrs	r3, r1
 80006ca:	6053      	str	r3, [r2, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80006cc:	6802      	ldr	r2, [r0, #0]
 80006ce:	6893      	ldr	r3, [r2, #8]
 80006d0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80006d4:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80006d6:	6802      	ldr	r2, [r0, #0]
 80006d8:	6893      	ldr	r3, [r2, #8]
 80006da:	68c1      	ldr	r1, [r0, #12]
 80006dc:	430b      	orrs	r3, r1
 80006de:	6093      	str	r3, [r2, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80006e0:	6a82      	ldr	r2, [r0, #40]	; 0x28
 80006e2:	4b37      	ldr	r3, [pc, #220]	; (80007c0 <ADC_Init+0x130>)
 80006e4:	429a      	cmp	r2, r3
 80006e6:	d04b      	beq.n	8000780 <ADC_Init+0xf0>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80006e8:	6802      	ldr	r2, [r0, #0]
 80006ea:	6893      	ldr	r3, [r2, #8]
 80006ec:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 80006f0:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80006f2:	6802      	ldr	r2, [r0, #0]
 80006f4:	6893      	ldr	r3, [r2, #8]
 80006f6:	6a81      	ldr	r1, [r0, #40]	; 0x28
 80006f8:	430b      	orrs	r3, r1
 80006fa:	6093      	str	r3, [r2, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80006fc:	6802      	ldr	r2, [r0, #0]
 80006fe:	6893      	ldr	r3, [r2, #8]
 8000700:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8000704:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8000706:	6802      	ldr	r2, [r0, #0]
 8000708:	6893      	ldr	r3, [r2, #8]
 800070a:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800070c:	430b      	orrs	r3, r1
 800070e:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000710:	6802      	ldr	r2, [r0, #0]
 8000712:	6893      	ldr	r3, [r2, #8]
 8000714:	f023 0302 	bic.w	r3, r3, #2
 8000718:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800071a:	6802      	ldr	r2, [r0, #0]
 800071c:	6893      	ldr	r3, [r2, #8]
 800071e:	6981      	ldr	r1, [r0, #24]
 8000720:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 8000724:	6093      	str	r3, [r2, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8000726:	f890 3020 	ldrb.w	r3, [r0, #32]
 800072a:	2b00      	cmp	r3, #0
 800072c:	d133      	bne.n	8000796 <ADC_Init+0x106>
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800072e:	6802      	ldr	r2, [r0, #0]
 8000730:	6853      	ldr	r3, [r2, #4]
 8000732:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000736:	6053      	str	r3, [r2, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8000738:	6802      	ldr	r2, [r0, #0]
 800073a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800073c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8000740:	62d3      	str	r3, [r2, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8000742:	6801      	ldr	r1, [r0, #0]
 8000744:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8000746:	69c2      	ldr	r2, [r0, #28]
 8000748:	3a01      	subs	r2, #1
 800074a:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 800074e:	62cb      	str	r3, [r1, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8000750:	6802      	ldr	r2, [r0, #0]
 8000752:	6893      	ldr	r3, [r2, #8]
 8000754:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000758:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800075a:	6802      	ldr	r2, [r0, #0]
 800075c:	6893      	ldr	r3, [r2, #8]
 800075e:	f890 1030 	ldrb.w	r1, [r0, #48]	; 0x30
 8000762:	ea43 2341 	orr.w	r3, r3, r1, lsl #9
 8000766:	6093      	str	r3, [r2, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8000768:	6802      	ldr	r2, [r0, #0]
 800076a:	6893      	ldr	r3, [r2, #8]
 800076c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000770:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000772:	6802      	ldr	r2, [r0, #0]
 8000774:	6893      	ldr	r3, [r2, #8]
 8000776:	6941      	ldr	r1, [r0, #20]
 8000778:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
 800077c:	6093      	str	r3, [r2, #8]
 800077e:	4770      	bx	lr
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000780:	6802      	ldr	r2, [r0, #0]
 8000782:	6893      	ldr	r3, [r2, #8]
 8000784:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8000788:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800078a:	6802      	ldr	r2, [r0, #0]
 800078c:	6893      	ldr	r3, [r2, #8]
 800078e:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8000792:	6093      	str	r3, [r2, #8]
 8000794:	e7bc      	b.n	8000710 <ADC_Init+0x80>
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8000796:	6802      	ldr	r2, [r0, #0]
 8000798:	6853      	ldr	r3, [r2, #4]
 800079a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800079e:	6053      	str	r3, [r2, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80007a0:	6802      	ldr	r2, [r0, #0]
 80007a2:	6853      	ldr	r3, [r2, #4]
 80007a4:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80007a8:	6053      	str	r3, [r2, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80007aa:	6801      	ldr	r1, [r0, #0]
 80007ac:	684b      	ldr	r3, [r1, #4]
 80007ae:	6a42      	ldr	r2, [r0, #36]	; 0x24
 80007b0:	3a01      	subs	r2, #1
 80007b2:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
 80007b6:	604b      	str	r3, [r1, #4]
 80007b8:	e7be      	b.n	8000738 <ADC_Init+0xa8>
 80007ba:	bf00      	nop
 80007bc:	40012300 	.word	0x40012300
 80007c0:	0f000001 	.word	0x0f000001

080007c4 <HAL_ADC_Init>:
  if(hadc == NULL)
 80007c4:	b328      	cbz	r0, 8000812 <HAL_ADC_Init+0x4e>
{
 80007c6:	b510      	push	{r4, lr}
 80007c8:	4604      	mov	r4, r0
  if(hadc->State == HAL_ADC_STATE_RESET)
 80007ca:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80007cc:	b143      	cbz	r3, 80007e0 <HAL_ADC_Init+0x1c>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80007ce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80007d0:	f013 0f10 	tst.w	r3, #16
 80007d4:	d00b      	beq.n	80007ee <HAL_ADC_Init+0x2a>
    tmp_hal_status = HAL_ERROR;
 80007d6:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 80007d8:	2300      	movs	r3, #0
 80007da:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  return tmp_hal_status;
 80007de:	bd10      	pop	{r4, pc}
    HAL_ADC_MspInit(hadc);
 80007e0:	f002 faba 	bl	8002d58 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 80007e4:	2300      	movs	r3, #0
 80007e6:	6463      	str	r3, [r4, #68]	; 0x44
    hadc->Lock = HAL_UNLOCKED;
 80007e8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 80007ec:	e7ef      	b.n	80007ce <HAL_ADC_Init+0xa>
    ADC_STATE_CLR_SET(hadc->State,
 80007ee:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80007f0:	4b09      	ldr	r3, [pc, #36]	; (8000818 <HAL_ADC_Init+0x54>)
 80007f2:	4013      	ands	r3, r2
 80007f4:	f043 0302 	orr.w	r3, r3, #2
 80007f8:	6423      	str	r3, [r4, #64]	; 0x40
    ADC_Init(hadc);
 80007fa:	4620      	mov	r0, r4
 80007fc:	f7ff ff48 	bl	8000690 <ADC_Init>
    ADC_CLEAR_ERRORCODE(hadc);
 8000800:	2000      	movs	r0, #0
 8000802:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8000804:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000806:	f023 0303 	bic.w	r3, r3, #3
 800080a:	f043 0301 	orr.w	r3, r3, #1
 800080e:	6423      	str	r3, [r4, #64]	; 0x40
 8000810:	e7e2      	b.n	80007d8 <HAL_ADC_Init+0x14>
    return HAL_ERROR;
 8000812:	2001      	movs	r0, #1
 8000814:	4770      	bx	lr
 8000816:	bf00      	nop
 8000818:	ffffeefd 	.word	0xffffeefd

0800081c <HAL_ADC_ConfigChannel>:
{
 800081c:	b430      	push	{r4, r5}
 800081e:	b082      	sub	sp, #8
  __IO uint32_t counter = 0;
 8000820:	2300      	movs	r3, #0
 8000822:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8000824:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8000828:	2b01      	cmp	r3, #1
 800082a:	f000 80c0 	beq.w	80009ae <HAL_ADC_ConfigChannel+0x192>
 800082e:	2301      	movs	r3, #1
 8000830:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
	if (sConfig->Channel > ADC_CHANNEL_9)
 8000834:	680b      	ldr	r3, [r1, #0]
 8000836:	2b09      	cmp	r3, #9
 8000838:	d922      	bls.n	8000880 <HAL_ADC_ConfigChannel+0x64>
		hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800083a:	6805      	ldr	r5, [r0, #0]
 800083c:	68ea      	ldr	r2, [r5, #12]
 800083e:	b29b      	uxth	r3, r3
 8000840:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8000844:	3b1e      	subs	r3, #30
 8000846:	2407      	movs	r4, #7
 8000848:	fa04 f303 	lsl.w	r3, r4, r3
 800084c:	ea22 0303 	bic.w	r3, r2, r3
 8000850:	60eb      	str	r3, [r5, #12]
		if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000852:	680b      	ldr	r3, [r1, #0]
 8000854:	4a57      	ldr	r2, [pc, #348]	; (80009b4 <HAL_ADC_ConfigChannel+0x198>)
 8000856:	4293      	cmp	r3, r2
 8000858:	d00b      	beq.n	8000872 <HAL_ADC_ConfigChannel+0x56>
		  hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800085a:	6805      	ldr	r5, [r0, #0]
 800085c:	68ea      	ldr	r2, [r5, #12]
 800085e:	688c      	ldr	r4, [r1, #8]
 8000860:	b29b      	uxth	r3, r3
 8000862:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8000866:	3b1e      	subs	r3, #30
 8000868:	fa04 f303 	lsl.w	r3, r4, r3
 800086c:	4313      	orrs	r3, r2
 800086e:	60eb      	str	r3, [r5, #12]
 8000870:	e01b      	b.n	80008aa <HAL_ADC_ConfigChannel+0x8e>
			hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8000872:	6802      	ldr	r2, [r0, #0]
 8000874:	68d3      	ldr	r3, [r2, #12]
 8000876:	688c      	ldr	r4, [r1, #8]
 8000878:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
 800087c:	60d3      	str	r3, [r2, #12]
 800087e:	e014      	b.n	80008aa <HAL_ADC_ConfigChannel+0x8e>
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8000880:	6805      	ldr	r5, [r0, #0]
 8000882:	692a      	ldr	r2, [r5, #16]
 8000884:	b29b      	uxth	r3, r3
 8000886:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800088a:	2407      	movs	r4, #7
 800088c:	fa04 f303 	lsl.w	r3, r4, r3
 8000890:	ea22 0303 	bic.w	r3, r2, r3
 8000894:	612b      	str	r3, [r5, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8000896:	6805      	ldr	r5, [r0, #0]
 8000898:	692a      	ldr	r2, [r5, #16]
 800089a:	688c      	ldr	r4, [r1, #8]
 800089c:	880b      	ldrh	r3, [r1, #0]
 800089e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80008a2:	fa04 f303 	lsl.w	r3, r4, r3
 80008a6:	4313      	orrs	r3, r2
 80008a8:	612b      	str	r3, [r5, #16]
  if (sConfig->Rank < 7)
 80008aa:	684b      	ldr	r3, [r1, #4]
 80008ac:	2b06      	cmp	r3, #6
 80008ae:	d824      	bhi.n	80008fa <HAL_ADC_ConfigChannel+0xde>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80008b0:	6805      	ldr	r5, [r0, #0]
 80008b2:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80008b4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80008b8:	3b05      	subs	r3, #5
 80008ba:	241f      	movs	r4, #31
 80008bc:	fa04 f303 	lsl.w	r3, r4, r3
 80008c0:	ea22 0303 	bic.w	r3, r2, r3
 80008c4:	636b      	str	r3, [r5, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80008c6:	6805      	ldr	r5, [r0, #0]
 80008c8:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80008ca:	684b      	ldr	r3, [r1, #4]
 80008cc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80008d0:	3b05      	subs	r3, #5
 80008d2:	880c      	ldrh	r4, [r1, #0]
 80008d4:	fa04 f303 	lsl.w	r3, r4, r3
 80008d8:	4313      	orrs	r3, r2
 80008da:	636b      	str	r3, [r5, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80008dc:	6802      	ldr	r2, [r0, #0]
 80008de:	4b36      	ldr	r3, [pc, #216]	; (80009b8 <HAL_ADC_ConfigChannel+0x19c>)
 80008e0:	429a      	cmp	r2, r3
 80008e2:	d03a      	beq.n	800095a <HAL_ADC_ConfigChannel+0x13e>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80008e4:	6802      	ldr	r2, [r0, #0]
 80008e6:	4b34      	ldr	r3, [pc, #208]	; (80009b8 <HAL_ADC_ConfigChannel+0x19c>)
 80008e8:	429a      	cmp	r2, r3
 80008ea:	d03f      	beq.n	800096c <HAL_ADC_ConfigChannel+0x150>
  __HAL_UNLOCK(hadc);
 80008ec:	2300      	movs	r3, #0
 80008ee:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 80008f2:	4618      	mov	r0, r3
}
 80008f4:	b002      	add	sp, #8
 80008f6:	bc30      	pop	{r4, r5}
 80008f8:	4770      	bx	lr
  else if (sConfig->Rank < 13)
 80008fa:	2b0c      	cmp	r3, #12
 80008fc:	d816      	bhi.n	800092c <HAL_ADC_ConfigChannel+0x110>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80008fe:	6805      	ldr	r5, [r0, #0]
 8000900:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8000902:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000906:	3b23      	subs	r3, #35	; 0x23
 8000908:	241f      	movs	r4, #31
 800090a:	fa04 f303 	lsl.w	r3, r4, r3
 800090e:	ea22 0303 	bic.w	r3, r2, r3
 8000912:	632b      	str	r3, [r5, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8000914:	6805      	ldr	r5, [r0, #0]
 8000916:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8000918:	684b      	ldr	r3, [r1, #4]
 800091a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800091e:	3b23      	subs	r3, #35	; 0x23
 8000920:	880c      	ldrh	r4, [r1, #0]
 8000922:	fa04 f303 	lsl.w	r3, r4, r3
 8000926:	4313      	orrs	r3, r2
 8000928:	632b      	str	r3, [r5, #48]	; 0x30
 800092a:	e7d7      	b.n	80008dc <HAL_ADC_ConfigChannel+0xc0>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800092c:	6805      	ldr	r5, [r0, #0]
 800092e:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8000930:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000934:	3b41      	subs	r3, #65	; 0x41
 8000936:	241f      	movs	r4, #31
 8000938:	fa04 f303 	lsl.w	r3, r4, r3
 800093c:	ea22 0303 	bic.w	r3, r2, r3
 8000940:	62eb      	str	r3, [r5, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8000942:	6805      	ldr	r5, [r0, #0]
 8000944:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8000946:	684b      	ldr	r3, [r1, #4]
 8000948:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800094c:	3b41      	subs	r3, #65	; 0x41
 800094e:	880c      	ldrh	r4, [r1, #0]
 8000950:	fa04 f303 	lsl.w	r3, r4, r3
 8000954:	4313      	orrs	r3, r2
 8000956:	62eb      	str	r3, [r5, #44]	; 0x2c
 8000958:	e7c0      	b.n	80008dc <HAL_ADC_ConfigChannel+0xc0>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800095a:	680b      	ldr	r3, [r1, #0]
 800095c:	2b12      	cmp	r3, #18
 800095e:	d1c1      	bne.n	80008e4 <HAL_ADC_ConfigChannel+0xc8>
    ADC->CCR |= ADC_CCR_VBATE;
 8000960:	4a16      	ldr	r2, [pc, #88]	; (80009bc <HAL_ADC_ConfigChannel+0x1a0>)
 8000962:	6853      	ldr	r3, [r2, #4]
 8000964:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000968:	6053      	str	r3, [r2, #4]
 800096a:	e7bb      	b.n	80008e4 <HAL_ADC_ConfigChannel+0xc8>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800096c:	680b      	ldr	r3, [r1, #0]
 800096e:	4a11      	ldr	r2, [pc, #68]	; (80009b4 <HAL_ADC_ConfigChannel+0x198>)
 8000970:	2b11      	cmp	r3, #17
 8000972:	bf18      	it	ne
 8000974:	4293      	cmpne	r3, r2
 8000976:	d1b9      	bne.n	80008ec <HAL_ADC_ConfigChannel+0xd0>
    ADC->CCR |= ADC_CCR_TSVREFE;
 8000978:	4a10      	ldr	r2, [pc, #64]	; (80009bc <HAL_ADC_ConfigChannel+0x1a0>)
 800097a:	6853      	ldr	r3, [r2, #4]
 800097c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000980:	6053      	str	r3, [r2, #4]
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000982:	680a      	ldr	r2, [r1, #0]
 8000984:	4b0b      	ldr	r3, [pc, #44]	; (80009b4 <HAL_ADC_ConfigChannel+0x198>)
 8000986:	429a      	cmp	r2, r3
 8000988:	d1b0      	bne.n	80008ec <HAL_ADC_ConfigChannel+0xd0>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 800098a:	4b0d      	ldr	r3, [pc, #52]	; (80009c0 <HAL_ADC_ConfigChannel+0x1a4>)
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	4a0d      	ldr	r2, [pc, #52]	; (80009c4 <HAL_ADC_ConfigChannel+0x1a8>)
 8000990:	fba2 2303 	umull	r2, r3, r2, r3
 8000994:	0c9b      	lsrs	r3, r3, #18
 8000996:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800099a:	005a      	lsls	r2, r3, #1
 800099c:	9201      	str	r2, [sp, #4]
      while(counter != 0)
 800099e:	e002      	b.n	80009a6 <HAL_ADC_ConfigChannel+0x18a>
        counter--;
 80009a0:	9b01      	ldr	r3, [sp, #4]
 80009a2:	3b01      	subs	r3, #1
 80009a4:	9301      	str	r3, [sp, #4]
      while(counter != 0)
 80009a6:	9b01      	ldr	r3, [sp, #4]
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d1f9      	bne.n	80009a0 <HAL_ADC_ConfigChannel+0x184>
 80009ac:	e79e      	b.n	80008ec <HAL_ADC_ConfigChannel+0xd0>
  __HAL_LOCK(hadc);
 80009ae:	2002      	movs	r0, #2
 80009b0:	e7a0      	b.n	80008f4 <HAL_ADC_ConfigChannel+0xd8>
 80009b2:	bf00      	nop
 80009b4:	10000012 	.word	0x10000012
 80009b8:	40012000 	.word	0x40012000
 80009bc:	40012300 	.word	0x40012300
 80009c0:	20000108 	.word	0x20000108
 80009c4:	431bde83 	.word	0x431bde83

080009c8 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009c8:	4906      	ldr	r1, [pc, #24]	; (80009e4 <HAL_NVIC_SetPriorityGrouping+0x1c>)
 80009ca:	68cb      	ldr	r3, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009cc:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80009d0:	041b      	lsls	r3, r3, #16
 80009d2:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009d4:	0200      	lsls	r0, r0, #8
 80009d6:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009da:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 80009dc:	4a02      	ldr	r2, [pc, #8]	; (80009e8 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80009de:	431a      	orrs	r2, r3
  SCB->AIRCR =  reg_value;
 80009e0:	60ca      	str	r2, [r1, #12]
 80009e2:	4770      	bx	lr
 80009e4:	e000ed00 	.word	0xe000ed00
 80009e8:	05fa0000 	.word	0x05fa0000

080009ec <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80009ec:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009ee:	4b14      	ldr	r3, [pc, #80]	; (8000a40 <HAL_NVIC_SetPriority+0x54>)
 80009f0:	68db      	ldr	r3, [r3, #12]
 80009f2:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009f6:	f1c3 0407 	rsb	r4, r3, #7
 80009fa:	2c04      	cmp	r4, #4
 80009fc:	bf28      	it	cs
 80009fe:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a00:	1d1d      	adds	r5, r3, #4
 8000a02:	2d06      	cmp	r5, #6
 8000a04:	d913      	bls.n	8000a2e <HAL_NVIC_SetPriority+0x42>
 8000a06:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a08:	2501      	movs	r5, #1
 8000a0a:	fa05 f404 	lsl.w	r4, r5, r4
 8000a0e:	3c01      	subs	r4, #1
 8000a10:	4021      	ands	r1, r4
 8000a12:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a14:	fa05 f303 	lsl.w	r3, r5, r3
 8000a18:	3b01      	subs	r3, #1
 8000a1a:	4013      	ands	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a1c:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8000a1e:	2800      	cmp	r0, #0
 8000a20:	db07      	blt.n	8000a32 <HAL_NVIC_SetPriority+0x46>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a22:	0109      	lsls	r1, r1, #4
 8000a24:	b2c9      	uxtb	r1, r1
 8000a26:	4b07      	ldr	r3, [pc, #28]	; (8000a44 <HAL_NVIC_SetPriority+0x58>)
 8000a28:	5419      	strb	r1, [r3, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000a2a:	bc30      	pop	{r4, r5}
 8000a2c:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a2e:	2300      	movs	r3, #0
 8000a30:	e7ea      	b.n	8000a08 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a32:	f000 000f 	and.w	r0, r0, #15
 8000a36:	0109      	lsls	r1, r1, #4
 8000a38:	b2c9      	uxtb	r1, r1
 8000a3a:	4b03      	ldr	r3, [pc, #12]	; (8000a48 <HAL_NVIC_SetPriority+0x5c>)
 8000a3c:	5419      	strb	r1, [r3, r0]
 8000a3e:	e7f4      	b.n	8000a2a <HAL_NVIC_SetPriority+0x3e>
 8000a40:	e000ed00 	.word	0xe000ed00
 8000a44:	e000e400 	.word	0xe000e400
 8000a48:	e000ed14 	.word	0xe000ed14

08000a4c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a4c:	3801      	subs	r0, #1
 8000a4e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a52:	d20a      	bcs.n	8000a6a <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a54:	4b06      	ldr	r3, [pc, #24]	; (8000a70 <HAL_SYSTICK_Config+0x24>)
 8000a56:	6058      	str	r0, [r3, #4]
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a58:	21f0      	movs	r1, #240	; 0xf0
 8000a5a:	4a06      	ldr	r2, [pc, #24]	; (8000a74 <HAL_SYSTICK_Config+0x28>)
 8000a5c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a60:	2000      	movs	r0, #0
 8000a62:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a64:	2207      	movs	r2, #7
 8000a66:	601a      	str	r2, [r3, #0]
 8000a68:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000a6a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000a6c:	4770      	bx	lr
 8000a6e:	bf00      	nop
 8000a70:	e000e010 	.word	0xe000e010
 8000a74:	e000ed00 	.word	0xe000ed00

08000a78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a7a:	b083      	sub	sp, #12
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000a7c:	2400      	movs	r4, #0
 8000a7e:	e037      	b.n	8000af0 <HAL_GPIO_Init+0x78>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000a80:	2607      	movs	r6, #7
 8000a82:	e000      	b.n	8000a86 <HAL_GPIO_Init+0xe>
 8000a84:	2600      	movs	r6, #0
 8000a86:	fa06 f60e 	lsl.w	r6, r6, lr
 8000a8a:	4332      	orrs	r2, r6
        SYSCFG->EXTICR[position >> 2] = temp;
 8000a8c:	3302      	adds	r3, #2
 8000a8e:	4e66      	ldr	r6, [pc, #408]	; (8000c28 <HAL_GPIO_Init+0x1b0>)
 8000a90:	f846 2023 	str.w	r2, [r6, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000a94:	4b65      	ldr	r3, [pc, #404]	; (8000c2c <HAL_GPIO_Init+0x1b4>)
 8000a96:	681a      	ldr	r2, [r3, #0]
        temp &= ~((uint32_t)iocurrent);
 8000a98:	43eb      	mvns	r3, r5
 8000a9a:	ea02 0603 	and.w	r6, r2, r3
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a9e:	684f      	ldr	r7, [r1, #4]
 8000aa0:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 8000aa4:	d001      	beq.n	8000aaa <HAL_GPIO_Init+0x32>
        {
          temp |= iocurrent;
 8000aa6:	ea45 0602 	orr.w	r6, r5, r2
        }
        EXTI->IMR = temp;
 8000aaa:	4a60      	ldr	r2, [pc, #384]	; (8000c2c <HAL_GPIO_Init+0x1b4>)
 8000aac:	6016      	str	r6, [r2, #0]

        temp = EXTI->EMR;
 8000aae:	6852      	ldr	r2, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
 8000ab0:	ea03 0602 	and.w	r6, r3, r2
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ab4:	684f      	ldr	r7, [r1, #4]
 8000ab6:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8000aba:	d001      	beq.n	8000ac0 <HAL_GPIO_Init+0x48>
        {
          temp |= iocurrent;
 8000abc:	ea45 0602 	orr.w	r6, r5, r2
        }
        EXTI->EMR = temp;
 8000ac0:	4a5a      	ldr	r2, [pc, #360]	; (8000c2c <HAL_GPIO_Init+0x1b4>)
 8000ac2:	6056      	str	r6, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ac4:	6892      	ldr	r2, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8000ac6:	ea03 0602 	and.w	r6, r3, r2
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000aca:	684f      	ldr	r7, [r1, #4]
 8000acc:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8000ad0:	d001      	beq.n	8000ad6 <HAL_GPIO_Init+0x5e>
        {
          temp |= iocurrent;
 8000ad2:	ea45 0602 	orr.w	r6, r5, r2
        }
        EXTI->RTSR = temp;
 8000ad6:	4a55      	ldr	r2, [pc, #340]	; (8000c2c <HAL_GPIO_Init+0x1b4>)
 8000ad8:	6096      	str	r6, [r2, #8]

        temp = EXTI->FTSR;
 8000ada:	68d2      	ldr	r2, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
 8000adc:	4013      	ands	r3, r2
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ade:	684e      	ldr	r6, [r1, #4]
 8000ae0:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 8000ae4:	d001      	beq.n	8000aea <HAL_GPIO_Init+0x72>
        {
          temp |= iocurrent;
 8000ae6:	ea45 0302 	orr.w	r3, r5, r2
        }
        EXTI->FTSR = temp;
 8000aea:	4a50      	ldr	r2, [pc, #320]	; (8000c2c <HAL_GPIO_Init+0x1b4>)
 8000aec:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8000aee:	3401      	adds	r4, #1
 8000af0:	2c0f      	cmp	r4, #15
 8000af2:	f200 8097 	bhi.w	8000c24 <HAL_GPIO_Init+0x1ac>
    ioposition = ((uint32_t)0x01) << position;
 8000af6:	2301      	movs	r3, #1
 8000af8:	40a3      	lsls	r3, r4
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000afa:	680a      	ldr	r2, [r1, #0]
 8000afc:	ea03 0502 	and.w	r5, r3, r2
    if(iocurrent == ioposition)
 8000b00:	42ab      	cmp	r3, r5
 8000b02:	d1f4      	bne.n	8000aee <HAL_GPIO_Init+0x76>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b04:	684a      	ldr	r2, [r1, #4]
 8000b06:	2a12      	cmp	r2, #18
 8000b08:	bf18      	it	ne
 8000b0a:	2a02      	cmpne	r2, #2
 8000b0c:	d112      	bne.n	8000b34 <HAL_GPIO_Init+0xbc>
        temp = GPIOx->AFR[position >> 3];
 8000b0e:	ea4f 0ed4 	mov.w	lr, r4, lsr #3
 8000b12:	f10e 0e08 	add.w	lr, lr, #8
 8000b16:	f850 202e 	ldr.w	r2, [r0, lr, lsl #2]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000b1a:	f004 0607 	and.w	r6, r4, #7
 8000b1e:	00b6      	lsls	r6, r6, #2
 8000b20:	270f      	movs	r7, #15
 8000b22:	40b7      	lsls	r7, r6
 8000b24:	ea22 0207 	bic.w	r2, r2, r7
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000b28:	690f      	ldr	r7, [r1, #16]
 8000b2a:	fa07 f606 	lsl.w	r6, r7, r6
 8000b2e:	4332      	orrs	r2, r6
        GPIOx->AFR[position >> 3] = temp;
 8000b30:	f840 202e 	str.w	r2, [r0, lr, lsl #2]
      temp = GPIOx->MODER;
 8000b34:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000b36:	ea4f 0e44 	mov.w	lr, r4, lsl #1
 8000b3a:	2203      	movs	r2, #3
 8000b3c:	fa02 f20e 	lsl.w	r2, r2, lr
 8000b40:	43d2      	mvns	r2, r2
 8000b42:	4016      	ands	r6, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000b44:	684f      	ldr	r7, [r1, #4]
 8000b46:	f007 0703 	and.w	r7, r7, #3
 8000b4a:	fa07 f70e 	lsl.w	r7, r7, lr
 8000b4e:	433e      	orrs	r6, r7
      GPIOx->MODER = temp;
 8000b50:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000b52:	684e      	ldr	r6, [r1, #4]
 8000b54:	1e77      	subs	r7, r6, #1
 8000b56:	2e11      	cmp	r6, #17
 8000b58:	bf18      	it	ne
 8000b5a:	2f01      	cmpne	r7, #1
 8000b5c:	d901      	bls.n	8000b62 <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b5e:	2e12      	cmp	r6, #18
 8000b60:	d10f      	bne.n	8000b82 <HAL_GPIO_Init+0x10a>
        temp = GPIOx->OSPEEDR; 
 8000b62:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000b64:	4016      	ands	r6, r2
        temp |= (GPIO_Init->Speed << (position * 2));
 8000b66:	68cf      	ldr	r7, [r1, #12]
 8000b68:	fa07 f70e 	lsl.w	r7, r7, lr
 8000b6c:	433e      	orrs	r6, r7
        GPIOx->OSPEEDR = temp;
 8000b6e:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 8000b70:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000b72:	ea26 0303 	bic.w	r3, r6, r3
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000b76:	684e      	ldr	r6, [r1, #4]
 8000b78:	f3c6 1600 	ubfx	r6, r6, #4, #1
 8000b7c:	40a6      	lsls	r6, r4
 8000b7e:	4333      	orrs	r3, r6
        GPIOx->OTYPER = temp;
 8000b80:	6043      	str	r3, [r0, #4]
      temp = GPIOx->PUPDR;
 8000b82:	68c3      	ldr	r3, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000b84:	401a      	ands	r2, r3
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8000b86:	688b      	ldr	r3, [r1, #8]
 8000b88:	fa03 f30e 	lsl.w	r3, r3, lr
 8000b8c:	431a      	orrs	r2, r3
      GPIOx->PUPDR = temp;
 8000b8e:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b90:	684b      	ldr	r3, [r1, #4]
 8000b92:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8000b96:	d0aa      	beq.n	8000aee <HAL_GPIO_Init+0x76>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b98:	4b25      	ldr	r3, [pc, #148]	; (8000c30 <HAL_GPIO_Init+0x1b8>)
 8000b9a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000b9c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000ba0:	645a      	str	r2, [r3, #68]	; 0x44
 8000ba2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ba4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ba8:	9301      	str	r3, [sp, #4]
 8000baa:	9b01      	ldr	r3, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 8000bac:	08a3      	lsrs	r3, r4, #2
 8000bae:	1c9e      	adds	r6, r3, #2
 8000bb0:	4a1d      	ldr	r2, [pc, #116]	; (8000c28 <HAL_GPIO_Init+0x1b0>)
 8000bb2:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000bb6:	f004 0603 	and.w	r6, r4, #3
 8000bba:	ea4f 0e86 	mov.w	lr, r6, lsl #2
 8000bbe:	260f      	movs	r6, #15
 8000bc0:	fa06 f60e 	lsl.w	r6, r6, lr
 8000bc4:	ea22 0206 	bic.w	r2, r2, r6
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000bc8:	4f1a      	ldr	r7, [pc, #104]	; (8000c34 <HAL_GPIO_Init+0x1bc>)
 8000bca:	42b8      	cmp	r0, r7
 8000bcc:	f43f af5a 	beq.w	8000a84 <HAL_GPIO_Init+0xc>
 8000bd0:	4e19      	ldr	r6, [pc, #100]	; (8000c38 <HAL_GPIO_Init+0x1c0>)
 8000bd2:	42b0      	cmp	r0, r6
 8000bd4:	d01a      	beq.n	8000c0c <HAL_GPIO_Init+0x194>
 8000bd6:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000bda:	42b0      	cmp	r0, r6
 8000bdc:	d018      	beq.n	8000c10 <HAL_GPIO_Init+0x198>
 8000bde:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000be2:	42b0      	cmp	r0, r6
 8000be4:	d016      	beq.n	8000c14 <HAL_GPIO_Init+0x19c>
 8000be6:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000bea:	42b0      	cmp	r0, r6
 8000bec:	d014      	beq.n	8000c18 <HAL_GPIO_Init+0x1a0>
 8000bee:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000bf2:	42b0      	cmp	r0, r6
 8000bf4:	d012      	beq.n	8000c1c <HAL_GPIO_Init+0x1a4>
 8000bf6:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000bfa:	42b0      	cmp	r0, r6
 8000bfc:	d010      	beq.n	8000c20 <HAL_GPIO_Init+0x1a8>
 8000bfe:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000c02:	42b0      	cmp	r0, r6
 8000c04:	f43f af3c 	beq.w	8000a80 <HAL_GPIO_Init+0x8>
 8000c08:	2608      	movs	r6, #8
 8000c0a:	e73c      	b.n	8000a86 <HAL_GPIO_Init+0xe>
 8000c0c:	2601      	movs	r6, #1
 8000c0e:	e73a      	b.n	8000a86 <HAL_GPIO_Init+0xe>
 8000c10:	2602      	movs	r6, #2
 8000c12:	e738      	b.n	8000a86 <HAL_GPIO_Init+0xe>
 8000c14:	2603      	movs	r6, #3
 8000c16:	e736      	b.n	8000a86 <HAL_GPIO_Init+0xe>
 8000c18:	2604      	movs	r6, #4
 8000c1a:	e734      	b.n	8000a86 <HAL_GPIO_Init+0xe>
 8000c1c:	2605      	movs	r6, #5
 8000c1e:	e732      	b.n	8000a86 <HAL_GPIO_Init+0xe>
 8000c20:	2606      	movs	r6, #6
 8000c22:	e730      	b.n	8000a86 <HAL_GPIO_Init+0xe>
      }
    }
  }
}
 8000c24:	b003      	add	sp, #12
 8000c26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c28:	40013800 	.word	0x40013800
 8000c2c:	40013c00 	.word	0x40013c00
 8000c30:	40023800 	.word	0x40023800
 8000c34:	40020000 	.word	0x40020000
 8000c38:	40020400 	.word	0x40020400

08000c3c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000c3c:	b912      	cbnz	r2, 8000c44 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8000c3e:	0409      	lsls	r1, r1, #16
 8000c40:	6181      	str	r1, [r0, #24]
 8000c42:	4770      	bx	lr
    GPIOx->BSRR = GPIO_Pin;
 8000c44:	6181      	str	r1, [r0, #24]
 8000c46:	4770      	bx	lr

08000c48 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8000c48:	6803      	ldr	r3, [r0, #0]
 8000c4a:	699a      	ldr	r2, [r3, #24]
 8000c4c:	f012 0f02 	tst.w	r2, #2
 8000c50:	d001      	beq.n	8000c56 <I2C_Flush_TXDR+0xe>
  {
    hi2c->Instance->TXDR = 0x00U;
 8000c52:	2200      	movs	r2, #0
 8000c54:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8000c56:	6803      	ldr	r3, [r0, #0]
 8000c58:	699a      	ldr	r2, [r3, #24]
 8000c5a:	f012 0f01 	tst.w	r2, #1
 8000c5e:	d103      	bne.n	8000c68 <I2C_Flush_TXDR+0x20>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8000c60:	699a      	ldr	r2, [r3, #24]
 8000c62:	f042 0201 	orr.w	r2, r2, #1
 8000c66:	619a      	str	r2, [r3, #24]
 8000c68:	4770      	bx	lr

08000c6a <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8000c6a:	b470      	push	{r4, r5, r6}
 8000c6c:	9d03      	ldr	r5, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8000c6e:	6806      	ldr	r6, [r0, #0]
 8000c70:	6870      	ldr	r0, [r6, #4]
 8000c72:	0d6c      	lsrs	r4, r5, #21
 8000c74:	f404 6480 	and.w	r4, r4, #1024	; 0x400
 8000c78:	f044 747f 	orr.w	r4, r4, #66846720	; 0x3fc0000
 8000c7c:	f444 3458 	orr.w	r4, r4, #221184	; 0x36000
 8000c80:	f444 747f 	orr.w	r4, r4, #1020	; 0x3fc
 8000c84:	f044 0403 	orr.w	r4, r4, #3
 8000c88:	ea20 0004 	bic.w	r0, r0, r4
 8000c8c:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8000c90:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8000c94:	4319      	orrs	r1, r3
 8000c96:	4329      	orrs	r1, r5
 8000c98:	4308      	orrs	r0, r1
 8000c9a:	6070      	str	r0, [r6, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8000c9c:	bc70      	pop	{r4, r5, r6}
 8000c9e:	4770      	bx	lr

08000ca0 <I2C_IsAcknowledgeFailed>:
{
 8000ca0:	b570      	push	{r4, r5, r6, lr}
 8000ca2:	4604      	mov	r4, r0
 8000ca4:	460d      	mov	r5, r1
 8000ca6:	4616      	mov	r6, r2
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000ca8:	6803      	ldr	r3, [r0, #0]
 8000caa:	699b      	ldr	r3, [r3, #24]
 8000cac:	f013 0f10 	tst.w	r3, #16
 8000cb0:	d01c      	beq.n	8000cec <I2C_IsAcknowledgeFailed+0x4c>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8000cb2:	6823      	ldr	r3, [r4, #0]
 8000cb4:	699a      	ldr	r2, [r3, #24]
 8000cb6:	f012 0f20 	tst.w	r2, #32
 8000cba:	d119      	bne.n	8000cf0 <I2C_IsAcknowledgeFailed+0x50>
      if (Timeout != HAL_MAX_DELAY)
 8000cbc:	f1b5 3fff 	cmp.w	r5, #4294967295
 8000cc0:	d0f7      	beq.n	8000cb2 <I2C_IsAcknowledgeFailed+0x12>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000cc2:	f7ff fccb 	bl	800065c <HAL_GetTick>
 8000cc6:	1b80      	subs	r0, r0, r6
 8000cc8:	4285      	cmp	r5, r0
 8000cca:	d301      	bcc.n	8000cd0 <I2C_IsAcknowledgeFailed+0x30>
 8000ccc:	2d00      	cmp	r5, #0
 8000cce:	d1f0      	bne.n	8000cb2 <I2C_IsAcknowledgeFailed+0x12>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000cd0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000cd2:	f043 0320 	orr.w	r3, r3, #32
 8000cd6:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8000cd8:	2320      	movs	r3, #32
 8000cda:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
          __HAL_UNLOCK(hi2c);
 8000ce4:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
          return HAL_ERROR;
 8000ce8:	2001      	movs	r0, #1
 8000cea:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 8000cec:	2000      	movs	r0, #0
 8000cee:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000cf0:	2210      	movs	r2, #16
 8000cf2:	61da      	str	r2, [r3, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000cf4:	6823      	ldr	r3, [r4, #0]
 8000cf6:	2520      	movs	r5, #32
 8000cf8:	61dd      	str	r5, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 8000cfa:	4620      	mov	r0, r4
 8000cfc:	f7ff ffa4 	bl	8000c48 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8000d00:	6822      	ldr	r2, [r4, #0]
 8000d02:	6853      	ldr	r3, [r2, #4]
 8000d04:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8000d08:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8000d0c:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8000d10:	f023 0301 	bic.w	r3, r3, #1
 8000d14:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8000d16:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000d18:	f043 0304 	orr.w	r3, r3, #4
 8000d1c:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8000d1e:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8000d22:	2300      	movs	r3, #0
 8000d24:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8000d28:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_ERROR;
 8000d2c:	2001      	movs	r0, #1
}
 8000d2e:	bd70      	pop	{r4, r5, r6, pc}

08000d30 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8000d30:	b570      	push	{r4, r5, r6, lr}
 8000d32:	4604      	mov	r4, r0
 8000d34:	460d      	mov	r5, r1
 8000d36:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8000d38:	6823      	ldr	r3, [r4, #0]
 8000d3a:	699b      	ldr	r3, [r3, #24]
 8000d3c:	f013 0f02 	tst.w	r3, #2
 8000d40:	d11d      	bne.n	8000d7e <I2C_WaitOnTXISFlagUntilTimeout+0x4e>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8000d42:	4632      	mov	r2, r6
 8000d44:	4629      	mov	r1, r5
 8000d46:	4620      	mov	r0, r4
 8000d48:	f7ff ffaa 	bl	8000ca0 <I2C_IsAcknowledgeFailed>
 8000d4c:	b9c8      	cbnz	r0, 8000d82 <I2C_WaitOnTXISFlagUntilTimeout+0x52>
    if (Timeout != HAL_MAX_DELAY)
 8000d4e:	f1b5 3fff 	cmp.w	r5, #4294967295
 8000d52:	d0f1      	beq.n	8000d38 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000d54:	f7ff fc82 	bl	800065c <HAL_GetTick>
 8000d58:	1b80      	subs	r0, r0, r6
 8000d5a:	4285      	cmp	r5, r0
 8000d5c:	d301      	bcc.n	8000d62 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 8000d5e:	2d00      	cmp	r5, #0
 8000d60:	d1ea      	bne.n	8000d38 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000d62:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000d64:	f043 0320 	orr.w	r3, r3, #32
 8000d68:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8000d6a:	2320      	movs	r3, #32
 8000d6c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8000d70:	2300      	movs	r3, #0
 8000d72:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8000d76:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 8000d7a:	2001      	movs	r0, #1
 8000d7c:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 8000d7e:	2000      	movs	r0, #0
 8000d80:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8000d82:	2001      	movs	r0, #1
}
 8000d84:	bd70      	pop	{r4, r5, r6, pc}

08000d86 <I2C_WaitOnFlagUntilTimeout>:
{
 8000d86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d88:	4605      	mov	r5, r0
 8000d8a:	460f      	mov	r7, r1
 8000d8c:	4616      	mov	r6, r2
 8000d8e:	461c      	mov	r4, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8000d90:	682b      	ldr	r3, [r5, #0]
 8000d92:	699b      	ldr	r3, [r3, #24]
 8000d94:	ea37 0303 	bics.w	r3, r7, r3
 8000d98:	bf0c      	ite	eq
 8000d9a:	2301      	moveq	r3, #1
 8000d9c:	2300      	movne	r3, #0
 8000d9e:	42b3      	cmp	r3, r6
 8000da0:	d118      	bne.n	8000dd4 <I2C_WaitOnFlagUntilTimeout+0x4e>
    if (Timeout != HAL_MAX_DELAY)
 8000da2:	f1b4 3fff 	cmp.w	r4, #4294967295
 8000da6:	d0f3      	beq.n	8000d90 <I2C_WaitOnFlagUntilTimeout+0xa>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000da8:	f7ff fc58 	bl	800065c <HAL_GetTick>
 8000dac:	9b06      	ldr	r3, [sp, #24]
 8000dae:	1ac0      	subs	r0, r0, r3
 8000db0:	4284      	cmp	r4, r0
 8000db2:	d301      	bcc.n	8000db8 <I2C_WaitOnFlagUntilTimeout+0x32>
 8000db4:	2c00      	cmp	r4, #0
 8000db6:	d1eb      	bne.n	8000d90 <I2C_WaitOnFlagUntilTimeout+0xa>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000db8:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8000dba:	f043 0320 	orr.w	r3, r3, #32
 8000dbe:	646b      	str	r3, [r5, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8000dc0:	2320      	movs	r3, #32
 8000dc2:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8000dcc:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
        return HAL_ERROR;
 8000dd0:	2001      	movs	r0, #1
 8000dd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return HAL_OK;
 8000dd4:	2000      	movs	r0, #0
}
 8000dd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08000dd8 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8000dd8:	b570      	push	{r4, r5, r6, lr}
 8000dda:	4605      	mov	r5, r0
 8000ddc:	460c      	mov	r4, r1
 8000dde:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8000de0:	682b      	ldr	r3, [r5, #0]
 8000de2:	699b      	ldr	r3, [r3, #24]
 8000de4:	f013 0f20 	tst.w	r3, #32
 8000de8:	d11a      	bne.n	8000e20 <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8000dea:	4632      	mov	r2, r6
 8000dec:	4621      	mov	r1, r4
 8000dee:	4628      	mov	r0, r5
 8000df0:	f7ff ff56 	bl	8000ca0 <I2C_IsAcknowledgeFailed>
 8000df4:	b9b0      	cbnz	r0, 8000e24 <I2C_WaitOnSTOPFlagUntilTimeout+0x4c>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000df6:	f7ff fc31 	bl	800065c <HAL_GetTick>
 8000dfa:	1b80      	subs	r0, r0, r6
 8000dfc:	4284      	cmp	r4, r0
 8000dfe:	d301      	bcc.n	8000e04 <I2C_WaitOnSTOPFlagUntilTimeout+0x2c>
 8000e00:	2c00      	cmp	r4, #0
 8000e02:	d1ed      	bne.n	8000de0 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000e04:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8000e06:	f043 0320 	orr.w	r3, r3, #32
 8000e0a:	646b      	str	r3, [r5, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8000e0c:	2320      	movs	r3, #32
 8000e0e:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8000e12:	2300      	movs	r3, #0
 8000e14:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8000e18:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
      return HAL_ERROR;
 8000e1c:	2001      	movs	r0, #1
 8000e1e:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 8000e20:	2000      	movs	r0, #0
 8000e22:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8000e24:	2001      	movs	r0, #1
}
 8000e26:	bd70      	pop	{r4, r5, r6, pc}

08000e28 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 8000e28:	b570      	push	{r4, r5, r6, lr}
 8000e2a:	4604      	mov	r4, r0
 8000e2c:	460d      	mov	r5, r1
 8000e2e:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8000e30:	6823      	ldr	r3, [r4, #0]
 8000e32:	699b      	ldr	r3, [r3, #24]
 8000e34:	f013 0f04 	tst.w	r3, #4
 8000e38:	d13e      	bne.n	8000eb8 <I2C_WaitOnRXNEFlagUntilTimeout+0x90>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8000e3a:	4632      	mov	r2, r6
 8000e3c:	4629      	mov	r1, r5
 8000e3e:	4620      	mov	r0, r4
 8000e40:	f7ff ff2e 	bl	8000ca0 <I2C_IsAcknowledgeFailed>
 8000e44:	4601      	mov	r1, r0
 8000e46:	2800      	cmp	r0, #0
 8000e48:	d138      	bne.n	8000ebc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8000e4a:	6823      	ldr	r3, [r4, #0]
 8000e4c:	699a      	ldr	r2, [r3, #24]
 8000e4e:	f012 0f20 	tst.w	r2, #32
 8000e52:	d113      	bne.n	8000e7c <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000e54:	f7ff fc02 	bl	800065c <HAL_GetTick>
 8000e58:	1b80      	subs	r0, r0, r6
 8000e5a:	4285      	cmp	r5, r0
 8000e5c:	d301      	bcc.n	8000e62 <I2C_WaitOnRXNEFlagUntilTimeout+0x3a>
 8000e5e:	2d00      	cmp	r5, #0
 8000e60:	d1e6      	bne.n	8000e30 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000e62:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000e64:	f043 0320 	orr.w	r3, r3, #32
 8000e68:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8000e6a:	2320      	movs	r3, #32
 8000e6c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      __HAL_UNLOCK(hi2c);
 8000e70:	2300      	movs	r3, #0
 8000e72:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8000e76:	2101      	movs	r1, #1
}
 8000e78:	4608      	mov	r0, r1
 8000e7a:	bd70      	pop	{r4, r5, r6, pc}
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8000e7c:	699a      	ldr	r2, [r3, #24]
 8000e7e:	f012 0f04 	tst.w	r2, #4
 8000e82:	d002      	beq.n	8000e8a <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
 8000e84:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8000e86:	2a00      	cmp	r2, #0
 8000e88:	d1f6      	bne.n	8000e78 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000e8a:	2220      	movs	r2, #32
 8000e8c:	61da      	str	r2, [r3, #28]
        I2C_RESET_CR2(hi2c);
 8000e8e:	6821      	ldr	r1, [r4, #0]
 8000e90:	684b      	ldr	r3, [r1, #4]
 8000e92:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8000e96:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8000e9a:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8000e9e:	f023 0301 	bic.w	r3, r3, #1
 8000ea2:	604b      	str	r3, [r1, #4]
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8000ea8:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8000eac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8000eb0:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 8000eb4:	2101      	movs	r1, #1
 8000eb6:	e7df      	b.n	8000e78 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
  return HAL_OK;
 8000eb8:	2100      	movs	r1, #0
 8000eba:	e7dd      	b.n	8000e78 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
      return HAL_ERROR;
 8000ebc:	2101      	movs	r1, #1
 8000ebe:	e7db      	b.n	8000e78 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>

08000ec0 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8000ec0:	2800      	cmp	r0, #0
 8000ec2:	d057      	beq.n	8000f74 <HAL_I2C_Init+0xb4>
{
 8000ec4:	b510      	push	{r4, lr}
 8000ec6:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000ec8:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d041      	beq.n	8000f54 <HAL_I2C_Init+0x94>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8000ed0:	2324      	movs	r3, #36	; 0x24
 8000ed2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8000ed6:	6822      	ldr	r2, [r4, #0]
 8000ed8:	6813      	ldr	r3, [r2, #0]
 8000eda:	f023 0301 	bic.w	r3, r3, #1
 8000ede:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000ee0:	6822      	ldr	r2, [r4, #0]
 8000ee2:	6863      	ldr	r3, [r4, #4]
 8000ee4:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8000ee8:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000eea:	6822      	ldr	r2, [r4, #0]
 8000eec:	6893      	ldr	r3, [r2, #8]
 8000eee:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000ef2:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000ef4:	68e3      	ldr	r3, [r4, #12]
 8000ef6:	2b01      	cmp	r3, #1
 8000ef8:	d031      	beq.n	8000f5e <HAL_I2C_Init+0x9e>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000efa:	6822      	ldr	r2, [r4, #0]
 8000efc:	68a3      	ldr	r3, [r4, #8]
 8000efe:	f443 4304 	orr.w	r3, r3, #33792	; 0x8400
 8000f02:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000f04:	68e3      	ldr	r3, [r4, #12]
 8000f06:	2b02      	cmp	r3, #2
 8000f08:	d02f      	beq.n	8000f6a <HAL_I2C_Init+0xaa>
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000f0a:	6822      	ldr	r2, [r4, #0]
 8000f0c:	6851      	ldr	r1, [r2, #4]
 8000f0e:	4b1a      	ldr	r3, [pc, #104]	; (8000f78 <HAL_I2C_Init+0xb8>)
 8000f10:	430b      	orrs	r3, r1
 8000f12:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000f14:	6822      	ldr	r2, [r4, #0]
 8000f16:	68d3      	ldr	r3, [r2, #12]
 8000f18:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000f1c:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8000f1e:	6822      	ldr	r2, [r4, #0]
 8000f20:	6923      	ldr	r3, [r4, #16]
 8000f22:	6961      	ldr	r1, [r4, #20]
 8000f24:	430b      	orrs	r3, r1
 8000f26:	69a1      	ldr	r1, [r4, #24]
 8000f28:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8000f2c:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000f2e:	6822      	ldr	r2, [r4, #0]
 8000f30:	69e3      	ldr	r3, [r4, #28]
 8000f32:	6a21      	ldr	r1, [r4, #32]
 8000f34:	430b      	orrs	r3, r1
 8000f36:	6013      	str	r3, [r2, #0]
  __HAL_I2C_ENABLE(hi2c);
 8000f38:	6822      	ldr	r2, [r4, #0]
 8000f3a:	6813      	ldr	r3, [r2, #0]
 8000f3c:	f043 0301 	orr.w	r3, r3, #1
 8000f40:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000f42:	2000      	movs	r0, #0
 8000f44:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000f46:	2320      	movs	r3, #32
 8000f48:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8000f4c:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000f4e:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
  return HAL_OK;
 8000f52:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8000f54:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8000f58:	f001 ff42 	bl	8002de0 <HAL_I2C_MspInit>
 8000f5c:	e7b8      	b.n	8000ed0 <HAL_I2C_Init+0x10>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000f5e:	6822      	ldr	r2, [r4, #0]
 8000f60:	68a3      	ldr	r3, [r4, #8]
 8000f62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f66:	6093      	str	r3, [r2, #8]
 8000f68:	e7cc      	b.n	8000f04 <HAL_I2C_Init+0x44>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000f6a:	6823      	ldr	r3, [r4, #0]
 8000f6c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000f70:	605a      	str	r2, [r3, #4]
 8000f72:	e7ca      	b.n	8000f0a <HAL_I2C_Init+0x4a>
    return HAL_ERROR;
 8000f74:	2001      	movs	r0, #1
 8000f76:	4770      	bx	lr
 8000f78:	02008000 	.word	0x02008000

08000f7c <HAL_I2C_Master_Transmit>:
{
 8000f7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000f80:	b083      	sub	sp, #12
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000f82:	f890 5041 	ldrb.w	r5, [r0, #65]	; 0x41
 8000f86:	b2ed      	uxtb	r5, r5
 8000f88:	2d20      	cmp	r5, #32
 8000f8a:	d004      	beq.n	8000f96 <HAL_I2C_Master_Transmit+0x1a>
    return HAL_BUSY;
 8000f8c:	2302      	movs	r3, #2
}
 8000f8e:	4618      	mov	r0, r3
 8000f90:	b003      	add	sp, #12
 8000f92:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_LOCK(hi2c);
 8000f96:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
 8000f9a:	2c01      	cmp	r4, #1
 8000f9c:	d101      	bne.n	8000fa2 <HAL_I2C_Master_Transmit+0x26>
 8000f9e:	2302      	movs	r3, #2
 8000fa0:	e7f5      	b.n	8000f8e <HAL_I2C_Master_Transmit+0x12>
 8000fa2:	4698      	mov	r8, r3
 8000fa4:	4617      	mov	r7, r2
 8000fa6:	460d      	mov	r5, r1
 8000fa8:	4604      	mov	r4, r0
 8000faa:	f04f 0901 	mov.w	r9, #1
 8000fae:	f880 9040 	strb.w	r9, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8000fb2:	f7ff fb53 	bl	800065c <HAL_GetTick>
 8000fb6:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000fb8:	9000      	str	r0, [sp, #0]
 8000fba:	2319      	movs	r3, #25
 8000fbc:	464a      	mov	r2, r9
 8000fbe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000fc2:	4620      	mov	r0, r4
 8000fc4:	f7ff fedf 	bl	8000d86 <I2C_WaitOnFlagUntilTimeout>
 8000fc8:	2800      	cmp	r0, #0
 8000fca:	f040 8089 	bne.w	80010e0 <HAL_I2C_Master_Transmit+0x164>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8000fce:	2321      	movs	r3, #33	; 0x21
 8000fd0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8000fd4:	2310      	movs	r3, #16
 8000fd6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8000fde:	6267      	str	r7, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8000fe0:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8000fe4:	6363      	str	r3, [r4, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000fe6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000fe8:	b29b      	uxth	r3, r3
 8000fea:	2bff      	cmp	r3, #255	; 0xff
 8000fec:	d90a      	bls.n	8001004 <HAL_I2C_Master_Transmit+0x88>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8000fee:	22ff      	movs	r2, #255	; 0xff
 8000ff0:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8000ff2:	4b3f      	ldr	r3, [pc, #252]	; (80010f0 <HAL_I2C_Master_Transmit+0x174>)
 8000ff4:	9300      	str	r3, [sp, #0]
 8000ff6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000ffa:	4629      	mov	r1, r5
 8000ffc:	4620      	mov	r0, r4
 8000ffe:	f7ff fe34 	bl	8000c6a <I2C_TransferConfig>
 8001002:	e018      	b.n	8001036 <HAL_I2C_Master_Transmit+0xba>
      hi2c->XferSize = hi2c->XferCount;
 8001004:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001006:	b292      	uxth	r2, r2
 8001008:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 800100a:	4b39      	ldr	r3, [pc, #228]	; (80010f0 <HAL_I2C_Master_Transmit+0x174>)
 800100c:	9300      	str	r3, [sp, #0]
 800100e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001012:	b2d2      	uxtb	r2, r2
 8001014:	4629      	mov	r1, r5
 8001016:	4620      	mov	r0, r4
 8001018:	f7ff fe27 	bl	8000c6a <I2C_TransferConfig>
 800101c:	e00b      	b.n	8001036 <HAL_I2C_Master_Transmit+0xba>
          hi2c->XferSize = hi2c->XferCount;
 800101e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001020:	b292      	uxth	r2, r2
 8001022:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001024:	2300      	movs	r3, #0
 8001026:	9300      	str	r3, [sp, #0]
 8001028:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800102c:	b2d2      	uxtb	r2, r2
 800102e:	4629      	mov	r1, r5
 8001030:	4620      	mov	r0, r4
 8001032:	f7ff fe1a 	bl	8000c6a <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001036:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001038:	b29b      	uxth	r3, r3
 800103a:	2b00      	cmp	r3, #0
 800103c:	d033      	beq.n	80010a6 <HAL_I2C_Master_Transmit+0x12a>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800103e:	4632      	mov	r2, r6
 8001040:	990a      	ldr	r1, [sp, #40]	; 0x28
 8001042:	4620      	mov	r0, r4
 8001044:	f7ff fe74 	bl	8000d30 <I2C_WaitOnTXISFlagUntilTimeout>
 8001048:	2800      	cmp	r0, #0
 800104a:	d14b      	bne.n	80010e4 <HAL_I2C_Master_Transmit+0x168>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800104c:	6823      	ldr	r3, [r4, #0]
 800104e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001050:	7812      	ldrb	r2, [r2, #0]
 8001052:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->pBuffPtr++;
 8001054:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001056:	3301      	adds	r3, #1
 8001058:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 800105a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800105c:	b29b      	uxth	r3, r3
 800105e:	3b01      	subs	r3, #1
 8001060:	b29b      	uxth	r3, r3
 8001062:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8001064:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001066:	3b01      	subs	r3, #1
 8001068:	b29b      	uxth	r3, r3
 800106a:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800106c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800106e:	b292      	uxth	r2, r2
 8001070:	2a00      	cmp	r2, #0
 8001072:	d0e0      	beq.n	8001036 <HAL_I2C_Master_Transmit+0xba>
 8001074:	2b00      	cmp	r3, #0
 8001076:	d1de      	bne.n	8001036 <HAL_I2C_Master_Transmit+0xba>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001078:	9600      	str	r6, [sp, #0]
 800107a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800107c:	2200      	movs	r2, #0
 800107e:	2180      	movs	r1, #128	; 0x80
 8001080:	4620      	mov	r0, r4
 8001082:	f7ff fe80 	bl	8000d86 <I2C_WaitOnFlagUntilTimeout>
 8001086:	bb78      	cbnz	r0, 80010e8 <HAL_I2C_Master_Transmit+0x16c>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001088:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800108a:	b29b      	uxth	r3, r3
 800108c:	2bff      	cmp	r3, #255	; 0xff
 800108e:	d9c6      	bls.n	800101e <HAL_I2C_Master_Transmit+0xa2>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001090:	22ff      	movs	r2, #255	; 0xff
 8001092:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001094:	2300      	movs	r3, #0
 8001096:	9300      	str	r3, [sp, #0]
 8001098:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800109c:	4629      	mov	r1, r5
 800109e:	4620      	mov	r0, r4
 80010a0:	f7ff fde3 	bl	8000c6a <I2C_TransferConfig>
 80010a4:	e7c7      	b.n	8001036 <HAL_I2C_Master_Transmit+0xba>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80010a6:	4632      	mov	r2, r6
 80010a8:	990a      	ldr	r1, [sp, #40]	; 0x28
 80010aa:	4620      	mov	r0, r4
 80010ac:	f7ff fe94 	bl	8000dd8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80010b0:	4603      	mov	r3, r0
 80010b2:	b9d8      	cbnz	r0, 80010ec <HAL_I2C_Master_Transmit+0x170>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80010b4:	6822      	ldr	r2, [r4, #0]
 80010b6:	2120      	movs	r1, #32
 80010b8:	61d1      	str	r1, [r2, #28]
    I2C_RESET_CR2(hi2c);
 80010ba:	6820      	ldr	r0, [r4, #0]
 80010bc:	6842      	ldr	r2, [r0, #4]
 80010be:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 80010c2:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 80010c6:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 80010ca:	f022 0201 	bic.w	r2, r2, #1
 80010ce:	6042      	str	r2, [r0, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80010d0:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80010d4:	2200      	movs	r2, #0
 80010d6:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 80010da:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    return HAL_OK;
 80010de:	e756      	b.n	8000f8e <HAL_I2C_Master_Transmit+0x12>
      return HAL_ERROR;
 80010e0:	2301      	movs	r3, #1
 80010e2:	e754      	b.n	8000f8e <HAL_I2C_Master_Transmit+0x12>
        return HAL_ERROR;
 80010e4:	2301      	movs	r3, #1
 80010e6:	e752      	b.n	8000f8e <HAL_I2C_Master_Transmit+0x12>
          return HAL_ERROR;
 80010e8:	2301      	movs	r3, #1
 80010ea:	e750      	b.n	8000f8e <HAL_I2C_Master_Transmit+0x12>
      return HAL_ERROR;
 80010ec:	2301      	movs	r3, #1
 80010ee:	e74e      	b.n	8000f8e <HAL_I2C_Master_Transmit+0x12>
 80010f0:	80002000 	.word	0x80002000

080010f4 <HAL_I2C_Master_Receive>:
{
 80010f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80010f8:	b083      	sub	sp, #12
  if (hi2c->State == HAL_I2C_STATE_READY)
 80010fa:	f890 5041 	ldrb.w	r5, [r0, #65]	; 0x41
 80010fe:	b2ed      	uxtb	r5, r5
 8001100:	2d20      	cmp	r5, #32
 8001102:	d004      	beq.n	800110e <HAL_I2C_Master_Receive+0x1a>
    return HAL_BUSY;
 8001104:	2302      	movs	r3, #2
}
 8001106:	4618      	mov	r0, r3
 8001108:	b003      	add	sp, #12
 800110a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_LOCK(hi2c);
 800110e:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
 8001112:	2c01      	cmp	r4, #1
 8001114:	d101      	bne.n	800111a <HAL_I2C_Master_Receive+0x26>
 8001116:	2302      	movs	r3, #2
 8001118:	e7f5      	b.n	8001106 <HAL_I2C_Master_Receive+0x12>
 800111a:	4698      	mov	r8, r3
 800111c:	4617      	mov	r7, r2
 800111e:	460d      	mov	r5, r1
 8001120:	4604      	mov	r4, r0
 8001122:	f04f 0901 	mov.w	r9, #1
 8001126:	f880 9040 	strb.w	r9, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 800112a:	f7ff fa97 	bl	800065c <HAL_GetTick>
 800112e:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001130:	9000      	str	r0, [sp, #0]
 8001132:	2319      	movs	r3, #25
 8001134:	464a      	mov	r2, r9
 8001136:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800113a:	4620      	mov	r0, r4
 800113c:	f7ff fe23 	bl	8000d86 <I2C_WaitOnFlagUntilTimeout>
 8001140:	2800      	cmp	r0, #0
 8001142:	f040 8088 	bne.w	8001256 <HAL_I2C_Master_Receive+0x162>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001146:	2322      	movs	r3, #34	; 0x22
 8001148:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800114c:	2310      	movs	r3, #16
 800114e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001152:	2300      	movs	r3, #0
 8001154:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8001156:	6267      	str	r7, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8001158:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800115c:	6363      	str	r3, [r4, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800115e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001160:	b29b      	uxth	r3, r3
 8001162:	2bff      	cmp	r3, #255	; 0xff
 8001164:	d90a      	bls.n	800117c <HAL_I2C_Master_Receive+0x88>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001166:	22ff      	movs	r2, #255	; 0xff
 8001168:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800116a:	4b3f      	ldr	r3, [pc, #252]	; (8001268 <HAL_I2C_Master_Receive+0x174>)
 800116c:	9300      	str	r3, [sp, #0]
 800116e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001172:	4629      	mov	r1, r5
 8001174:	4620      	mov	r0, r4
 8001176:	f7ff fd78 	bl	8000c6a <I2C_TransferConfig>
 800117a:	e018      	b.n	80011ae <HAL_I2C_Master_Receive+0xba>
      hi2c->XferSize = hi2c->XferCount;
 800117c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800117e:	b292      	uxth	r2, r2
 8001180:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8001182:	4b39      	ldr	r3, [pc, #228]	; (8001268 <HAL_I2C_Master_Receive+0x174>)
 8001184:	9300      	str	r3, [sp, #0]
 8001186:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800118a:	b2d2      	uxtb	r2, r2
 800118c:	4629      	mov	r1, r5
 800118e:	4620      	mov	r0, r4
 8001190:	f7ff fd6b 	bl	8000c6a <I2C_TransferConfig>
 8001194:	e00b      	b.n	80011ae <HAL_I2C_Master_Receive+0xba>
          hi2c->XferSize = hi2c->XferCount;
 8001196:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001198:	b292      	uxth	r2, r2
 800119a:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800119c:	2300      	movs	r3, #0
 800119e:	9300      	str	r3, [sp, #0]
 80011a0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80011a4:	b2d2      	uxtb	r2, r2
 80011a6:	4629      	mov	r1, r5
 80011a8:	4620      	mov	r0, r4
 80011aa:	f7ff fd5e 	bl	8000c6a <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80011ae:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80011b0:	b29b      	uxth	r3, r3
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d032      	beq.n	800121c <HAL_I2C_Master_Receive+0x128>
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80011b6:	4632      	mov	r2, r6
 80011b8:	990a      	ldr	r1, [sp, #40]	; 0x28
 80011ba:	4620      	mov	r0, r4
 80011bc:	f7ff fe34 	bl	8000e28 <I2C_WaitOnRXNEFlagUntilTimeout>
 80011c0:	2800      	cmp	r0, #0
 80011c2:	d14a      	bne.n	800125a <HAL_I2C_Master_Receive+0x166>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80011c4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80011c6:	6822      	ldr	r2, [r4, #0]
 80011c8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80011ca:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 80011cc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80011ce:	3301      	adds	r3, #1
 80011d0:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 80011d2:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 80011d4:	3a01      	subs	r2, #1
 80011d6:	b292      	uxth	r2, r2
 80011d8:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 80011da:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80011dc:	b29b      	uxth	r3, r3
 80011de:	3b01      	subs	r3, #1
 80011e0:	b29b      	uxth	r3, r3
 80011e2:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80011e4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80011e6:	b29b      	uxth	r3, r3
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d0e0      	beq.n	80011ae <HAL_I2C_Master_Receive+0xba>
 80011ec:	2a00      	cmp	r2, #0
 80011ee:	d1de      	bne.n	80011ae <HAL_I2C_Master_Receive+0xba>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80011f0:	9600      	str	r6, [sp, #0]
 80011f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80011f4:	2180      	movs	r1, #128	; 0x80
 80011f6:	4620      	mov	r0, r4
 80011f8:	f7ff fdc5 	bl	8000d86 <I2C_WaitOnFlagUntilTimeout>
 80011fc:	bb78      	cbnz	r0, 800125e <HAL_I2C_Master_Receive+0x16a>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80011fe:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001200:	b29b      	uxth	r3, r3
 8001202:	2bff      	cmp	r3, #255	; 0xff
 8001204:	d9c7      	bls.n	8001196 <HAL_I2C_Master_Receive+0xa2>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001206:	22ff      	movs	r2, #255	; 0xff
 8001208:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800120a:	2300      	movs	r3, #0
 800120c:	9300      	str	r3, [sp, #0]
 800120e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001212:	4629      	mov	r1, r5
 8001214:	4620      	mov	r0, r4
 8001216:	f7ff fd28 	bl	8000c6a <I2C_TransferConfig>
 800121a:	e7c8      	b.n	80011ae <HAL_I2C_Master_Receive+0xba>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800121c:	4632      	mov	r2, r6
 800121e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8001220:	4620      	mov	r0, r4
 8001222:	f7ff fdd9 	bl	8000dd8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001226:	4603      	mov	r3, r0
 8001228:	b9d8      	cbnz	r0, 8001262 <HAL_I2C_Master_Receive+0x16e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800122a:	6822      	ldr	r2, [r4, #0]
 800122c:	2120      	movs	r1, #32
 800122e:	61d1      	str	r1, [r2, #28]
    I2C_RESET_CR2(hi2c);
 8001230:	6820      	ldr	r0, [r4, #0]
 8001232:	6842      	ldr	r2, [r0, #4]
 8001234:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8001238:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 800123c:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8001240:	f022 0201 	bic.w	r2, r2, #1
 8001244:	6042      	str	r2, [r0, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8001246:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800124a:	2200      	movs	r2, #0
 800124c:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8001250:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    return HAL_OK;
 8001254:	e757      	b.n	8001106 <HAL_I2C_Master_Receive+0x12>
      return HAL_ERROR;
 8001256:	2301      	movs	r3, #1
 8001258:	e755      	b.n	8001106 <HAL_I2C_Master_Receive+0x12>
        return HAL_ERROR;
 800125a:	2301      	movs	r3, #1
 800125c:	e753      	b.n	8001106 <HAL_I2C_Master_Receive+0x12>
          return HAL_ERROR;
 800125e:	2301      	movs	r3, #1
 8001260:	e751      	b.n	8001106 <HAL_I2C_Master_Receive+0x12>
      return HAL_ERROR;
 8001262:	2301      	movs	r3, #1
 8001264:	e74f      	b.n	8001106 <HAL_I2C_Master_Receive+0x12>
 8001266:	bf00      	nop
 8001268:	80002400 	.word	0x80002400

0800126c <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800126c:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8001270:	b2db      	uxtb	r3, r3
 8001272:	2b20      	cmp	r3, #32
 8001274:	d001      	beq.n	800127a <HAL_I2CEx_ConfigAnalogFilter+0xe>

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8001276:	2002      	movs	r0, #2
 8001278:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 800127a:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800127e:	2b01      	cmp	r3, #1
 8001280:	d020      	beq.n	80012c4 <HAL_I2CEx_ConfigAnalogFilter+0x58>
 8001282:	2301      	movs	r3, #1
 8001284:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_BUSY;
 8001288:	2324      	movs	r3, #36	; 0x24
 800128a:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
 800128e:	6802      	ldr	r2, [r0, #0]
 8001290:	6813      	ldr	r3, [r2, #0]
 8001292:	f023 0301 	bic.w	r3, r3, #1
 8001296:	6013      	str	r3, [r2, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001298:	6802      	ldr	r2, [r0, #0]
 800129a:	6813      	ldr	r3, [r2, #0]
 800129c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80012a0:	6013      	str	r3, [r2, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 80012a2:	6802      	ldr	r2, [r0, #0]
 80012a4:	6813      	ldr	r3, [r2, #0]
 80012a6:	4319      	orrs	r1, r3
 80012a8:	6011      	str	r1, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
 80012aa:	6802      	ldr	r2, [r0, #0]
 80012ac:	6813      	ldr	r3, [r2, #0]
 80012ae:	f043 0301 	orr.w	r3, r3, #1
 80012b2:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80012b4:	2320      	movs	r3, #32
 80012b6:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80012ba:	2300      	movs	r3, #0
 80012bc:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    return HAL_OK;
 80012c0:	4618      	mov	r0, r3
 80012c2:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 80012c4:	2002      	movs	r0, #2
  }
}
 80012c6:	4770      	bx	lr

080012c8 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80012c8:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80012cc:	b2db      	uxtb	r3, r3
 80012ce:	2b20      	cmp	r3, #32
 80012d0:	d001      	beq.n	80012d6 <HAL_I2CEx_ConfigDigitalFilter+0xe>

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 80012d2:	2002      	movs	r0, #2
 80012d4:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 80012d6:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80012da:	2b01      	cmp	r3, #1
 80012dc:	d01e      	beq.n	800131c <HAL_I2CEx_ConfigDigitalFilter+0x54>
 80012de:	2301      	movs	r3, #1
 80012e0:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_BUSY;
 80012e4:	2324      	movs	r3, #36	; 0x24
 80012e6:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
 80012ea:	6802      	ldr	r2, [r0, #0]
 80012ec:	6813      	ldr	r3, [r2, #0]
 80012ee:	f023 0301 	bic.w	r3, r3, #1
 80012f2:	6013      	str	r3, [r2, #0]
    tmpreg = hi2c->Instance->CR1;
 80012f4:	6802      	ldr	r2, [r0, #0]
 80012f6:	6813      	ldr	r3, [r2, #0]
    tmpreg &= ~(I2C_CR1_DNF);
 80012f8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
    tmpreg |= DigitalFilter << 8U;
 80012fc:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
    hi2c->Instance->CR1 = tmpreg;
 8001300:	6011      	str	r1, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
 8001302:	6802      	ldr	r2, [r0, #0]
 8001304:	6813      	ldr	r3, [r2, #0]
 8001306:	f043 0301 	orr.w	r3, r3, #1
 800130a:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 800130c:	2320      	movs	r3, #32
 800130e:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8001312:	2300      	movs	r3, #0
 8001314:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    return HAL_OK;
 8001318:	4618      	mov	r0, r3
 800131a:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 800131c:	2002      	movs	r0, #2
  }
}
 800131e:	4770      	bx	lr

08001320 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001320:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001322:	b08b      	sub	sp, #44	; 0x2c
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001324:	2800      	cmp	r0, #0
 8001326:	f000 808a 	beq.w	800143e <HAL_PCD_Init+0x11e>
 800132a:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800132c:	f890 33bd 	ldrb.w	r3, [r0, #957]	; 0x3bd
 8001330:	b1f3      	cbz	r3, 8001370 <HAL_PCD_Init+0x50>
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001332:	2303      	movs	r3, #3
 8001334:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001338:	6820      	ldr	r0, [r4, #0]
 800133a:	f001 f9ef 	bl	800271c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800133e:	4625      	mov	r5, r4
 8001340:	f855 7b10 	ldr.w	r7, [r5], #16
 8001344:	466e      	mov	r6, sp
 8001346:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001348:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800134a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800134c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800134e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001352:	e886 0003 	stmia.w	r6, {r0, r1}
 8001356:	1d23      	adds	r3, r4, #4
 8001358:	cb0e      	ldmia	r3, {r1, r2, r3}
 800135a:	4638      	mov	r0, r7
 800135c:	f001 f9a0 	bl	80026a0 <USB_CoreInit>
 8001360:	b158      	cbz	r0, 800137a <HAL_PCD_Init+0x5a>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001362:	2302      	movs	r3, #2
 8001364:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
    return HAL_ERROR;
 8001368:	2501      	movs	r5, #1
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);

  return HAL_OK;
}
 800136a:	4628      	mov	r0, r5
 800136c:	b00b      	add	sp, #44	; 0x2c
 800136e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hpcd->Lock = HAL_UNLOCKED;
 8001370:	f880 33bc 	strb.w	r3, [r0, #956]	; 0x3bc
    HAL_PCD_MspInit(hpcd);
 8001374:	f001 fda2 	bl	8002ebc <HAL_PCD_MspInit>
 8001378:	e7db      	b.n	8001332 <HAL_PCD_Init+0x12>
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800137a:	2100      	movs	r1, #0
 800137c:	6820      	ldr	r0, [r4, #0]
 800137e:	f001 f9d3 	bl	8002728 <USB_SetCurrentMode>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001382:	2300      	movs	r3, #0
 8001384:	e015      	b.n	80013b2 <HAL_PCD_Init+0x92>
    hpcd->IN_ep[i].is_in = 1U;
 8001386:	00d9      	lsls	r1, r3, #3
 8001388:	1ac8      	subs	r0, r1, r3
 800138a:	0082      	lsls	r2, r0, #2
 800138c:	4422      	add	r2, r4
 800138e:	2001      	movs	r0, #1
 8001390:	f882 003d 	strb.w	r0, [r2, #61]	; 0x3d
    hpcd->IN_ep[i].num = i;
 8001394:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001398:	f8a2 3042 	strh.w	r3, [r2, #66]	; 0x42
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800139c:	2000      	movs	r0, #0
 800139e:	f882 003f 	strb.w	r0, [r2, #63]	; 0x3f
    hpcd->IN_ep[i].maxpacket = 0U;
 80013a2:	6450      	str	r0, [r2, #68]	; 0x44
    hpcd->IN_ep[i].xfer_buff = 0U;
 80013a4:	6490      	str	r0, [r2, #72]	; 0x48
    hpcd->IN_ep[i].xfer_len = 0U;
 80013a6:	1aca      	subs	r2, r1, r3
 80013a8:	0091      	lsls	r1, r2, #2
 80013aa:	4421      	add	r1, r4
 80013ac:	6508      	str	r0, [r1, #80]	; 0x50
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80013ae:	3301      	adds	r3, #1
 80013b0:	b2db      	uxtb	r3, r3
 80013b2:	6865      	ldr	r5, [r4, #4]
 80013b4:	42ab      	cmp	r3, r5
 80013b6:	d3e6      	bcc.n	8001386 <HAL_PCD_Init+0x66>
 80013b8:	2300      	movs	r3, #0
 80013ba:	e015      	b.n	80013e8 <HAL_PCD_Init+0xc8>
    hpcd->OUT_ep[i].is_in = 0U;
 80013bc:	00d8      	lsls	r0, r3, #3
 80013be:	1ac1      	subs	r1, r0, r3
 80013c0:	008a      	lsls	r2, r1, #2
 80013c2:	4422      	add	r2, r4
 80013c4:	2100      	movs	r1, #0
 80013c6:	f882 11fd 	strb.w	r1, [r2, #509]	; 0x1fd
    hpcd->OUT_ep[i].num = i;
 80013ca:	f882 31fc 	strb.w	r3, [r2, #508]	; 0x1fc
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80013ce:	f882 11ff 	strb.w	r1, [r2, #511]	; 0x1ff
    hpcd->OUT_ep[i].maxpacket = 0U;
 80013d2:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80013d6:	f8c2 1208 	str.w	r1, [r2, #520]	; 0x208
    hpcd->OUT_ep[i].xfer_len = 0U;
 80013da:	1ac2      	subs	r2, r0, r3
 80013dc:	0090      	lsls	r0, r2, #2
 80013de:	4420      	add	r0, r4
 80013e0:	f8c0 1210 	str.w	r1, [r0, #528]	; 0x210
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80013e4:	3301      	adds	r3, #1
 80013e6:	b2db      	uxtb	r3, r3
 80013e8:	429d      	cmp	r5, r3
 80013ea:	d8e7      	bhi.n	80013bc <HAL_PCD_Init+0x9c>
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80013ec:	4625      	mov	r5, r4
 80013ee:	f855 7b10 	ldr.w	r7, [r5], #16
 80013f2:	466e      	mov	r6, sp
 80013f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013f6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80013f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013fa:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80013fc:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001400:	e886 0003 	stmia.w	r6, {r0, r1}
 8001404:	1d23      	adds	r3, r4, #4
 8001406:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001408:	4638      	mov	r0, r7
 800140a:	f001 f9d3 	bl	80027b4 <USB_DevInit>
 800140e:	4605      	mov	r5, r0
 8001410:	b960      	cbnz	r0, 800142c <HAL_PCD_Init+0x10c>
  hpcd->USB_Address = 0U;
 8001412:	2300      	movs	r3, #0
 8001414:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001418:	2301      	movs	r3, #1
 800141a:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
 800141e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001420:	2b01      	cmp	r3, #1
 8001422:	d008      	beq.n	8001436 <HAL_PCD_Init+0x116>
  (void)USB_DevDisconnect(hpcd->Instance);
 8001424:	6820      	ldr	r0, [r4, #0]
 8001426:	f001 fa9f 	bl	8002968 <USB_DevDisconnect>
  return HAL_OK;
 800142a:	e79e      	b.n	800136a <HAL_PCD_Init+0x4a>
    hpcd->State = HAL_PCD_STATE_ERROR;
 800142c:	2302      	movs	r3, #2
 800142e:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
    return HAL_ERROR;
 8001432:	2501      	movs	r5, #1
 8001434:	e799      	b.n	800136a <HAL_PCD_Init+0x4a>
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001436:	4620      	mov	r0, r4
 8001438:	f000 f804 	bl	8001444 <HAL_PCDEx_ActivateLPM>
 800143c:	e7f2      	b.n	8001424 <HAL_PCD_Init+0x104>
    return HAL_ERROR;
 800143e:	2501      	movs	r5, #1
 8001440:	e793      	b.n	800136a <HAL_PCD_Init+0x4a>
	...

08001444 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001444:	4602      	mov	r2, r0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001446:	6803      	ldr	r3, [r0, #0]

  hpcd->lpm_active = 1U;
 8001448:	2101      	movs	r1, #1
 800144a:	f8c0 13fc 	str.w	r1, [r0, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800144e:	2000      	movs	r0, #0
 8001450:	f882 03f4 	strb.w	r0, [r2, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8001454:	699a      	ldr	r2, [r3, #24]
 8001456:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 800145a:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800145c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800145e:	4a02      	ldr	r2, [pc, #8]	; (8001468 <HAL_PCDEx_ActivateLPM+0x24>)
 8001460:	430a      	orrs	r2, r1
 8001462:	655a      	str	r2, [r3, #84]	; 0x54

  return HAL_OK;
}
 8001464:	4770      	bx	lr
 8001466:	bf00      	nop
 8001468:	10000003 	.word	0x10000003

0800146c <HAL_PWR_EnableBkUpAccess>:
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800146c:	4a02      	ldr	r2, [pc, #8]	; (8001478 <HAL_PWR_EnableBkUpAccess+0xc>)
 800146e:	6813      	ldr	r3, [r2, #0]
 8001470:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001474:	6013      	str	r3, [r2, #0]
 8001476:	4770      	bx	lr
 8001478:	40007000 	.word	0x40007000

0800147c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800147c:	b510      	push	{r4, lr}
 800147e:	b082      	sub	sp, #8
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 8001480:	4b1b      	ldr	r3, [pc, #108]	; (80014f0 <HAL_PWREx_EnableOverDrive+0x74>)
 8001482:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001484:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001488:	641a      	str	r2, [r3, #64]	; 0x40
 800148a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800148c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001490:	9301      	str	r3, [sp, #4]
 8001492:	9b01      	ldr	r3, [sp, #4]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001494:	4a17      	ldr	r2, [pc, #92]	; (80014f4 <HAL_PWREx_EnableOverDrive+0x78>)
 8001496:	6813      	ldr	r3, [r2, #0]
 8001498:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800149c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800149e:	f7ff f8dd 	bl	800065c <HAL_GetTick>
 80014a2:	4604      	mov	r4, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80014a4:	4b13      	ldr	r3, [pc, #76]	; (80014f4 <HAL_PWREx_EnableOverDrive+0x78>)
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80014ac:	d108      	bne.n	80014c0 <HAL_PWREx_EnableOverDrive+0x44>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80014ae:	f7ff f8d5 	bl	800065c <HAL_GetTick>
 80014b2:	1b00      	subs	r0, r0, r4
 80014b4:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80014b8:	d9f4      	bls.n	80014a4 <HAL_PWREx_EnableOverDrive+0x28>
    {
      return HAL_TIMEOUT;
 80014ba:	2003      	movs	r0, #3
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
}
 80014bc:	b002      	add	sp, #8
 80014be:	bd10      	pop	{r4, pc}
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80014c0:	4a0c      	ldr	r2, [pc, #48]	; (80014f4 <HAL_PWREx_EnableOverDrive+0x78>)
 80014c2:	6813      	ldr	r3, [r2, #0]
 80014c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014c8:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 80014ca:	f7ff f8c7 	bl	800065c <HAL_GetTick>
 80014ce:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80014d0:	4b08      	ldr	r3, [pc, #32]	; (80014f4 <HAL_PWREx_EnableOverDrive+0x78>)
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80014d8:	d107      	bne.n	80014ea <HAL_PWREx_EnableOverDrive+0x6e>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80014da:	f7ff f8bf 	bl	800065c <HAL_GetTick>
 80014de:	1b00      	subs	r0, r0, r4
 80014e0:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80014e4:	d9f4      	bls.n	80014d0 <HAL_PWREx_EnableOverDrive+0x54>
      return HAL_TIMEOUT;
 80014e6:	2003      	movs	r0, #3
 80014e8:	e7e8      	b.n	80014bc <HAL_PWREx_EnableOverDrive+0x40>
  return HAL_OK;
 80014ea:	2000      	movs	r0, #0
 80014ec:	e7e6      	b.n	80014bc <HAL_PWREx_EnableOverDrive+0x40>
 80014ee:	bf00      	nop
 80014f0:	40023800 	.word	0x40023800
 80014f4:	40007000 	.word	0x40007000

080014f8 <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80014f8:	2800      	cmp	r0, #0
 80014fa:	f000 81db 	beq.w	80018b4 <HAL_RCC_OscConfig+0x3bc>
{
 80014fe:	b570      	push	{r4, r5, r6, lr}
 8001500:	b082      	sub	sp, #8
 8001502:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001504:	6803      	ldr	r3, [r0, #0]
 8001506:	f013 0f01 	tst.w	r3, #1
 800150a:	d03a      	beq.n	8001582 <HAL_RCC_OscConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800150c:	4ba2      	ldr	r3, [pc, #648]	; (8001798 <HAL_RCC_OscConfig+0x2a0>)
 800150e:	689b      	ldr	r3, [r3, #8]
 8001510:	f003 030c 	and.w	r3, r3, #12
 8001514:	2b04      	cmp	r3, #4
 8001516:	d02b      	beq.n	8001570 <HAL_RCC_OscConfig+0x78>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001518:	4b9f      	ldr	r3, [pc, #636]	; (8001798 <HAL_RCC_OscConfig+0x2a0>)
 800151a:	689b      	ldr	r3, [r3, #8]
 800151c:	f003 030c 	and.w	r3, r3, #12
 8001520:	2b08      	cmp	r3, #8
 8001522:	d020      	beq.n	8001566 <HAL_RCC_OscConfig+0x6e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001524:	6863      	ldr	r3, [r4, #4]
 8001526:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800152a:	d050      	beq.n	80015ce <HAL_RCC_OscConfig+0xd6>
 800152c:	2b00      	cmp	r3, #0
 800152e:	d154      	bne.n	80015da <HAL_RCC_OscConfig+0xe2>
 8001530:	4b99      	ldr	r3, [pc, #612]	; (8001798 <HAL_RCC_OscConfig+0x2a0>)
 8001532:	681a      	ldr	r2, [r3, #0]
 8001534:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001538:	601a      	str	r2, [r3, #0]
 800153a:	681a      	ldr	r2, [r3, #0]
 800153c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001540:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001542:	6863      	ldr	r3, [r4, #4]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d05f      	beq.n	8001608 <HAL_RCC_OscConfig+0x110>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001548:	f7ff f888 	bl	800065c <HAL_GetTick>
 800154c:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800154e:	4b92      	ldr	r3, [pc, #584]	; (8001798 <HAL_RCC_OscConfig+0x2a0>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001556:	d114      	bne.n	8001582 <HAL_RCC_OscConfig+0x8a>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001558:	f7ff f880 	bl	800065c <HAL_GetTick>
 800155c:	1b40      	subs	r0, r0, r5
 800155e:	2864      	cmp	r0, #100	; 0x64
 8001560:	d9f5      	bls.n	800154e <HAL_RCC_OscConfig+0x56>
          {
            return HAL_TIMEOUT;
 8001562:	2003      	movs	r0, #3
 8001564:	e1ab      	b.n	80018be <HAL_RCC_OscConfig+0x3c6>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001566:	4b8c      	ldr	r3, [pc, #560]	; (8001798 <HAL_RCC_OscConfig+0x2a0>)
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800156e:	d0d9      	beq.n	8001524 <HAL_RCC_OscConfig+0x2c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001570:	4b89      	ldr	r3, [pc, #548]	; (8001798 <HAL_RCC_OscConfig+0x2a0>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001578:	d003      	beq.n	8001582 <HAL_RCC_OscConfig+0x8a>
 800157a:	6863      	ldr	r3, [r4, #4]
 800157c:	2b00      	cmp	r3, #0
 800157e:	f000 819b 	beq.w	80018b8 <HAL_RCC_OscConfig+0x3c0>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001582:	6823      	ldr	r3, [r4, #0]
 8001584:	f013 0f02 	tst.w	r3, #2
 8001588:	d064      	beq.n	8001654 <HAL_RCC_OscConfig+0x15c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800158a:	4b83      	ldr	r3, [pc, #524]	; (8001798 <HAL_RCC_OscConfig+0x2a0>)
 800158c:	689b      	ldr	r3, [r3, #8]
 800158e:	f013 0f0c 	tst.w	r3, #12
 8001592:	d04d      	beq.n	8001630 <HAL_RCC_OscConfig+0x138>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001594:	4b80      	ldr	r3, [pc, #512]	; (8001798 <HAL_RCC_OscConfig+0x2a0>)
 8001596:	689b      	ldr	r3, [r3, #8]
 8001598:	f003 030c 	and.w	r3, r3, #12
 800159c:	2b08      	cmp	r3, #8
 800159e:	d042      	beq.n	8001626 <HAL_RCC_OscConfig+0x12e>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80015a0:	68e3      	ldr	r3, [r4, #12]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d079      	beq.n	800169a <HAL_RCC_OscConfig+0x1a2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015a6:	4a7c      	ldr	r2, [pc, #496]	; (8001798 <HAL_RCC_OscConfig+0x2a0>)
 80015a8:	6813      	ldr	r3, [r2, #0]
 80015aa:	f043 0301 	orr.w	r3, r3, #1
 80015ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015b0:	f7ff f854 	bl	800065c <HAL_GetTick>
 80015b4:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015b6:	4b78      	ldr	r3, [pc, #480]	; (8001798 <HAL_RCC_OscConfig+0x2a0>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f013 0f02 	tst.w	r3, #2
 80015be:	d163      	bne.n	8001688 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015c0:	f7ff f84c 	bl	800065c <HAL_GetTick>
 80015c4:	1b40      	subs	r0, r0, r5
 80015c6:	2802      	cmp	r0, #2
 80015c8:	d9f5      	bls.n	80015b6 <HAL_RCC_OscConfig+0xbe>
          {
            return HAL_TIMEOUT;
 80015ca:	2003      	movs	r0, #3
 80015cc:	e177      	b.n	80018be <HAL_RCC_OscConfig+0x3c6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015ce:	4a72      	ldr	r2, [pc, #456]	; (8001798 <HAL_RCC_OscConfig+0x2a0>)
 80015d0:	6813      	ldr	r3, [r2, #0]
 80015d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015d6:	6013      	str	r3, [r2, #0]
 80015d8:	e7b3      	b.n	8001542 <HAL_RCC_OscConfig+0x4a>
 80015da:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80015de:	d009      	beq.n	80015f4 <HAL_RCC_OscConfig+0xfc>
 80015e0:	4b6d      	ldr	r3, [pc, #436]	; (8001798 <HAL_RCC_OscConfig+0x2a0>)
 80015e2:	681a      	ldr	r2, [r3, #0]
 80015e4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80015e8:	601a      	str	r2, [r3, #0]
 80015ea:	681a      	ldr	r2, [r3, #0]
 80015ec:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80015f0:	601a      	str	r2, [r3, #0]
 80015f2:	e7a6      	b.n	8001542 <HAL_RCC_OscConfig+0x4a>
 80015f4:	4b68      	ldr	r3, [pc, #416]	; (8001798 <HAL_RCC_OscConfig+0x2a0>)
 80015f6:	681a      	ldr	r2, [r3, #0]
 80015f8:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80015fc:	601a      	str	r2, [r3, #0]
 80015fe:	681a      	ldr	r2, [r3, #0]
 8001600:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001604:	601a      	str	r2, [r3, #0]
 8001606:	e79c      	b.n	8001542 <HAL_RCC_OscConfig+0x4a>
        tickstart = HAL_GetTick();
 8001608:	f7ff f828 	bl	800065c <HAL_GetTick>
 800160c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800160e:	4b62      	ldr	r3, [pc, #392]	; (8001798 <HAL_RCC_OscConfig+0x2a0>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001616:	d0b4      	beq.n	8001582 <HAL_RCC_OscConfig+0x8a>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001618:	f7ff f820 	bl	800065c <HAL_GetTick>
 800161c:	1b40      	subs	r0, r0, r5
 800161e:	2864      	cmp	r0, #100	; 0x64
 8001620:	d9f5      	bls.n	800160e <HAL_RCC_OscConfig+0x116>
            return HAL_TIMEOUT;
 8001622:	2003      	movs	r0, #3
 8001624:	e14b      	b.n	80018be <HAL_RCC_OscConfig+0x3c6>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001626:	4b5c      	ldr	r3, [pc, #368]	; (8001798 <HAL_RCC_OscConfig+0x2a0>)
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800162e:	d1b7      	bne.n	80015a0 <HAL_RCC_OscConfig+0xa8>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001630:	4b59      	ldr	r3, [pc, #356]	; (8001798 <HAL_RCC_OscConfig+0x2a0>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f013 0f02 	tst.w	r3, #2
 8001638:	d004      	beq.n	8001644 <HAL_RCC_OscConfig+0x14c>
 800163a:	68e3      	ldr	r3, [r4, #12]
 800163c:	2b01      	cmp	r3, #1
 800163e:	d001      	beq.n	8001644 <HAL_RCC_OscConfig+0x14c>
        return HAL_ERROR;
 8001640:	2001      	movs	r0, #1
 8001642:	e13c      	b.n	80018be <HAL_RCC_OscConfig+0x3c6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001644:	4a54      	ldr	r2, [pc, #336]	; (8001798 <HAL_RCC_OscConfig+0x2a0>)
 8001646:	6813      	ldr	r3, [r2, #0]
 8001648:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800164c:	6921      	ldr	r1, [r4, #16]
 800164e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001652:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001654:	6823      	ldr	r3, [r4, #0]
 8001656:	f013 0f08 	tst.w	r3, #8
 800165a:	d046      	beq.n	80016ea <HAL_RCC_OscConfig+0x1f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800165c:	6963      	ldr	r3, [r4, #20]
 800165e:	b383      	cbz	r3, 80016c2 <HAL_RCC_OscConfig+0x1ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001660:	4a4d      	ldr	r2, [pc, #308]	; (8001798 <HAL_RCC_OscConfig+0x2a0>)
 8001662:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8001664:	f043 0301 	orr.w	r3, r3, #1
 8001668:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800166a:	f7fe fff7 	bl	800065c <HAL_GetTick>
 800166e:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001670:	4b49      	ldr	r3, [pc, #292]	; (8001798 <HAL_RCC_OscConfig+0x2a0>)
 8001672:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001674:	f013 0f02 	tst.w	r3, #2
 8001678:	d137      	bne.n	80016ea <HAL_RCC_OscConfig+0x1f2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800167a:	f7fe ffef 	bl	800065c <HAL_GetTick>
 800167e:	1b40      	subs	r0, r0, r5
 8001680:	2802      	cmp	r0, #2
 8001682:	d9f5      	bls.n	8001670 <HAL_RCC_OscConfig+0x178>
        {
          return HAL_TIMEOUT;
 8001684:	2003      	movs	r0, #3
 8001686:	e11a      	b.n	80018be <HAL_RCC_OscConfig+0x3c6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001688:	4a43      	ldr	r2, [pc, #268]	; (8001798 <HAL_RCC_OscConfig+0x2a0>)
 800168a:	6813      	ldr	r3, [r2, #0]
 800168c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001690:	6921      	ldr	r1, [r4, #16]
 8001692:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001696:	6013      	str	r3, [r2, #0]
 8001698:	e7dc      	b.n	8001654 <HAL_RCC_OscConfig+0x15c>
        __HAL_RCC_HSI_DISABLE();
 800169a:	4a3f      	ldr	r2, [pc, #252]	; (8001798 <HAL_RCC_OscConfig+0x2a0>)
 800169c:	6813      	ldr	r3, [r2, #0]
 800169e:	f023 0301 	bic.w	r3, r3, #1
 80016a2:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80016a4:	f7fe ffda 	bl	800065c <HAL_GetTick>
 80016a8:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016aa:	4b3b      	ldr	r3, [pc, #236]	; (8001798 <HAL_RCC_OscConfig+0x2a0>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f013 0f02 	tst.w	r3, #2
 80016b2:	d0cf      	beq.n	8001654 <HAL_RCC_OscConfig+0x15c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016b4:	f7fe ffd2 	bl	800065c <HAL_GetTick>
 80016b8:	1b40      	subs	r0, r0, r5
 80016ba:	2802      	cmp	r0, #2
 80016bc:	d9f5      	bls.n	80016aa <HAL_RCC_OscConfig+0x1b2>
            return HAL_TIMEOUT;
 80016be:	2003      	movs	r0, #3
 80016c0:	e0fd      	b.n	80018be <HAL_RCC_OscConfig+0x3c6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016c2:	4a35      	ldr	r2, [pc, #212]	; (8001798 <HAL_RCC_OscConfig+0x2a0>)
 80016c4:	6f53      	ldr	r3, [r2, #116]	; 0x74
 80016c6:	f023 0301 	bic.w	r3, r3, #1
 80016ca:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016cc:	f7fe ffc6 	bl	800065c <HAL_GetTick>
 80016d0:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016d2:	4b31      	ldr	r3, [pc, #196]	; (8001798 <HAL_RCC_OscConfig+0x2a0>)
 80016d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80016d6:	f013 0f02 	tst.w	r3, #2
 80016da:	d006      	beq.n	80016ea <HAL_RCC_OscConfig+0x1f2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016dc:	f7fe ffbe 	bl	800065c <HAL_GetTick>
 80016e0:	1b40      	subs	r0, r0, r5
 80016e2:	2802      	cmp	r0, #2
 80016e4:	d9f5      	bls.n	80016d2 <HAL_RCC_OscConfig+0x1da>
        {
          return HAL_TIMEOUT;
 80016e6:	2003      	movs	r0, #3
 80016e8:	e0e9      	b.n	80018be <HAL_RCC_OscConfig+0x3c6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016ea:	6823      	ldr	r3, [r4, #0]
 80016ec:	f013 0f04 	tst.w	r3, #4
 80016f0:	d07e      	beq.n	80017f0 <HAL_RCC_OscConfig+0x2f8>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016f2:	4b29      	ldr	r3, [pc, #164]	; (8001798 <HAL_RCC_OscConfig+0x2a0>)
 80016f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f6:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80016fa:	d131      	bne.n	8001760 <HAL_RCC_OscConfig+0x268>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80016fc:	4b26      	ldr	r3, [pc, #152]	; (8001798 <HAL_RCC_OscConfig+0x2a0>)
 80016fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001700:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001704:	641a      	str	r2, [r3, #64]	; 0x40
 8001706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001708:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800170c:	9301      	str	r3, [sp, #4]
 800170e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001710:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001712:	4b22      	ldr	r3, [pc, #136]	; (800179c <HAL_RCC_OscConfig+0x2a4>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f413 7f80 	tst.w	r3, #256	; 0x100
 800171a:	d023      	beq.n	8001764 <HAL_RCC_OscConfig+0x26c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800171c:	68a3      	ldr	r3, [r4, #8]
 800171e:	2b01      	cmp	r3, #1
 8001720:	d034      	beq.n	800178c <HAL_RCC_OscConfig+0x294>
 8001722:	2b00      	cmp	r3, #0
 8001724:	d13c      	bne.n	80017a0 <HAL_RCC_OscConfig+0x2a8>
 8001726:	4b1c      	ldr	r3, [pc, #112]	; (8001798 <HAL_RCC_OscConfig+0x2a0>)
 8001728:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800172a:	f022 0201 	bic.w	r2, r2, #1
 800172e:	671a      	str	r2, [r3, #112]	; 0x70
 8001730:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001732:	f022 0204 	bic.w	r2, r2, #4
 8001736:	671a      	str	r2, [r3, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001738:	68a3      	ldr	r3, [r4, #8]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d046      	beq.n	80017cc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800173e:	f7fe ff8d 	bl	800065c <HAL_GetTick>
 8001742:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001744:	4b14      	ldr	r3, [pc, #80]	; (8001798 <HAL_RCC_OscConfig+0x2a0>)
 8001746:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001748:	f013 0f02 	tst.w	r3, #2
 800174c:	d14f      	bne.n	80017ee <HAL_RCC_OscConfig+0x2f6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800174e:	f7fe ff85 	bl	800065c <HAL_GetTick>
 8001752:	1b80      	subs	r0, r0, r6
 8001754:	f241 3388 	movw	r3, #5000	; 0x1388
 8001758:	4298      	cmp	r0, r3
 800175a:	d9f3      	bls.n	8001744 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800175c:	2003      	movs	r0, #3
 800175e:	e0ae      	b.n	80018be <HAL_RCC_OscConfig+0x3c6>
  FlagStatus pwrclkchanged = RESET;
 8001760:	2500      	movs	r5, #0
 8001762:	e7d6      	b.n	8001712 <HAL_RCC_OscConfig+0x21a>
      PWR->CR1 |= PWR_CR1_DBP;
 8001764:	4a0d      	ldr	r2, [pc, #52]	; (800179c <HAL_RCC_OscConfig+0x2a4>)
 8001766:	6813      	ldr	r3, [r2, #0]
 8001768:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800176c:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 800176e:	f7fe ff75 	bl	800065c <HAL_GetTick>
 8001772:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001774:	4b09      	ldr	r3, [pc, #36]	; (800179c <HAL_RCC_OscConfig+0x2a4>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f413 7f80 	tst.w	r3, #256	; 0x100
 800177c:	d1ce      	bne.n	800171c <HAL_RCC_OscConfig+0x224>
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800177e:	f7fe ff6d 	bl	800065c <HAL_GetTick>
 8001782:	1b80      	subs	r0, r0, r6
 8001784:	2864      	cmp	r0, #100	; 0x64
 8001786:	d9f5      	bls.n	8001774 <HAL_RCC_OscConfig+0x27c>
          return HAL_TIMEOUT;
 8001788:	2003      	movs	r0, #3
 800178a:	e098      	b.n	80018be <HAL_RCC_OscConfig+0x3c6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800178c:	4a02      	ldr	r2, [pc, #8]	; (8001798 <HAL_RCC_OscConfig+0x2a0>)
 800178e:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8001790:	f043 0301 	orr.w	r3, r3, #1
 8001794:	6713      	str	r3, [r2, #112]	; 0x70
 8001796:	e7cf      	b.n	8001738 <HAL_RCC_OscConfig+0x240>
 8001798:	40023800 	.word	0x40023800
 800179c:	40007000 	.word	0x40007000
 80017a0:	2b05      	cmp	r3, #5
 80017a2:	d009      	beq.n	80017b8 <HAL_RCC_OscConfig+0x2c0>
 80017a4:	4b48      	ldr	r3, [pc, #288]	; (80018c8 <HAL_RCC_OscConfig+0x3d0>)
 80017a6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80017a8:	f022 0201 	bic.w	r2, r2, #1
 80017ac:	671a      	str	r2, [r3, #112]	; 0x70
 80017ae:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80017b0:	f022 0204 	bic.w	r2, r2, #4
 80017b4:	671a      	str	r2, [r3, #112]	; 0x70
 80017b6:	e7bf      	b.n	8001738 <HAL_RCC_OscConfig+0x240>
 80017b8:	4b43      	ldr	r3, [pc, #268]	; (80018c8 <HAL_RCC_OscConfig+0x3d0>)
 80017ba:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80017bc:	f042 0204 	orr.w	r2, r2, #4
 80017c0:	671a      	str	r2, [r3, #112]	; 0x70
 80017c2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80017c4:	f042 0201 	orr.w	r2, r2, #1
 80017c8:	671a      	str	r2, [r3, #112]	; 0x70
 80017ca:	e7b5      	b.n	8001738 <HAL_RCC_OscConfig+0x240>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017cc:	f7fe ff46 	bl	800065c <HAL_GetTick>
 80017d0:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017d2:	4b3d      	ldr	r3, [pc, #244]	; (80018c8 <HAL_RCC_OscConfig+0x3d0>)
 80017d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017d6:	f013 0f02 	tst.w	r3, #2
 80017da:	d008      	beq.n	80017ee <HAL_RCC_OscConfig+0x2f6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017dc:	f7fe ff3e 	bl	800065c <HAL_GetTick>
 80017e0:	1b80      	subs	r0, r0, r6
 80017e2:	f241 3388 	movw	r3, #5000	; 0x1388
 80017e6:	4298      	cmp	r0, r3
 80017e8:	d9f3      	bls.n	80017d2 <HAL_RCC_OscConfig+0x2da>
        {
          return HAL_TIMEOUT;
 80017ea:	2003      	movs	r0, #3
 80017ec:	e067      	b.n	80018be <HAL_RCC_OscConfig+0x3c6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80017ee:	b9f5      	cbnz	r5, 800182e <HAL_RCC_OscConfig+0x336>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017f0:	69a3      	ldr	r3, [r4, #24]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d062      	beq.n	80018bc <HAL_RCC_OscConfig+0x3c4>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80017f6:	4a34      	ldr	r2, [pc, #208]	; (80018c8 <HAL_RCC_OscConfig+0x3d0>)
 80017f8:	6892      	ldr	r2, [r2, #8]
 80017fa:	f002 020c 	and.w	r2, r2, #12
 80017fe:	2a08      	cmp	r2, #8
 8001800:	d05f      	beq.n	80018c2 <HAL_RCC_OscConfig+0x3ca>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001802:	2b02      	cmp	r3, #2
 8001804:	d019      	beq.n	800183a <HAL_RCC_OscConfig+0x342>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001806:	4a30      	ldr	r2, [pc, #192]	; (80018c8 <HAL_RCC_OscConfig+0x3d0>)
 8001808:	6813      	ldr	r3, [r2, #0]
 800180a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800180e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001810:	f7fe ff24 	bl	800065c <HAL_GetTick>
 8001814:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001816:	4b2c      	ldr	r3, [pc, #176]	; (80018c8 <HAL_RCC_OscConfig+0x3d0>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800181e:	d047      	beq.n	80018b0 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001820:	f7fe ff1c 	bl	800065c <HAL_GetTick>
 8001824:	1b00      	subs	r0, r0, r4
 8001826:	2802      	cmp	r0, #2
 8001828:	d9f5      	bls.n	8001816 <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 800182a:	2003      	movs	r0, #3
 800182c:	e047      	b.n	80018be <HAL_RCC_OscConfig+0x3c6>
      __HAL_RCC_PWR_CLK_DISABLE();
 800182e:	4a26      	ldr	r2, [pc, #152]	; (80018c8 <HAL_RCC_OscConfig+0x3d0>)
 8001830:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001832:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001836:	6413      	str	r3, [r2, #64]	; 0x40
 8001838:	e7da      	b.n	80017f0 <HAL_RCC_OscConfig+0x2f8>
        __HAL_RCC_PLL_DISABLE();
 800183a:	4a23      	ldr	r2, [pc, #140]	; (80018c8 <HAL_RCC_OscConfig+0x3d0>)
 800183c:	6813      	ldr	r3, [r2, #0]
 800183e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001842:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001844:	f7fe ff0a 	bl	800065c <HAL_GetTick>
 8001848:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800184a:	4b1f      	ldr	r3, [pc, #124]	; (80018c8 <HAL_RCC_OscConfig+0x3d0>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001852:	d006      	beq.n	8001862 <HAL_RCC_OscConfig+0x36a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001854:	f7fe ff02 	bl	800065c <HAL_GetTick>
 8001858:	1b40      	subs	r0, r0, r5
 800185a:	2802      	cmp	r0, #2
 800185c:	d9f5      	bls.n	800184a <HAL_RCC_OscConfig+0x352>
            return HAL_TIMEOUT;
 800185e:	2003      	movs	r0, #3
 8001860:	e02d      	b.n	80018be <HAL_RCC_OscConfig+0x3c6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001862:	69e3      	ldr	r3, [r4, #28]
 8001864:	6a22      	ldr	r2, [r4, #32]
 8001866:	4313      	orrs	r3, r2
 8001868:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800186a:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800186e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001870:	0852      	lsrs	r2, r2, #1
 8001872:	3a01      	subs	r2, #1
 8001874:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001878:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800187a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800187e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001882:	4a11      	ldr	r2, [pc, #68]	; (80018c8 <HAL_RCC_OscConfig+0x3d0>)
 8001884:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8001886:	6813      	ldr	r3, [r2, #0]
 8001888:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800188c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800188e:	f7fe fee5 	bl	800065c <HAL_GetTick>
 8001892:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001894:	4b0c      	ldr	r3, [pc, #48]	; (80018c8 <HAL_RCC_OscConfig+0x3d0>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800189c:	d106      	bne.n	80018ac <HAL_RCC_OscConfig+0x3b4>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800189e:	f7fe fedd 	bl	800065c <HAL_GetTick>
 80018a2:	1b00      	subs	r0, r0, r4
 80018a4:	2802      	cmp	r0, #2
 80018a6:	d9f5      	bls.n	8001894 <HAL_RCC_OscConfig+0x39c>
            return HAL_TIMEOUT;
 80018a8:	2003      	movs	r0, #3
 80018aa:	e008      	b.n	80018be <HAL_RCC_OscConfig+0x3c6>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 80018ac:	2000      	movs	r0, #0
 80018ae:	e006      	b.n	80018be <HAL_RCC_OscConfig+0x3c6>
 80018b0:	2000      	movs	r0, #0
 80018b2:	e004      	b.n	80018be <HAL_RCC_OscConfig+0x3c6>
    return HAL_ERROR;
 80018b4:	2001      	movs	r0, #1
 80018b6:	4770      	bx	lr
        return HAL_ERROR;
 80018b8:	2001      	movs	r0, #1
 80018ba:	e000      	b.n	80018be <HAL_RCC_OscConfig+0x3c6>
  return HAL_OK;
 80018bc:	2000      	movs	r0, #0
}
 80018be:	b002      	add	sp, #8
 80018c0:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 80018c2:	2001      	movs	r0, #1
 80018c4:	e7fb      	b.n	80018be <HAL_RCC_OscConfig+0x3c6>
 80018c6:	bf00      	nop
 80018c8:	40023800 	.word	0x40023800

080018cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80018ce:	4b31      	ldr	r3, [pc, #196]	; (8001994 <HAL_RCC_GetSysClockFreq+0xc8>)
 80018d0:	689b      	ldr	r3, [r3, #8]
 80018d2:	f003 030c 	and.w	r3, r3, #12
 80018d6:	2b04      	cmp	r3, #4
 80018d8:	d059      	beq.n	800198e <HAL_RCC_GetSysClockFreq+0xc2>
 80018da:	2b08      	cmp	r3, #8
 80018dc:	d001      	beq.n	80018e2 <HAL_RCC_GetSysClockFreq+0x16>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80018de:	482e      	ldr	r0, [pc, #184]	; (8001998 <HAL_RCC_GetSysClockFreq+0xcc>)
 80018e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80018e2:	4b2c      	ldr	r3, [pc, #176]	; (8001994 <HAL_RCC_GetSysClockFreq+0xc8>)
 80018e4:	685a      	ldr	r2, [r3, #4]
 80018e6:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80018f0:	d02a      	beq.n	8001948 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018f2:	4b28      	ldr	r3, [pc, #160]	; (8001994 <HAL_RCC_GetSysClockFreq+0xc8>)
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	f3c3 1388 	ubfx	r3, r3, #6, #9
 80018fa:	461e      	mov	r6, r3
 80018fc:	2700      	movs	r7, #0
 80018fe:	015c      	lsls	r4, r3, #5
 8001900:	2500      	movs	r5, #0
 8001902:	1ae4      	subs	r4, r4, r3
 8001904:	eb65 0507 	sbc.w	r5, r5, r7
 8001908:	01a9      	lsls	r1, r5, #6
 800190a:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 800190e:	01a0      	lsls	r0, r4, #6
 8001910:	1b00      	subs	r0, r0, r4
 8001912:	eb61 0105 	sbc.w	r1, r1, r5
 8001916:	00cb      	lsls	r3, r1, #3
 8001918:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800191c:	00c4      	lsls	r4, r0, #3
 800191e:	19a0      	adds	r0, r4, r6
 8001920:	eb43 0107 	adc.w	r1, r3, r7
 8001924:	024b      	lsls	r3, r1, #9
 8001926:	ea43 53d0 	orr.w	r3, r3, r0, lsr #23
 800192a:	0244      	lsls	r4, r0, #9
 800192c:	4620      	mov	r0, r4
 800192e:	4619      	mov	r1, r3
 8001930:	2300      	movs	r3, #0
 8001932:	f7fe fccd 	bl	80002d0 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 8001936:	4b17      	ldr	r3, [pc, #92]	; (8001994 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	f3c3 4301 	ubfx	r3, r3, #16, #2
 800193e:	3301      	adds	r3, #1
 8001940:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8001942:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8001946:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001948:	4b12      	ldr	r3, [pc, #72]	; (8001994 <HAL_RCC_GetSysClockFreq+0xc8>)
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8001950:	461e      	mov	r6, r3
 8001952:	2700      	movs	r7, #0
 8001954:	015c      	lsls	r4, r3, #5
 8001956:	2500      	movs	r5, #0
 8001958:	1ae4      	subs	r4, r4, r3
 800195a:	eb65 0507 	sbc.w	r5, r5, r7
 800195e:	01a9      	lsls	r1, r5, #6
 8001960:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 8001964:	01a0      	lsls	r0, r4, #6
 8001966:	1b00      	subs	r0, r0, r4
 8001968:	eb61 0105 	sbc.w	r1, r1, r5
 800196c:	00cb      	lsls	r3, r1, #3
 800196e:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001972:	00c4      	lsls	r4, r0, #3
 8001974:	19a0      	adds	r0, r4, r6
 8001976:	eb43 0107 	adc.w	r1, r3, r7
 800197a:	028b      	lsls	r3, r1, #10
 800197c:	ea43 5390 	orr.w	r3, r3, r0, lsr #22
 8001980:	0284      	lsls	r4, r0, #10
 8001982:	4620      	mov	r0, r4
 8001984:	4619      	mov	r1, r3
 8001986:	2300      	movs	r3, #0
 8001988:	f7fe fca2 	bl	80002d0 <__aeabi_uldivmod>
 800198c:	e7d3      	b.n	8001936 <HAL_RCC_GetSysClockFreq+0x6a>
      sysclockfreq = HSE_VALUE;
 800198e:	4803      	ldr	r0, [pc, #12]	; (800199c <HAL_RCC_GetSysClockFreq+0xd0>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001990:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001992:	bf00      	nop
 8001994:	40023800 	.word	0x40023800
 8001998:	00f42400 	.word	0x00f42400
 800199c:	007a1200 	.word	0x007a1200

080019a0 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 80019a0:	2800      	cmp	r0, #0
 80019a2:	f000 80a2 	beq.w	8001aea <HAL_RCC_ClockConfig+0x14a>
{
 80019a6:	b570      	push	{r4, r5, r6, lr}
 80019a8:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80019aa:	4b52      	ldr	r3, [pc, #328]	; (8001af4 <HAL_RCC_ClockConfig+0x154>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f003 030f 	and.w	r3, r3, #15
 80019b2:	428b      	cmp	r3, r1
 80019b4:	d20c      	bcs.n	80019d0 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019b6:	4a4f      	ldr	r2, [pc, #316]	; (8001af4 <HAL_RCC_ClockConfig+0x154>)
 80019b8:	6813      	ldr	r3, [r2, #0]
 80019ba:	f023 030f 	bic.w	r3, r3, #15
 80019be:	430b      	orrs	r3, r1
 80019c0:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019c2:	6813      	ldr	r3, [r2, #0]
 80019c4:	f003 030f 	and.w	r3, r3, #15
 80019c8:	4299      	cmp	r1, r3
 80019ca:	d001      	beq.n	80019d0 <HAL_RCC_ClockConfig+0x30>
      return HAL_ERROR;
 80019cc:	2001      	movs	r0, #1
 80019ce:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019d0:	6823      	ldr	r3, [r4, #0]
 80019d2:	f013 0f02 	tst.w	r3, #2
 80019d6:	d017      	beq.n	8001a08 <HAL_RCC_ClockConfig+0x68>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019d8:	f013 0f04 	tst.w	r3, #4
 80019dc:	d004      	beq.n	80019e8 <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80019de:	4a46      	ldr	r2, [pc, #280]	; (8001af8 <HAL_RCC_ClockConfig+0x158>)
 80019e0:	6893      	ldr	r3, [r2, #8]
 80019e2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80019e6:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019e8:	6823      	ldr	r3, [r4, #0]
 80019ea:	f013 0f08 	tst.w	r3, #8
 80019ee:	d004      	beq.n	80019fa <HAL_RCC_ClockConfig+0x5a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80019f0:	4a41      	ldr	r2, [pc, #260]	; (8001af8 <HAL_RCC_ClockConfig+0x158>)
 80019f2:	6893      	ldr	r3, [r2, #8]
 80019f4:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80019f8:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019fa:	4a3f      	ldr	r2, [pc, #252]	; (8001af8 <HAL_RCC_ClockConfig+0x158>)
 80019fc:	6893      	ldr	r3, [r2, #8]
 80019fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001a02:	68a0      	ldr	r0, [r4, #8]
 8001a04:	4303      	orrs	r3, r0
 8001a06:	6093      	str	r3, [r2, #8]
 8001a08:	460d      	mov	r5, r1
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a0a:	6823      	ldr	r3, [r4, #0]
 8001a0c:	f013 0f01 	tst.w	r3, #1
 8001a10:	d031      	beq.n	8001a76 <HAL_RCC_ClockConfig+0xd6>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a12:	6863      	ldr	r3, [r4, #4]
 8001a14:	2b01      	cmp	r3, #1
 8001a16:	d020      	beq.n	8001a5a <HAL_RCC_ClockConfig+0xba>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a18:	2b02      	cmp	r3, #2
 8001a1a:	d025      	beq.n	8001a68 <HAL_RCC_ClockConfig+0xc8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a1c:	4a36      	ldr	r2, [pc, #216]	; (8001af8 <HAL_RCC_ClockConfig+0x158>)
 8001a1e:	6812      	ldr	r2, [r2, #0]
 8001a20:	f012 0f02 	tst.w	r2, #2
 8001a24:	d063      	beq.n	8001aee <HAL_RCC_ClockConfig+0x14e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a26:	4934      	ldr	r1, [pc, #208]	; (8001af8 <HAL_RCC_ClockConfig+0x158>)
 8001a28:	688a      	ldr	r2, [r1, #8]
 8001a2a:	f022 0203 	bic.w	r2, r2, #3
 8001a2e:	4313      	orrs	r3, r2
 8001a30:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8001a32:	f7fe fe13 	bl	800065c <HAL_GetTick>
 8001a36:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a38:	4b2f      	ldr	r3, [pc, #188]	; (8001af8 <HAL_RCC_ClockConfig+0x158>)
 8001a3a:	689b      	ldr	r3, [r3, #8]
 8001a3c:	f003 030c 	and.w	r3, r3, #12
 8001a40:	6862      	ldr	r2, [r4, #4]
 8001a42:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001a46:	d016      	beq.n	8001a76 <HAL_RCC_ClockConfig+0xd6>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a48:	f7fe fe08 	bl	800065c <HAL_GetTick>
 8001a4c:	1b80      	subs	r0, r0, r6
 8001a4e:	f241 3388 	movw	r3, #5000	; 0x1388
 8001a52:	4298      	cmp	r0, r3
 8001a54:	d9f0      	bls.n	8001a38 <HAL_RCC_ClockConfig+0x98>
        return HAL_TIMEOUT;
 8001a56:	2003      	movs	r0, #3
 8001a58:	bd70      	pop	{r4, r5, r6, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a5a:	4a27      	ldr	r2, [pc, #156]	; (8001af8 <HAL_RCC_ClockConfig+0x158>)
 8001a5c:	6812      	ldr	r2, [r2, #0]
 8001a5e:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8001a62:	d1e0      	bne.n	8001a26 <HAL_RCC_ClockConfig+0x86>
        return HAL_ERROR;
 8001a64:	2001      	movs	r0, #1
 8001a66:	bd70      	pop	{r4, r5, r6, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a68:	4a23      	ldr	r2, [pc, #140]	; (8001af8 <HAL_RCC_ClockConfig+0x158>)
 8001a6a:	6812      	ldr	r2, [r2, #0]
 8001a6c:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8001a70:	d1d9      	bne.n	8001a26 <HAL_RCC_ClockConfig+0x86>
        return HAL_ERROR;
 8001a72:	2001      	movs	r0, #1
 8001a74:	bd70      	pop	{r4, r5, r6, pc}
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a76:	4b1f      	ldr	r3, [pc, #124]	; (8001af4 <HAL_RCC_ClockConfig+0x154>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f003 030f 	and.w	r3, r3, #15
 8001a7e:	429d      	cmp	r5, r3
 8001a80:	d20c      	bcs.n	8001a9c <HAL_RCC_ClockConfig+0xfc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a82:	4a1c      	ldr	r2, [pc, #112]	; (8001af4 <HAL_RCC_ClockConfig+0x154>)
 8001a84:	6813      	ldr	r3, [r2, #0]
 8001a86:	f023 030f 	bic.w	r3, r3, #15
 8001a8a:	432b      	orrs	r3, r5
 8001a8c:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a8e:	6813      	ldr	r3, [r2, #0]
 8001a90:	f003 030f 	and.w	r3, r3, #15
 8001a94:	429d      	cmp	r5, r3
 8001a96:	d001      	beq.n	8001a9c <HAL_RCC_ClockConfig+0xfc>
      return HAL_ERROR;
 8001a98:	2001      	movs	r0, #1
}
 8001a9a:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a9c:	6823      	ldr	r3, [r4, #0]
 8001a9e:	f013 0f04 	tst.w	r3, #4
 8001aa2:	d006      	beq.n	8001ab2 <HAL_RCC_ClockConfig+0x112>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001aa4:	4a14      	ldr	r2, [pc, #80]	; (8001af8 <HAL_RCC_ClockConfig+0x158>)
 8001aa6:	6893      	ldr	r3, [r2, #8]
 8001aa8:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8001aac:	68e1      	ldr	r1, [r4, #12]
 8001aae:	430b      	orrs	r3, r1
 8001ab0:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ab2:	6823      	ldr	r3, [r4, #0]
 8001ab4:	f013 0f08 	tst.w	r3, #8
 8001ab8:	d007      	beq.n	8001aca <HAL_RCC_ClockConfig+0x12a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001aba:	4a0f      	ldr	r2, [pc, #60]	; (8001af8 <HAL_RCC_ClockConfig+0x158>)
 8001abc:	6893      	ldr	r3, [r2, #8]
 8001abe:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001ac2:	6921      	ldr	r1, [r4, #16]
 8001ac4:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001ac8:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001aca:	f7ff feff 	bl	80018cc <HAL_RCC_GetSysClockFreq>
 8001ace:	4b0a      	ldr	r3, [pc, #40]	; (8001af8 <HAL_RCC_ClockConfig+0x158>)
 8001ad0:	689b      	ldr	r3, [r3, #8]
 8001ad2:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001ad6:	4a09      	ldr	r2, [pc, #36]	; (8001afc <HAL_RCC_ClockConfig+0x15c>)
 8001ad8:	5cd3      	ldrb	r3, [r2, r3]
 8001ada:	40d8      	lsrs	r0, r3
 8001adc:	4b08      	ldr	r3, [pc, #32]	; (8001b00 <HAL_RCC_ClockConfig+0x160>)
 8001ade:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001ae0:	2000      	movs	r0, #0
 8001ae2:	f7fe fd7d 	bl	80005e0 <HAL_InitTick>
  return HAL_OK;
 8001ae6:	2000      	movs	r0, #0
 8001ae8:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8001aea:	2001      	movs	r0, #1
 8001aec:	4770      	bx	lr
        return HAL_ERROR;
 8001aee:	2001      	movs	r0, #1
 8001af0:	bd70      	pop	{r4, r5, r6, pc}
 8001af2:	bf00      	nop
 8001af4:	40023c00 	.word	0x40023c00
 8001af8:	40023800 	.word	0x40023800
 8001afc:	08003908 	.word	0x08003908
 8001b00:	20000108 	.word	0x20000108

08001b04 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8001b04:	4b01      	ldr	r3, [pc, #4]	; (8001b0c <HAL_RCC_GetHCLKFreq+0x8>)
 8001b06:	6818      	ldr	r0, [r3, #0]
 8001b08:	4770      	bx	lr
 8001b0a:	bf00      	nop
 8001b0c:	20000108 	.word	0x20000108

08001b10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b10:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001b12:	f7ff fff7 	bl	8001b04 <HAL_RCC_GetHCLKFreq>
 8001b16:	4b04      	ldr	r3, [pc, #16]	; (8001b28 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001b18:	689b      	ldr	r3, [r3, #8]
 8001b1a:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8001b1e:	4a03      	ldr	r2, [pc, #12]	; (8001b2c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001b20:	5cd3      	ldrb	r3, [r2, r3]
}
 8001b22:	40d8      	lsrs	r0, r3
 8001b24:	bd08      	pop	{r3, pc}
 8001b26:	bf00      	nop
 8001b28:	40023800 	.word	0x40023800
 8001b2c:	08003918 	.word	0x08003918

08001b30 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b30:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001b32:	f7ff ffe7 	bl	8001b04 <HAL_RCC_GetHCLKFreq>
 8001b36:	4b04      	ldr	r3, [pc, #16]	; (8001b48 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001b38:	689b      	ldr	r3, [r3, #8]
 8001b3a:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8001b3e:	4a03      	ldr	r2, [pc, #12]	; (8001b4c <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001b40:	5cd3      	ldrb	r3, [r2, r3]
}
 8001b42:	40d8      	lsrs	r0, r3
 8001b44:	bd08      	pop	{r3, pc}
 8001b46:	bf00      	nop
 8001b48:	40023800 	.word	0x40023800
 8001b4c:	08003918 	.word	0x08003918

08001b50 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001b50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b52:	b083      	sub	sp, #12
 8001b54:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001b56:	6803      	ldr	r3, [r0, #0]
 8001b58:	f013 0f01 	tst.w	r3, #1
 8001b5c:	d00c      	beq.n	8001b78 <HAL_RCCEx_PeriphCLKConfig+0x28>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001b5e:	4ba4      	ldr	r3, [pc, #656]	; (8001df0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8001b60:	689a      	ldr	r2, [r3, #8]
 8001b62:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8001b66:	609a      	str	r2, [r3, #8]
 8001b68:	689a      	ldr	r2, [r3, #8]
 8001b6a:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8001b6c:	430a      	orrs	r2, r1
 8001b6e:	609a      	str	r2, [r3, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8001b70:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001b72:	b1c3      	cbz	r3, 8001ba6 <HAL_RCCEx_PeriphCLKConfig+0x56>
  uint32_t plli2sused = 0;
 8001b74:	2700      	movs	r7, #0
 8001b76:	e000      	b.n	8001b7a <HAL_RCCEx_PeriphCLKConfig+0x2a>
 8001b78:	2700      	movs	r7, #0
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001b7a:	6823      	ldr	r3, [r4, #0]
 8001b7c:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8001b80:	d015      	beq.n	8001bae <HAL_RCCEx_PeriphCLKConfig+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001b82:	4a9b      	ldr	r2, [pc, #620]	; (8001df0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8001b84:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8001b88:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8001b8c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001b8e:	430b      	orrs	r3, r1
 8001b90:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001b94:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001b96:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001b9a:	d006      	beq.n	8001baa <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	f000 8105 	beq.w	8001dac <HAL_RCCEx_PeriphCLKConfig+0x25c>
  uint32_t pllsaiused = 0;
 8001ba2:	2500      	movs	r5, #0
 8001ba4:	e004      	b.n	8001bb0 <HAL_RCCEx_PeriphCLKConfig+0x60>
      plli2sused = 1;
 8001ba6:	2701      	movs	r7, #1
 8001ba8:	e7e7      	b.n	8001b7a <HAL_RCCEx_PeriphCLKConfig+0x2a>
      plli2sused = 1;
 8001baa:	2701      	movs	r7, #1
 8001bac:	e7f6      	b.n	8001b9c <HAL_RCCEx_PeriphCLKConfig+0x4c>
  uint32_t pllsaiused = 0;
 8001bae:	2500      	movs	r5, #0
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001bb0:	6823      	ldr	r3, [r4, #0]
 8001bb2:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8001bb6:	d00f      	beq.n	8001bd8 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001bb8:	4a8d      	ldr	r2, [pc, #564]	; (8001df0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8001bba:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8001bbe:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001bc2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8001bc4:	430b      	orrs	r3, r1
 8001bc6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001bca:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001bcc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001bd0:	f000 80ee 	beq.w	8001db0 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001bd4:	b903      	cbnz	r3, 8001bd8 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      pllsaiused = 1;
 8001bd6:	2501      	movs	r5, #1
    }
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001bd8:	6823      	ldr	r3, [r4, #0]
 8001bda:	f013 0f20 	tst.w	r3, #32
 8001bde:	f040 80e9 	bne.w	8001db4 <HAL_RCCEx_PeriphCLKConfig+0x264>
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001be2:	6823      	ldr	r3, [r4, #0]
 8001be4:	f013 0f10 	tst.w	r3, #16
 8001be8:	d00c      	beq.n	8001c04 <HAL_RCCEx_PeriphCLKConfig+0xb4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001bea:	4b81      	ldr	r3, [pc, #516]	; (8001df0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8001bec:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8001bf0:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8001bf4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8001bf8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8001bfc:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8001bfe:	430a      	orrs	r2, r1
 8001c00:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001c04:	6823      	ldr	r3, [r4, #0]
 8001c06:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8001c0a:	d008      	beq.n	8001c1e <HAL_RCCEx_PeriphCLKConfig+0xce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001c0c:	4a78      	ldr	r2, [pc, #480]	; (8001df0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8001c0e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001c12:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001c16:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8001c18:	430b      	orrs	r3, r1
 8001c1a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001c1e:	6823      	ldr	r3, [r4, #0]
 8001c20:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8001c24:	d008      	beq.n	8001c38 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001c26:	4a72      	ldr	r2, [pc, #456]	; (8001df0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8001c28:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001c2c:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8001c30:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8001c32:	430b      	orrs	r3, r1
 8001c34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001c38:	6823      	ldr	r3, [r4, #0]
 8001c3a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8001c3e:	d008      	beq.n	8001c52 <HAL_RCCEx_PeriphCLKConfig+0x102>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001c40:	4a6b      	ldr	r2, [pc, #428]	; (8001df0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8001c42:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001c46:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8001c4a:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8001c4c:	430b      	orrs	r3, r1
 8001c4e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001c52:	6823      	ldr	r3, [r4, #0]
 8001c54:	f013 0f40 	tst.w	r3, #64	; 0x40
 8001c58:	d008      	beq.n	8001c6c <HAL_RCCEx_PeriphCLKConfig+0x11c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001c5a:	4a65      	ldr	r2, [pc, #404]	; (8001df0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8001c5c:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001c60:	f023 0303 	bic.w	r3, r3, #3
 8001c64:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8001c66:	430b      	orrs	r3, r1
 8001c68:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001c6c:	6823      	ldr	r3, [r4, #0]
 8001c6e:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001c72:	d008      	beq.n	8001c86 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001c74:	4a5e      	ldr	r2, [pc, #376]	; (8001df0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8001c76:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001c7a:	f023 030c 	bic.w	r3, r3, #12
 8001c7e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8001c80:	430b      	orrs	r3, r1
 8001c82:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001c86:	6823      	ldr	r3, [r4, #0]
 8001c88:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001c8c:	d008      	beq.n	8001ca0 <HAL_RCCEx_PeriphCLKConfig+0x150>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001c8e:	4a58      	ldr	r2, [pc, #352]	; (8001df0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8001c90:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001c94:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001c98:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8001c9a:	430b      	orrs	r3, r1
 8001c9c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001ca0:	6823      	ldr	r3, [r4, #0]
 8001ca2:	f413 7f00 	tst.w	r3, #512	; 0x200
 8001ca6:	d008      	beq.n	8001cba <HAL_RCCEx_PeriphCLKConfig+0x16a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001ca8:	4a51      	ldr	r2, [pc, #324]	; (8001df0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8001caa:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001cae:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8001cb2:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8001cb4:	430b      	orrs	r3, r1
 8001cb6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001cba:	6823      	ldr	r3, [r4, #0]
 8001cbc:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8001cc0:	d008      	beq.n	8001cd4 <HAL_RCCEx_PeriphCLKConfig+0x184>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001cc2:	4a4b      	ldr	r2, [pc, #300]	; (8001df0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8001cc4:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001cc8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ccc:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8001cce:	430b      	orrs	r3, r1
 8001cd0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8001cd4:	6823      	ldr	r3, [r4, #0]
 8001cd6:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8001cda:	d008      	beq.n	8001cee <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8001cdc:	4a44      	ldr	r2, [pc, #272]	; (8001df0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8001cde:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001ce2:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8001ce6:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8001ce8:	430b      	orrs	r3, r1
 8001cea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8001cee:	6823      	ldr	r3, [r4, #0]
 8001cf0:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8001cf4:	d008      	beq.n	8001d08 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8001cf6:	4a3e      	ldr	r2, [pc, #248]	; (8001df0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8001cf8:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001cfc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001d00:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8001d02:	430b      	orrs	r3, r1
 8001d04:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8001d08:	6823      	ldr	r3, [r4, #0]
 8001d0a:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8001d0e:	d008      	beq.n	8001d22 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8001d10:	4a37      	ldr	r2, [pc, #220]	; (8001df0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8001d12:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001d16:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001d1a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8001d1c:	430b      	orrs	r3, r1
 8001d1e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8001d22:	6823      	ldr	r3, [r4, #0]
 8001d24:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 8001d28:	d00d      	beq.n	8001d46 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001d2a:	4a31      	ldr	r2, [pc, #196]	; (8001df0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8001d2c:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001d30:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8001d34:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8001d36:	430b      	orrs	r3, r1
 8001d38:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8001d3c:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8001d3e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001d42:	f000 80a1 	beq.w	8001e88 <HAL_RCCEx_PeriphCLKConfig+0x338>
      pllsaiused = 1;
    }
  }

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8001d46:	6823      	ldr	r3, [r4, #0]
 8001d48:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8001d4c:	d008      	beq.n	8001d60 <HAL_RCCEx_PeriphCLKConfig+0x210>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001d4e:	4a28      	ldr	r2, [pc, #160]	; (8001df0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8001d50:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001d54:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8001d58:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8001d5a:	430b      	orrs	r3, r1
 8001d5c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8001d60:	6823      	ldr	r3, [r4, #0]
 8001d62:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 8001d66:	d008      	beq.n	8001d7a <HAL_RCCEx_PeriphCLKConfig+0x22a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8001d68:	4a21      	ldr	r2, [pc, #132]	; (8001df0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8001d6a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001d6e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d72:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 8001d74:	430b      	orrs	r3, r1
 8001d76:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8001d7a:	6823      	ldr	r3, [r4, #0]
 8001d7c:	f013 6f80 	tst.w	r3, #67108864	; 0x4000000
 8001d80:	d008      	beq.n	8001d94 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8001d82:	4a1b      	ldr	r2, [pc, #108]	; (8001df0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8001d84:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001d88:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8001d8c:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8001d8e:	430b      	orrs	r3, r1
 8001d90:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2 or I2S */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8001d94:	2f00      	cmp	r7, #0
 8001d96:	d179      	bne.n	8001e8c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8001d98:	6823      	ldr	r3, [r4, #0]
 8001d9a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001d9e:	d075      	beq.n	8001e8c <HAL_RCCEx_PeriphCLKConfig+0x33c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8001da0:	2d00      	cmp	r5, #0
 8001da2:	f040 80e4 	bne.w	8001f6e <HAL_RCCEx_PeriphCLKConfig+0x41e>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8001da6:	2000      	movs	r0, #0
}
 8001da8:	b003      	add	sp, #12
 8001daa:	bdf0      	pop	{r4, r5, r6, r7, pc}
      pllsaiused = 1;
 8001dac:	2501      	movs	r5, #1
 8001dae:	e6ff      	b.n	8001bb0 <HAL_RCCEx_PeriphCLKConfig+0x60>
      plli2sused = 1;
 8001db0:	2701      	movs	r7, #1
 8001db2:	e70f      	b.n	8001bd4 <HAL_RCCEx_PeriphCLKConfig+0x84>
    __HAL_RCC_PWR_CLK_ENABLE();
 8001db4:	4b0e      	ldr	r3, [pc, #56]	; (8001df0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8001db6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001db8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001dbc:	641a      	str	r2, [r3, #64]	; 0x40
 8001dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dc4:	9301      	str	r3, [sp, #4]
 8001dc6:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 8001dc8:	4a0a      	ldr	r2, [pc, #40]	; (8001df4 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8001dca:	6813      	ldr	r3, [r2, #0]
 8001dcc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dd0:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8001dd2:	f7fe fc43 	bl	800065c <HAL_GetTick>
 8001dd6:	4606      	mov	r6, r0
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001dd8:	4b06      	ldr	r3, [pc, #24]	; (8001df4 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001de0:	d10a      	bne.n	8001df8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001de2:	f7fe fc3b 	bl	800065c <HAL_GetTick>
 8001de6:	1b80      	subs	r0, r0, r6
 8001de8:	2864      	cmp	r0, #100	; 0x64
 8001dea:	d9f5      	bls.n	8001dd8 <HAL_RCCEx_PeriphCLKConfig+0x288>
        return HAL_TIMEOUT;
 8001dec:	2003      	movs	r0, #3
 8001dee:	e7db      	b.n	8001da8 <HAL_RCCEx_PeriphCLKConfig+0x258>
 8001df0:	40023800 	.word	0x40023800
 8001df4:	40007000 	.word	0x40007000
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001df8:	4b8e      	ldr	r3, [pc, #568]	; (8002034 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001dfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001dfc:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8001e00:	d015      	beq.n	8001e2e <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8001e02:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001e04:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	d010      	beq.n	8001e2e <HAL_RCCEx_PeriphCLKConfig+0x2de>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001e0c:	4b89      	ldr	r3, [pc, #548]	; (8002034 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001e0e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001e10:	f422 7240 	bic.w	r2, r2, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8001e14:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8001e16:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8001e1a:	6719      	str	r1, [r3, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001e1c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8001e1e:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8001e22:	6719      	str	r1, [r3, #112]	; 0x70
      RCC->BDCR = tmpreg0;
 8001e24:	671a      	str	r2, [r3, #112]	; 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001e26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e28:	f013 0f01 	tst.w	r3, #1
 8001e2c:	d112      	bne.n	8001e54 <HAL_RCCEx_PeriphCLKConfig+0x304>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001e2e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001e30:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8001e34:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8001e38:	d01d      	beq.n	8001e76 <HAL_RCCEx_PeriphCLKConfig+0x326>
 8001e3a:	4a7e      	ldr	r2, [pc, #504]	; (8002034 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001e3c:	6893      	ldr	r3, [r2, #8]
 8001e3e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001e42:	6093      	str	r3, [r2, #8]
 8001e44:	497b      	ldr	r1, [pc, #492]	; (8002034 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001e46:	6f0b      	ldr	r3, [r1, #112]	; 0x70
 8001e48:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001e4a:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8001e4e:	4313      	orrs	r3, r2
 8001e50:	670b      	str	r3, [r1, #112]	; 0x70
 8001e52:	e6c6      	b.n	8001be2 <HAL_RCCEx_PeriphCLKConfig+0x92>
        tickstart = HAL_GetTick();
 8001e54:	f7fe fc02 	bl	800065c <HAL_GetTick>
 8001e58:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e5a:	4b76      	ldr	r3, [pc, #472]	; (8002034 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001e5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e5e:	f013 0f02 	tst.w	r3, #2
 8001e62:	d1e4      	bne.n	8001e2e <HAL_RCCEx_PeriphCLKConfig+0x2de>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e64:	f7fe fbfa 	bl	800065c <HAL_GetTick>
 8001e68:	1b80      	subs	r0, r0, r6
 8001e6a:	f241 3388 	movw	r3, #5000	; 0x1388
 8001e6e:	4298      	cmp	r0, r3
 8001e70:	d9f3      	bls.n	8001e5a <HAL_RCCEx_PeriphCLKConfig+0x30a>
            return HAL_TIMEOUT;
 8001e72:	2003      	movs	r0, #3
 8001e74:	e798      	b.n	8001da8 <HAL_RCCEx_PeriphCLKConfig+0x258>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001e76:	486f      	ldr	r0, [pc, #444]	; (8002034 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001e78:	6882      	ldr	r2, [r0, #8]
 8001e7a:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 8001e7e:	496e      	ldr	r1, [pc, #440]	; (8002038 <HAL_RCCEx_PeriphCLKConfig+0x4e8>)
 8001e80:	4019      	ands	r1, r3
 8001e82:	430a      	orrs	r2, r1
 8001e84:	6082      	str	r2, [r0, #8]
 8001e86:	e7dd      	b.n	8001e44 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
      pllsaiused = 1;
 8001e88:	2501      	movs	r5, #1
 8001e8a:	e75c      	b.n	8001d46 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    __HAL_RCC_PLLI2S_DISABLE();
 8001e8c:	4a69      	ldr	r2, [pc, #420]	; (8002034 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001e8e:	6813      	ldr	r3, [r2, #0]
 8001e90:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001e94:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8001e96:	f7fe fbe1 	bl	800065c <HAL_GetTick>
 8001e9a:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001e9c:	4b65      	ldr	r3, [pc, #404]	; (8002034 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8001ea4:	d006      	beq.n	8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x364>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001ea6:	f7fe fbd9 	bl	800065c <HAL_GetTick>
 8001eaa:	1b80      	subs	r0, r0, r6
 8001eac:	2864      	cmp	r0, #100	; 0x64
 8001eae:	d9f5      	bls.n	8001e9c <HAL_RCCEx_PeriphCLKConfig+0x34c>
        return HAL_TIMEOUT;
 8001eb0:	2003      	movs	r0, #3
 8001eb2:	e779      	b.n	8001da8 <HAL_RCCEx_PeriphCLKConfig+0x258>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8001eb4:	6823      	ldr	r3, [r4, #0]
 8001eb6:	f013 0f01 	tst.w	r3, #1
 8001eba:	d00e      	beq.n	8001eda <HAL_RCCEx_PeriphCLKConfig+0x38a>
 8001ebc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001ebe:	b963      	cbnz	r3, 8001eda <HAL_RCCEx_PeriphCLKConfig+0x38a>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001ec0:	4a5c      	ldr	r2, [pc, #368]	; (8002034 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001ec2:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, PeriphClkInit->PLLI2S.PLLI2SR);
 8001ec6:	6861      	ldr	r1, [r4, #4]
 8001ec8:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8001ecc:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8001ed0:	68a1      	ldr	r1, [r4, #8]
 8001ed2:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8001ed6:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001eda:	6823      	ldr	r3, [r4, #0]
 8001edc:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8001ee0:	d003      	beq.n	8001eea <HAL_RCCEx_PeriphCLKConfig+0x39a>
 8001ee2:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8001ee4:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8001ee8:	d02a      	beq.n	8001f40 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
 8001eea:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8001eee:	d003      	beq.n	8001ef8 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001ef0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001ef2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001ef6:	d023      	beq.n	8001f40 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8001ef8:	6823      	ldr	r3, [r4, #0]
 8001efa:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001efe:	d00a      	beq.n	8001f16 <HAL_RCCEx_PeriphCLKConfig+0x3c6>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8001f00:	6862      	ldr	r2, [r4, #4]
 8001f02:	68e3      	ldr	r3, [r4, #12]
 8001f04:	061b      	lsls	r3, r3, #24
 8001f06:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001f0a:	68a2      	ldr	r2, [r4, #8]
 8001f0c:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8001f10:	4a48      	ldr	r2, [pc, #288]	; (8002034 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001f12:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8001f16:	4a47      	ldr	r2, [pc, #284]	; (8002034 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001f18:	6813      	ldr	r3, [r2, #0]
 8001f1a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001f1e:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8001f20:	f7fe fb9c 	bl	800065c <HAL_GetTick>
 8001f24:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001f26:	4b43      	ldr	r3, [pc, #268]	; (8002034 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8001f2e:	f47f af37 	bne.w	8001da0 <HAL_RCCEx_PeriphCLKConfig+0x250>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001f32:	f7fe fb93 	bl	800065c <HAL_GetTick>
 8001f36:	1b80      	subs	r0, r0, r6
 8001f38:	2864      	cmp	r0, #100	; 0x64
 8001f3a:	d9f4      	bls.n	8001f26 <HAL_RCCEx_PeriphCLKConfig+0x3d6>
        return HAL_TIMEOUT;
 8001f3c:	2003      	movs	r0, #3
 8001f3e:	e733      	b.n	8001da8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001f40:	4a3c      	ldr	r2, [pc, #240]	; (8002034 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001f42:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg0);
 8001f46:	6860      	ldr	r0, [r4, #4]
 8001f48:	68e3      	ldr	r3, [r4, #12]
 8001f4a:	061b      	lsls	r3, r3, #24
 8001f4c:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8001f50:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8001f54:	430b      	orrs	r3, r1
 8001f56:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8001f5a:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8001f5e:	f023 031f 	bic.w	r3, r3, #31
 8001f62:	69e1      	ldr	r1, [r4, #28]
 8001f64:	3901      	subs	r1, #1
 8001f66:	430b      	orrs	r3, r1
 8001f68:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001f6c:	e7c4      	b.n	8001ef8 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
    __HAL_RCC_PLLSAI_DISABLE();
 8001f6e:	4a31      	ldr	r2, [pc, #196]	; (8002034 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001f70:	6813      	ldr	r3, [r2, #0]
 8001f72:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f76:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8001f78:	f7fe fb70 	bl	800065c <HAL_GetTick>
 8001f7c:	4605      	mov	r5, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001f7e:	4b2d      	ldr	r3, [pc, #180]	; (8002034 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8001f86:	d006      	beq.n	8001f96 <HAL_RCCEx_PeriphCLKConfig+0x446>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8001f88:	f7fe fb68 	bl	800065c <HAL_GetTick>
 8001f8c:	1b40      	subs	r0, r0, r5
 8001f8e:	2864      	cmp	r0, #100	; 0x64
 8001f90:	d9f5      	bls.n	8001f7e <HAL_RCCEx_PeriphCLKConfig+0x42e>
        return HAL_TIMEOUT;
 8001f92:	2003      	movs	r0, #3
 8001f94:	e708      	b.n	8001da8 <HAL_RCCEx_PeriphCLKConfig+0x258>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8001f96:	6823      	ldr	r3, [r4, #0]
 8001f98:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8001f9c:	d001      	beq.n	8001fa2 <HAL_RCCEx_PeriphCLKConfig+0x452>
 8001f9e:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8001fa0:	b122      	cbz	r2, 8001fac <HAL_RCCEx_PeriphCLKConfig+0x45c>
 8001fa2:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8001fa6:	d018      	beq.n	8001fda <HAL_RCCEx_PeriphCLKConfig+0x48a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8001fa8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001faa:	b9b3      	cbnz	r3, 8001fda <HAL_RCCEx_PeriphCLKConfig+0x48a>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8001fac:	4a21      	ldr	r2, [pc, #132]	; (8002034 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001fae:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ);
 8001fb2:	6921      	ldr	r1, [r4, #16]
 8001fb4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001fb8:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8001fbc:	6961      	ldr	r1, [r4, #20]
 8001fbe:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8001fc2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8001fc6:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8001fca:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8001fce:	6a21      	ldr	r1, [r4, #32]
 8001fd0:	3901      	subs	r1, #1
 8001fd2:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001fd6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8001fda:	6823      	ldr	r3, [r4, #0]
 8001fdc:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 8001fe0:	d003      	beq.n	8001fea <HAL_RCCEx_PeriphCLKConfig+0x49a>
 8001fe2:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8001fe4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001fe8:	d013      	beq.n	8002012 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
    __HAL_RCC_PLLSAI_ENABLE();
 8001fea:	4a12      	ldr	r2, [pc, #72]	; (8002034 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001fec:	6813      	ldr	r3, [r2, #0]
 8001fee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ff2:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8001ff4:	f7fe fb32 	bl	800065c <HAL_GetTick>
 8001ff8:	4604      	mov	r4, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001ffa:	4b0e      	ldr	r3, [pc, #56]	; (8002034 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8002002:	d114      	bne.n	800202e <HAL_RCCEx_PeriphCLKConfig+0x4de>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002004:	f7fe fb2a 	bl	800065c <HAL_GetTick>
 8002008:	1b00      	subs	r0, r0, r4
 800200a:	2864      	cmp	r0, #100	; 0x64
 800200c:	d9f5      	bls.n	8001ffa <HAL_RCCEx_PeriphCLKConfig+0x4aa>
        return HAL_TIMEOUT;
 800200e:	2003      	movs	r0, #3
 8002010:	e6ca      	b.n	8001da8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002012:	4908      	ldr	r1, [pc, #32]	; (8002034 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002014:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0);
 8002018:	6920      	ldr	r0, [r4, #16]
 800201a:	69a3      	ldr	r3, [r4, #24]
 800201c:	041b      	lsls	r3, r3, #16
 800201e:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8002022:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
 8002026:	4313      	orrs	r3, r2
 8002028:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800202c:	e7dd      	b.n	8001fea <HAL_RCCEx_PeriphCLKConfig+0x49a>
  return HAL_OK;
 800202e:	2000      	movs	r0, #0
 8002030:	e6ba      	b.n	8001da8 <HAL_RCCEx_PeriphCLKConfig+0x258>
 8002032:	bf00      	nop
 8002034:	40023800 	.word	0x40023800
 8002038:	0ffffcff 	.word	0x0ffffcff

0800203c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800203c:	b510      	push	{r4, lr}
 800203e:	4604      	mov	r4, r0
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002040:	6883      	ldr	r3, [r0, #8]
 8002042:	6902      	ldr	r2, [r0, #16]
 8002044:	4313      	orrs	r3, r2
 8002046:	6942      	ldr	r2, [r0, #20]
 8002048:	4313      	orrs	r3, r2
 800204a:	69c2      	ldr	r2, [r0, #28]
 800204c:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800204e:	6801      	ldr	r1, [r0, #0]
 8002050:	6808      	ldr	r0, [r1, #0]
 8002052:	4a9c      	ldr	r2, [pc, #624]	; (80022c4 <UART_SetConfig+0x288>)
 8002054:	4002      	ands	r2, r0
 8002056:	4313      	orrs	r3, r2
 8002058:	600b      	str	r3, [r1, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800205a:	6822      	ldr	r2, [r4, #0]
 800205c:	6853      	ldr	r3, [r2, #4]
 800205e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002062:	68e1      	ldr	r1, [r4, #12]
 8002064:	430b      	orrs	r3, r1
 8002066:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002068:	69a3      	ldr	r3, [r4, #24]

  tmpreg |= huart->Init.OneBitSampling;
 800206a:	6a22      	ldr	r2, [r4, #32]
 800206c:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800206e:	6821      	ldr	r1, [r4, #0]
 8002070:	688a      	ldr	r2, [r1, #8]
 8002072:	f422 6230 	bic.w	r2, r2, #2816	; 0xb00
 8002076:	4313      	orrs	r3, r2
 8002078:	608b      	str	r3, [r1, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800207a:	6823      	ldr	r3, [r4, #0]
 800207c:	4a92      	ldr	r2, [pc, #584]	; (80022c8 <UART_SetConfig+0x28c>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d02b      	beq.n	80020da <UART_SetConfig+0x9e>
 8002082:	4a92      	ldr	r2, [pc, #584]	; (80022cc <UART_SetConfig+0x290>)
 8002084:	4293      	cmp	r3, r2
 8002086:	d03b      	beq.n	8002100 <UART_SetConfig+0xc4>
 8002088:	4a91      	ldr	r2, [pc, #580]	; (80022d0 <UART_SetConfig+0x294>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d050      	beq.n	8002130 <UART_SetConfig+0xf4>
 800208e:	4a91      	ldr	r2, [pc, #580]	; (80022d4 <UART_SetConfig+0x298>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d063      	beq.n	800215c <UART_SetConfig+0x120>
 8002094:	4a90      	ldr	r2, [pc, #576]	; (80022d8 <UART_SetConfig+0x29c>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d075      	beq.n	8002186 <UART_SetConfig+0x14a>
 800209a:	4a90      	ldr	r2, [pc, #576]	; (80022dc <UART_SetConfig+0x2a0>)
 800209c:	4293      	cmp	r3, r2
 800209e:	f000 808a 	beq.w	80021b6 <UART_SetConfig+0x17a>
 80020a2:	4a8f      	ldr	r2, [pc, #572]	; (80022e0 <UART_SetConfig+0x2a4>)
 80020a4:	4293      	cmp	r3, r2
 80020a6:	f000 809e 	beq.w	80021e6 <UART_SetConfig+0x1aa>
 80020aa:	4a8e      	ldr	r2, [pc, #568]	; (80022e4 <UART_SetConfig+0x2a8>)
 80020ac:	4293      	cmp	r3, r2
 80020ae:	f000 80b2 	beq.w	8002216 <UART_SetConfig+0x1da>
 80020b2:	2310      	movs	r3, #16

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80020b4:	69e2      	ldr	r2, [r4, #28]
 80020b6:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80020ba:	f000 80d4 	beq.w	8002266 <UART_SetConfig+0x22a>
      ret = HAL_ERROR;
    }
  }
  else
  {
    switch (clocksource)
 80020be:	2b08      	cmp	r3, #8
 80020c0:	f200 816f 	bhi.w	80023a2 <UART_SetConfig+0x366>
 80020c4:	e8df f013 	tbh	[pc, r3, lsl #1]
 80020c8:	01470132 	.word	0x01470132
 80020cc:	016d0151 	.word	0x016d0151
 80020d0:	016d015a 	.word	0x016d015a
 80020d4:	016d016d 	.word	0x016d016d
 80020d8:	0164      	.short	0x0164
  UART_GETCLOCKSOURCE(huart, clocksource);
 80020da:	4b83      	ldr	r3, [pc, #524]	; (80022e8 <UART_SetConfig+0x2ac>)
 80020dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020e0:	f003 0303 	and.w	r3, r3, #3
 80020e4:	2b03      	cmp	r3, #3
 80020e6:	d809      	bhi.n	80020fc <UART_SetConfig+0xc0>
 80020e8:	e8df f003 	tbb	[pc, r3]
 80020ec:	06ad0402 	.word	0x06ad0402
 80020f0:	2301      	movs	r3, #1
 80020f2:	e7df      	b.n	80020b4 <UART_SetConfig+0x78>
 80020f4:	2304      	movs	r3, #4
 80020f6:	e7dd      	b.n	80020b4 <UART_SetConfig+0x78>
 80020f8:	2308      	movs	r3, #8
 80020fa:	e7db      	b.n	80020b4 <UART_SetConfig+0x78>
 80020fc:	2310      	movs	r3, #16
 80020fe:	e7d9      	b.n	80020b4 <UART_SetConfig+0x78>
 8002100:	4b79      	ldr	r3, [pc, #484]	; (80022e8 <UART_SetConfig+0x2ac>)
 8002102:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002106:	f003 030c 	and.w	r3, r3, #12
 800210a:	2b0c      	cmp	r3, #12
 800210c:	d80e      	bhi.n	800212c <UART_SetConfig+0xf0>
 800210e:	e8df f003 	tbb	[pc, r3]
 8002112:	0d07      	.short	0x0d07
 8002114:	0d090d0d 	.word	0x0d090d0d
 8002118:	0d9c0d0d 	.word	0x0d9c0d0d
 800211c:	0d0d      	.short	0x0d0d
 800211e:	0b          	.byte	0x0b
 800211f:	00          	.byte	0x00
 8002120:	2300      	movs	r3, #0
 8002122:	e7c7      	b.n	80020b4 <UART_SetConfig+0x78>
 8002124:	2304      	movs	r3, #4
 8002126:	e7c5      	b.n	80020b4 <UART_SetConfig+0x78>
 8002128:	2308      	movs	r3, #8
 800212a:	e7c3      	b.n	80020b4 <UART_SetConfig+0x78>
 800212c:	2310      	movs	r3, #16
 800212e:	e7c1      	b.n	80020b4 <UART_SetConfig+0x78>
 8002130:	4b6d      	ldr	r3, [pc, #436]	; (80022e8 <UART_SetConfig+0x2ac>)
 8002132:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002136:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800213a:	2b10      	cmp	r3, #16
 800213c:	d00a      	beq.n	8002154 <UART_SetConfig+0x118>
 800213e:	d906      	bls.n	800214e <UART_SetConfig+0x112>
 8002140:	2b20      	cmp	r3, #32
 8002142:	f000 8084 	beq.w	800224e <UART_SetConfig+0x212>
 8002146:	2b30      	cmp	r3, #48	; 0x30
 8002148:	d106      	bne.n	8002158 <UART_SetConfig+0x11c>
 800214a:	2308      	movs	r3, #8
 800214c:	e7b2      	b.n	80020b4 <UART_SetConfig+0x78>
 800214e:	b91b      	cbnz	r3, 8002158 <UART_SetConfig+0x11c>
 8002150:	2300      	movs	r3, #0
 8002152:	e7af      	b.n	80020b4 <UART_SetConfig+0x78>
 8002154:	2304      	movs	r3, #4
 8002156:	e7ad      	b.n	80020b4 <UART_SetConfig+0x78>
 8002158:	2310      	movs	r3, #16
 800215a:	e7ab      	b.n	80020b4 <UART_SetConfig+0x78>
 800215c:	4b62      	ldr	r3, [pc, #392]	; (80022e8 <UART_SetConfig+0x2ac>)
 800215e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002162:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002166:	2b40      	cmp	r3, #64	; 0x40
 8002168:	d009      	beq.n	800217e <UART_SetConfig+0x142>
 800216a:	d905      	bls.n	8002178 <UART_SetConfig+0x13c>
 800216c:	2b80      	cmp	r3, #128	; 0x80
 800216e:	d070      	beq.n	8002252 <UART_SetConfig+0x216>
 8002170:	2bc0      	cmp	r3, #192	; 0xc0
 8002172:	d106      	bne.n	8002182 <UART_SetConfig+0x146>
 8002174:	2308      	movs	r3, #8
 8002176:	e79d      	b.n	80020b4 <UART_SetConfig+0x78>
 8002178:	b91b      	cbnz	r3, 8002182 <UART_SetConfig+0x146>
 800217a:	2300      	movs	r3, #0
 800217c:	e79a      	b.n	80020b4 <UART_SetConfig+0x78>
 800217e:	2304      	movs	r3, #4
 8002180:	e798      	b.n	80020b4 <UART_SetConfig+0x78>
 8002182:	2310      	movs	r3, #16
 8002184:	e796      	b.n	80020b4 <UART_SetConfig+0x78>
 8002186:	4b58      	ldr	r3, [pc, #352]	; (80022e8 <UART_SetConfig+0x2ac>)
 8002188:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800218c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002190:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002194:	d00b      	beq.n	80021ae <UART_SetConfig+0x172>
 8002196:	d907      	bls.n	80021a8 <UART_SetConfig+0x16c>
 8002198:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800219c:	d05b      	beq.n	8002256 <UART_SetConfig+0x21a>
 800219e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80021a2:	d106      	bne.n	80021b2 <UART_SetConfig+0x176>
 80021a4:	2308      	movs	r3, #8
 80021a6:	e785      	b.n	80020b4 <UART_SetConfig+0x78>
 80021a8:	b91b      	cbnz	r3, 80021b2 <UART_SetConfig+0x176>
 80021aa:	2300      	movs	r3, #0
 80021ac:	e782      	b.n	80020b4 <UART_SetConfig+0x78>
 80021ae:	2304      	movs	r3, #4
 80021b0:	e780      	b.n	80020b4 <UART_SetConfig+0x78>
 80021b2:	2310      	movs	r3, #16
 80021b4:	e77e      	b.n	80020b4 <UART_SetConfig+0x78>
 80021b6:	4b4c      	ldr	r3, [pc, #304]	; (80022e8 <UART_SetConfig+0x2ac>)
 80021b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021bc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80021c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021c4:	d00b      	beq.n	80021de <UART_SetConfig+0x1a2>
 80021c6:	d907      	bls.n	80021d8 <UART_SetConfig+0x19c>
 80021c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80021cc:	d045      	beq.n	800225a <UART_SetConfig+0x21e>
 80021ce:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80021d2:	d106      	bne.n	80021e2 <UART_SetConfig+0x1a6>
 80021d4:	2308      	movs	r3, #8
 80021d6:	e76d      	b.n	80020b4 <UART_SetConfig+0x78>
 80021d8:	b91b      	cbnz	r3, 80021e2 <UART_SetConfig+0x1a6>
 80021da:	2301      	movs	r3, #1
 80021dc:	e76a      	b.n	80020b4 <UART_SetConfig+0x78>
 80021de:	2304      	movs	r3, #4
 80021e0:	e768      	b.n	80020b4 <UART_SetConfig+0x78>
 80021e2:	2310      	movs	r3, #16
 80021e4:	e766      	b.n	80020b4 <UART_SetConfig+0x78>
 80021e6:	4b40      	ldr	r3, [pc, #256]	; (80022e8 <UART_SetConfig+0x2ac>)
 80021e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021ec:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80021f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021f4:	d00b      	beq.n	800220e <UART_SetConfig+0x1d2>
 80021f6:	d907      	bls.n	8002208 <UART_SetConfig+0x1cc>
 80021f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80021fc:	d02f      	beq.n	800225e <UART_SetConfig+0x222>
 80021fe:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002202:	d106      	bne.n	8002212 <UART_SetConfig+0x1d6>
 8002204:	2308      	movs	r3, #8
 8002206:	e755      	b.n	80020b4 <UART_SetConfig+0x78>
 8002208:	b91b      	cbnz	r3, 8002212 <UART_SetConfig+0x1d6>
 800220a:	2300      	movs	r3, #0
 800220c:	e752      	b.n	80020b4 <UART_SetConfig+0x78>
 800220e:	2304      	movs	r3, #4
 8002210:	e750      	b.n	80020b4 <UART_SetConfig+0x78>
 8002212:	2310      	movs	r3, #16
 8002214:	e74e      	b.n	80020b4 <UART_SetConfig+0x78>
 8002216:	4b34      	ldr	r3, [pc, #208]	; (80022e8 <UART_SetConfig+0x2ac>)
 8002218:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800221c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002220:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002224:	d00b      	beq.n	800223e <UART_SetConfig+0x202>
 8002226:	d907      	bls.n	8002238 <UART_SetConfig+0x1fc>
 8002228:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800222c:	d019      	beq.n	8002262 <UART_SetConfig+0x226>
 800222e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002232:	d106      	bne.n	8002242 <UART_SetConfig+0x206>
 8002234:	2308      	movs	r3, #8
 8002236:	e73d      	b.n	80020b4 <UART_SetConfig+0x78>
 8002238:	b91b      	cbnz	r3, 8002242 <UART_SetConfig+0x206>
 800223a:	2300      	movs	r3, #0
 800223c:	e73a      	b.n	80020b4 <UART_SetConfig+0x78>
 800223e:	2304      	movs	r3, #4
 8002240:	e738      	b.n	80020b4 <UART_SetConfig+0x78>
 8002242:	2310      	movs	r3, #16
 8002244:	e736      	b.n	80020b4 <UART_SetConfig+0x78>
 8002246:	2302      	movs	r3, #2
 8002248:	e734      	b.n	80020b4 <UART_SetConfig+0x78>
 800224a:	2302      	movs	r3, #2
 800224c:	e732      	b.n	80020b4 <UART_SetConfig+0x78>
 800224e:	2302      	movs	r3, #2
 8002250:	e730      	b.n	80020b4 <UART_SetConfig+0x78>
 8002252:	2302      	movs	r3, #2
 8002254:	e72e      	b.n	80020b4 <UART_SetConfig+0x78>
 8002256:	2302      	movs	r3, #2
 8002258:	e72c      	b.n	80020b4 <UART_SetConfig+0x78>
 800225a:	2302      	movs	r3, #2
 800225c:	e72a      	b.n	80020b4 <UART_SetConfig+0x78>
 800225e:	2302      	movs	r3, #2
 8002260:	e728      	b.n	80020b4 <UART_SetConfig+0x78>
 8002262:	2302      	movs	r3, #2
 8002264:	e726      	b.n	80020b4 <UART_SetConfig+0x78>
    switch (clocksource)
 8002266:	2b08      	cmp	r3, #8
 8002268:	d85d      	bhi.n	8002326 <UART_SetConfig+0x2ea>
 800226a:	e8df f003 	tbb	[pc, r3]
 800226e:	1f05      	.short	0x1f05
 8002270:	5c485c3f 	.word	0x5c485c3f
 8002274:	5c5c      	.short	0x5c5c
 8002276:	53          	.byte	0x53
 8002277:	00          	.byte	0x00
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002278:	f7ff fc4a 	bl	8001b10 <HAL_RCC_GetPCLK1Freq>
 800227c:	6862      	ldr	r2, [r4, #4]
 800227e:	0853      	lsrs	r3, r2, #1
 8002280:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8002284:	fbb3 f3f2 	udiv	r3, r3, r2
 8002288:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 800228a:	2000      	movs	r0, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800228c:	f1a3 0110 	sub.w	r1, r3, #16
 8002290:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8002294:	4291      	cmp	r1, r2
 8002296:	f200 8087 	bhi.w	80023a8 <UART_SetConfig+0x36c>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800229a:	b29a      	uxth	r2, r3
 800229c:	f022 020f 	bic.w	r2, r2, #15
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80022a0:	f3c3 0342 	ubfx	r3, r3, #1, #3
 80022a4:	4313      	orrs	r3, r2
      huart->Instance->BRR = brrtemp;
 80022a6:	6822      	ldr	r2, [r4, #0]
 80022a8:	60d3      	str	r3, [r2, #12]
 80022aa:	e050      	b.n	800234e <UART_SetConfig+0x312>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80022ac:	f7ff fc40 	bl	8001b30 <HAL_RCC_GetPCLK2Freq>
 80022b0:	6862      	ldr	r2, [r4, #4]
 80022b2:	0853      	lsrs	r3, r2, #1
 80022b4:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 80022b8:	fbb3 f3f2 	udiv	r3, r3, r2
 80022bc:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80022be:	2000      	movs	r0, #0
        break;
 80022c0:	e7e4      	b.n	800228c <UART_SetConfig+0x250>
 80022c2:	bf00      	nop
 80022c4:	efff69f3 	.word	0xefff69f3
 80022c8:	40011000 	.word	0x40011000
 80022cc:	40004400 	.word	0x40004400
 80022d0:	40004800 	.word	0x40004800
 80022d4:	40004c00 	.word	0x40004c00
 80022d8:	40005000 	.word	0x40005000
 80022dc:	40011400 	.word	0x40011400
 80022e0:	40007800 	.word	0x40007800
 80022e4:	40007c00 	.word	0x40007c00
 80022e8:	40023800 	.word	0x40023800
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80022ec:	6862      	ldr	r2, [r4, #4]
 80022ee:	4b30      	ldr	r3, [pc, #192]	; (80023b0 <UART_SetConfig+0x374>)
 80022f0:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 80022f4:	fbb3 f3f2 	udiv	r3, r3, r2
 80022f8:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80022fa:	2000      	movs	r0, #0
        break;
 80022fc:	e7c6      	b.n	800228c <UART_SetConfig+0x250>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80022fe:	f7ff fae5 	bl	80018cc <HAL_RCC_GetSysClockFreq>
 8002302:	6862      	ldr	r2, [r4, #4]
 8002304:	0853      	lsrs	r3, r2, #1
 8002306:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 800230a:	fbb3 f3f2 	udiv	r3, r3, r2
 800230e:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8002310:	2000      	movs	r0, #0
        break;
 8002312:	e7bb      	b.n	800228c <UART_SetConfig+0x250>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002314:	6862      	ldr	r2, [r4, #4]
 8002316:	0853      	lsrs	r3, r2, #1
 8002318:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800231c:	fbb3 f3f2 	udiv	r3, r3, r2
 8002320:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8002322:	2000      	movs	r0, #0
        break;
 8002324:	e7b2      	b.n	800228c <UART_SetConfig+0x250>
        ret = HAL_ERROR;
 8002326:	2001      	movs	r0, #1
  uint32_t usartdiv                   = 0x00000000U;
 8002328:	2300      	movs	r3, #0
 800232a:	e7af      	b.n	800228c <UART_SetConfig+0x250>
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800232c:	f7ff fbf0 	bl	8001b10 <HAL_RCC_GetPCLK1Freq>
 8002330:	6862      	ldr	r2, [r4, #4]
 8002332:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 8002336:	fbb3 f3f2 	udiv	r3, r3, r2
 800233a:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 800233c:	2000      	movs	r0, #0
        ret = HAL_ERROR;
        break;
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800233e:	f1a3 0110 	sub.w	r1, r3, #16
 8002342:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8002346:	4291      	cmp	r1, r2
 8002348:	d830      	bhi.n	80023ac <UART_SetConfig+0x370>
    {
      huart->Instance->BRR = usartdiv;
 800234a:	6822      	ldr	r2, [r4, #0]
 800234c:	60d3      	str	r3, [r2, #12]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800234e:	2300      	movs	r3, #0
 8002350:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 8002352:	6663      	str	r3, [r4, #100]	; 0x64

  return ret;
}
 8002354:	bd10      	pop	{r4, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002356:	f7ff fbeb 	bl	8001b30 <HAL_RCC_GetPCLK2Freq>
 800235a:	6862      	ldr	r2, [r4, #4]
 800235c:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 8002360:	fbb3 f3f2 	udiv	r3, r3, r2
 8002364:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8002366:	2000      	movs	r0, #0
        break;
 8002368:	e7e9      	b.n	800233e <UART_SetConfig+0x302>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800236a:	6862      	ldr	r2, [r4, #4]
 800236c:	4b11      	ldr	r3, [pc, #68]	; (80023b4 <UART_SetConfig+0x378>)
 800236e:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8002372:	fbb3 f3f2 	udiv	r3, r3, r2
 8002376:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8002378:	2000      	movs	r0, #0
        break;
 800237a:	e7e0      	b.n	800233e <UART_SetConfig+0x302>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800237c:	f7ff faa6 	bl	80018cc <HAL_RCC_GetSysClockFreq>
 8002380:	6862      	ldr	r2, [r4, #4]
 8002382:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 8002386:	fbb3 f3f2 	udiv	r3, r3, r2
 800238a:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 800238c:	2000      	movs	r0, #0
        break;
 800238e:	e7d6      	b.n	800233e <UART_SetConfig+0x302>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002390:	6862      	ldr	r2, [r4, #4]
 8002392:	0853      	lsrs	r3, r2, #1
 8002394:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002398:	fbb3 f3f2 	udiv	r3, r3, r2
 800239c:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 800239e:	2000      	movs	r0, #0
        break;
 80023a0:	e7cd      	b.n	800233e <UART_SetConfig+0x302>
        ret = HAL_ERROR;
 80023a2:	2001      	movs	r0, #1
  uint32_t usartdiv                   = 0x00000000U;
 80023a4:	2300      	movs	r3, #0
 80023a6:	e7ca      	b.n	800233e <UART_SetConfig+0x302>
      ret = HAL_ERROR;
 80023a8:	2001      	movs	r0, #1
 80023aa:	e7d0      	b.n	800234e <UART_SetConfig+0x312>
      ret = HAL_ERROR;
 80023ac:	2001      	movs	r0, #1
 80023ae:	e7ce      	b.n	800234e <UART_SetConfig+0x312>
 80023b0:	01e84800 	.word	0x01e84800
 80023b4:	00f42400 	.word	0x00f42400

080023b8 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80023b8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80023ba:	f013 0f01 	tst.w	r3, #1
 80023be:	d006      	beq.n	80023ce <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80023c0:	6802      	ldr	r2, [r0, #0]
 80023c2:	6853      	ldr	r3, [r2, #4]
 80023c4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80023c8:	6a81      	ldr	r1, [r0, #40]	; 0x28
 80023ca:	430b      	orrs	r3, r1
 80023cc:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80023ce:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80023d0:	f013 0f02 	tst.w	r3, #2
 80023d4:	d006      	beq.n	80023e4 <UART_AdvFeatureConfig+0x2c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80023d6:	6802      	ldr	r2, [r0, #0]
 80023d8:	6853      	ldr	r3, [r2, #4]
 80023da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023de:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80023e0:	430b      	orrs	r3, r1
 80023e2:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80023e4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80023e6:	f013 0f04 	tst.w	r3, #4
 80023ea:	d006      	beq.n	80023fa <UART_AdvFeatureConfig+0x42>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80023ec:	6802      	ldr	r2, [r0, #0]
 80023ee:	6853      	ldr	r3, [r2, #4]
 80023f0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023f4:	6b01      	ldr	r1, [r0, #48]	; 0x30
 80023f6:	430b      	orrs	r3, r1
 80023f8:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80023fa:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80023fc:	f013 0f08 	tst.w	r3, #8
 8002400:	d006      	beq.n	8002410 <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002402:	6802      	ldr	r2, [r0, #0]
 8002404:	6853      	ldr	r3, [r2, #4]
 8002406:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800240a:	6b41      	ldr	r1, [r0, #52]	; 0x34
 800240c:	430b      	orrs	r3, r1
 800240e:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002410:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002412:	f013 0f10 	tst.w	r3, #16
 8002416:	d006      	beq.n	8002426 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002418:	6802      	ldr	r2, [r0, #0]
 800241a:	6893      	ldr	r3, [r2, #8]
 800241c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002420:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8002422:	430b      	orrs	r3, r1
 8002424:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002426:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002428:	f013 0f20 	tst.w	r3, #32
 800242c:	d006      	beq.n	800243c <UART_AdvFeatureConfig+0x84>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800242e:	6802      	ldr	r2, [r0, #0]
 8002430:	6893      	ldr	r3, [r2, #8]
 8002432:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002436:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8002438:	430b      	orrs	r3, r1
 800243a:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800243c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800243e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002442:	d00a      	beq.n	800245a <UART_AdvFeatureConfig+0xa2>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002444:	6802      	ldr	r2, [r0, #0]
 8002446:	6853      	ldr	r3, [r2, #4]
 8002448:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800244c:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800244e:	430b      	orrs	r3, r1
 8002450:	6053      	str	r3, [r2, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002452:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002454:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002458:	d00b      	beq.n	8002472 <UART_AdvFeatureConfig+0xba>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800245a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800245c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002460:	d006      	beq.n	8002470 <UART_AdvFeatureConfig+0xb8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002462:	6802      	ldr	r2, [r0, #0]
 8002464:	6853      	ldr	r3, [r2, #4]
 8002466:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800246a:	6c81      	ldr	r1, [r0, #72]	; 0x48
 800246c:	430b      	orrs	r3, r1
 800246e:	6053      	str	r3, [r2, #4]
 8002470:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002472:	6802      	ldr	r2, [r0, #0]
 8002474:	6853      	ldr	r3, [r2, #4]
 8002476:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800247a:	6c41      	ldr	r1, [r0, #68]	; 0x44
 800247c:	430b      	orrs	r3, r1
 800247e:	6053      	str	r3, [r2, #4]
 8002480:	e7eb      	b.n	800245a <UART_AdvFeatureConfig+0xa2>

08002482 <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002482:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002486:	4605      	mov	r5, r0
 8002488:	460f      	mov	r7, r1
 800248a:	4616      	mov	r6, r2
 800248c:	4698      	mov	r8, r3
 800248e:	9c06      	ldr	r4, [sp, #24]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002490:	682b      	ldr	r3, [r5, #0]
 8002492:	69db      	ldr	r3, [r3, #28]
 8002494:	ea37 0303 	bics.w	r3, r7, r3
 8002498:	bf0c      	ite	eq
 800249a:	2301      	moveq	r3, #1
 800249c:	2300      	movne	r3, #0
 800249e:	42b3      	cmp	r3, r6
 80024a0:	d11d      	bne.n	80024de <UART_WaitOnFlagUntilTimeout+0x5c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80024a2:	f1b4 3fff 	cmp.w	r4, #4294967295
 80024a6:	d0f3      	beq.n	8002490 <UART_WaitOnFlagUntilTimeout+0xe>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024a8:	f7fe f8d8 	bl	800065c <HAL_GetTick>
 80024ac:	eba0 0008 	sub.w	r0, r0, r8
 80024b0:	4284      	cmp	r4, r0
 80024b2:	d301      	bcc.n	80024b8 <UART_WaitOnFlagUntilTimeout+0x36>
 80024b4:	2c00      	cmp	r4, #0
 80024b6:	d1eb      	bne.n	8002490 <UART_WaitOnFlagUntilTimeout+0xe>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80024b8:	682a      	ldr	r2, [r5, #0]
 80024ba:	6813      	ldr	r3, [r2, #0]
 80024bc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80024c0:	6013      	str	r3, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80024c2:	682a      	ldr	r2, [r5, #0]
 80024c4:	6893      	ldr	r3, [r2, #8]
 80024c6:	f023 0301 	bic.w	r3, r3, #1
 80024ca:	6093      	str	r3, [r2, #8]

        huart->gState = HAL_UART_STATE_READY;
 80024cc:	2320      	movs	r3, #32
 80024ce:	676b      	str	r3, [r5, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80024d0:	67ab      	str	r3, [r5, #120]	; 0x78

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80024d2:	2300      	movs	r3, #0
 80024d4:	f885 3070 	strb.w	r3, [r5, #112]	; 0x70

        return HAL_TIMEOUT;
 80024d8:	2003      	movs	r0, #3
 80024da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      }
    }
  }
  return HAL_OK;
 80024de:	2000      	movs	r0, #0
}
 80024e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080024e4 <HAL_UART_Transmit>:
{
 80024e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80024e8:	b082      	sub	sp, #8
 80024ea:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 80024ec:	6f43      	ldr	r3, [r0, #116]	; 0x74
 80024ee:	2b20      	cmp	r3, #32
 80024f0:	d004      	beq.n	80024fc <HAL_UART_Transmit+0x18>
    return HAL_BUSY;
 80024f2:	2302      	movs	r3, #2
}
 80024f4:	4618      	mov	r0, r3
 80024f6:	b002      	add	sp, #8
 80024f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80024fc:	4604      	mov	r4, r0
 80024fe:	460d      	mov	r5, r1
 8002500:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 8002502:	2a00      	cmp	r2, #0
 8002504:	bf18      	it	ne
 8002506:	2900      	cmpne	r1, #0
 8002508:	d053      	beq.n	80025b2 <HAL_UART_Transmit+0xce>
    __HAL_LOCK(huart);
 800250a:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 800250e:	2b01      	cmp	r3, #1
 8002510:	d101      	bne.n	8002516 <HAL_UART_Transmit+0x32>
 8002512:	2302      	movs	r3, #2
 8002514:	e7ee      	b.n	80024f4 <HAL_UART_Transmit+0x10>
 8002516:	2301      	movs	r3, #1
 8002518:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800251c:	2300      	movs	r3, #0
 800251e:	67c3      	str	r3, [r0, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002520:	2321      	movs	r3, #33	; 0x21
 8002522:	6743      	str	r3, [r0, #116]	; 0x74
    tickstart = HAL_GetTick();
 8002524:	f7fe f89a 	bl	800065c <HAL_GetTick>
 8002528:	4607      	mov	r7, r0
    huart->TxXferSize  = Size;
 800252a:	f8a4 8050 	strh.w	r8, [r4, #80]	; 0x50
    huart->TxXferCount = Size;
 800252e:	f8a4 8052 	strh.w	r8, [r4, #82]	; 0x52
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002532:	68a3      	ldr	r3, [r4, #8]
 8002534:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002538:	d002      	beq.n	8002540 <HAL_UART_Transmit+0x5c>
      pdata16bits = NULL;
 800253a:	f04f 0800 	mov.w	r8, #0
 800253e:	e014      	b.n	800256a <HAL_UART_Transmit+0x86>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002540:	6923      	ldr	r3, [r4, #16]
 8002542:	b113      	cbz	r3, 800254a <HAL_UART_Transmit+0x66>
      pdata16bits = NULL;
 8002544:	f04f 0800 	mov.w	r8, #0
 8002548:	e00f      	b.n	800256a <HAL_UART_Transmit+0x86>
      pdata16bits = (uint16_t *) pData;
 800254a:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 800254c:	2500      	movs	r5, #0
 800254e:	e00c      	b.n	800256a <HAL_UART_Transmit+0x86>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002550:	6822      	ldr	r2, [r4, #0]
 8002552:	f838 3b02 	ldrh.w	r3, [r8], #2
 8002556:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800255a:	6293      	str	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 800255c:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 8002560:	b29b      	uxth	r3, r3
 8002562:	3b01      	subs	r3, #1
 8002564:	b29b      	uxth	r3, r3
 8002566:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800256a:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 800256e:	b29b      	uxth	r3, r3
 8002570:	b173      	cbz	r3, 8002590 <HAL_UART_Transmit+0xac>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002572:	9600      	str	r6, [sp, #0]
 8002574:	463b      	mov	r3, r7
 8002576:	2200      	movs	r2, #0
 8002578:	2180      	movs	r1, #128	; 0x80
 800257a:	4620      	mov	r0, r4
 800257c:	f7ff ff81 	bl	8002482 <UART_WaitOnFlagUntilTimeout>
 8002580:	b9c8      	cbnz	r0, 80025b6 <HAL_UART_Transmit+0xd2>
      if (pdata8bits == NULL)
 8002582:	2d00      	cmp	r5, #0
 8002584:	d0e4      	beq.n	8002550 <HAL_UART_Transmit+0x6c>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002586:	6823      	ldr	r3, [r4, #0]
 8002588:	f815 2b01 	ldrb.w	r2, [r5], #1
 800258c:	629a      	str	r2, [r3, #40]	; 0x28
 800258e:	e7e5      	b.n	800255c <HAL_UART_Transmit+0x78>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002590:	9600      	str	r6, [sp, #0]
 8002592:	463b      	mov	r3, r7
 8002594:	2200      	movs	r2, #0
 8002596:	2140      	movs	r1, #64	; 0x40
 8002598:	4620      	mov	r0, r4
 800259a:	f7ff ff72 	bl	8002482 <UART_WaitOnFlagUntilTimeout>
 800259e:	4603      	mov	r3, r0
 80025a0:	b108      	cbz	r0, 80025a6 <HAL_UART_Transmit+0xc2>
      return HAL_TIMEOUT;
 80025a2:	2303      	movs	r3, #3
 80025a4:	e7a6      	b.n	80024f4 <HAL_UART_Transmit+0x10>
    huart->gState = HAL_UART_STATE_READY;
 80025a6:	2220      	movs	r2, #32
 80025a8:	6762      	str	r2, [r4, #116]	; 0x74
    __HAL_UNLOCK(huart);
 80025aa:	2200      	movs	r2, #0
 80025ac:	f884 2070 	strb.w	r2, [r4, #112]	; 0x70
    return HAL_OK;
 80025b0:	e7a0      	b.n	80024f4 <HAL_UART_Transmit+0x10>
      return  HAL_ERROR;
 80025b2:	2301      	movs	r3, #1
 80025b4:	e79e      	b.n	80024f4 <HAL_UART_Transmit+0x10>
        return HAL_TIMEOUT;
 80025b6:	2303      	movs	r3, #3
 80025b8:	e79c      	b.n	80024f4 <HAL_UART_Transmit+0x10>

080025ba <UART_CheckIdleState>:
{
 80025ba:	b510      	push	{r4, lr}
 80025bc:	b082      	sub	sp, #8
 80025be:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025c0:	2300      	movs	r3, #0
 80025c2:	67c3      	str	r3, [r0, #124]	; 0x7c
  tickstart = HAL_GetTick();
 80025c4:	f7fe f84a 	bl	800065c <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80025c8:	6822      	ldr	r2, [r4, #0]
 80025ca:	6812      	ldr	r2, [r2, #0]
 80025cc:	f012 0f08 	tst.w	r2, #8
 80025d0:	d107      	bne.n	80025e2 <UART_CheckIdleState+0x28>
  huart->gState = HAL_UART_STATE_READY;
 80025d2:	2320      	movs	r3, #32
 80025d4:	6763      	str	r3, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80025d6:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 80025d8:	2000      	movs	r0, #0
 80025da:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
}
 80025de:	b002      	add	sp, #8
 80025e0:	bd10      	pop	{r4, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80025e2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80025e6:	9300      	str	r3, [sp, #0]
 80025e8:	4603      	mov	r3, r0
 80025ea:	2200      	movs	r2, #0
 80025ec:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80025f0:	4620      	mov	r0, r4
 80025f2:	f7ff ff46 	bl	8002482 <UART_WaitOnFlagUntilTimeout>
 80025f6:	2800      	cmp	r0, #0
 80025f8:	d0eb      	beq.n	80025d2 <UART_CheckIdleState+0x18>
      return HAL_TIMEOUT;
 80025fa:	2003      	movs	r0, #3
 80025fc:	e7ef      	b.n	80025de <UART_CheckIdleState+0x24>

080025fe <HAL_UART_Init>:
  if (huart == NULL)
 80025fe:	b368      	cbz	r0, 800265c <HAL_UART_Init+0x5e>
{
 8002600:	b510      	push	{r4, lr}
 8002602:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8002604:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8002606:	b303      	cbz	r3, 800264a <HAL_UART_Init+0x4c>
  huart->gState = HAL_UART_STATE_BUSY;
 8002608:	2324      	movs	r3, #36	; 0x24
 800260a:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 800260c:	6822      	ldr	r2, [r4, #0]
 800260e:	6813      	ldr	r3, [r2, #0]
 8002610:	f023 0301 	bic.w	r3, r3, #1
 8002614:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002616:	4620      	mov	r0, r4
 8002618:	f7ff fd10 	bl	800203c <UART_SetConfig>
 800261c:	2801      	cmp	r0, #1
 800261e:	d01f      	beq.n	8002660 <HAL_UART_Init+0x62>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002620:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002622:	b9bb      	cbnz	r3, 8002654 <HAL_UART_Init+0x56>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002624:	6822      	ldr	r2, [r4, #0]
 8002626:	6853      	ldr	r3, [r2, #4]
 8002628:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 800262c:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800262e:	6822      	ldr	r2, [r4, #0]
 8002630:	6893      	ldr	r3, [r2, #8]
 8002632:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8002636:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8002638:	6822      	ldr	r2, [r4, #0]
 800263a:	6813      	ldr	r3, [r2, #0]
 800263c:	f043 0301 	orr.w	r3, r3, #1
 8002640:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8002642:	4620      	mov	r0, r4
 8002644:	f7ff ffb9 	bl	80025ba <UART_CheckIdleState>
 8002648:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 800264a:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    HAL_UART_MspInit(huart);
 800264e:	f000 fbff 	bl	8002e50 <HAL_UART_MspInit>
 8002652:	e7d9      	b.n	8002608 <HAL_UART_Init+0xa>
    UART_AdvFeatureConfig(huart);
 8002654:	4620      	mov	r0, r4
 8002656:	f7ff feaf 	bl	80023b8 <UART_AdvFeatureConfig>
 800265a:	e7e3      	b.n	8002624 <HAL_UART_Init+0x26>
    return HAL_ERROR;
 800265c:	2001      	movs	r0, #1
 800265e:	4770      	bx	lr
}
 8002660:	bd10      	pop	{r4, pc}
	...

08002664 <USB_CoreReset>:
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t count = 0U;
 8002664:	2300      	movs	r3, #0

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8002666:	3301      	adds	r3, #1
 8002668:	4a0c      	ldr	r2, [pc, #48]	; (800269c <USB_CoreReset+0x38>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d811      	bhi.n	8002692 <USB_CoreReset+0x2e>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800266e:	6902      	ldr	r2, [r0, #16]
 8002670:	2a00      	cmp	r2, #0
 8002672:	daf8      	bge.n	8002666 <USB_CoreReset+0x2>

  /* Core Soft Reset */
  count = 0U;
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8002674:	6903      	ldr	r3, [r0, #16]
 8002676:	f043 0301 	orr.w	r3, r3, #1
 800267a:	6103      	str	r3, [r0, #16]
  count = 0U;
 800267c:	2300      	movs	r3, #0

  do
  {
    if (++count > 200000U)
 800267e:	3301      	adds	r3, #1
 8002680:	4a06      	ldr	r2, [pc, #24]	; (800269c <USB_CoreReset+0x38>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d807      	bhi.n	8002696 <USB_CoreReset+0x32>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8002686:	6902      	ldr	r2, [r0, #16]
 8002688:	f012 0f01 	tst.w	r2, #1
 800268c:	d1f7      	bne.n	800267e <USB_CoreReset+0x1a>

  return HAL_OK;
 800268e:	2000      	movs	r0, #0
 8002690:	4770      	bx	lr
      return HAL_TIMEOUT;
 8002692:	2003      	movs	r0, #3
 8002694:	4770      	bx	lr
      return HAL_TIMEOUT;
 8002696:	2003      	movs	r0, #3
}
 8002698:	4770      	bx	lr
 800269a:	bf00      	nop
 800269c:	00030d40 	.word	0x00030d40

080026a0 <USB_CoreInit>:
{
 80026a0:	b084      	sub	sp, #16
 80026a2:	b510      	push	{r4, lr}
 80026a4:	4604      	mov	r4, r0
 80026a6:	a803      	add	r0, sp, #12
 80026a8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80026ac:	9b08      	ldr	r3, [sp, #32]
 80026ae:	2b01      	cmp	r3, #1
 80026b0:	d011      	beq.n	80026d6 <USB_CoreInit+0x36>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80026b2:	68e3      	ldr	r3, [r4, #12]
 80026b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80026b8:	60e3      	str	r3, [r4, #12]
    ret = USB_CoreReset(USBx);
 80026ba:	4620      	mov	r0, r4
 80026bc:	f7ff ffd2 	bl	8002664 <USB_CoreReset>
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80026c0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80026c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026c6:	63a3      	str	r3, [r4, #56]	; 0x38
  if (cfg.dma_enable == 1U)
 80026c8:	9b06      	ldr	r3, [sp, #24]
 80026ca:	2b01      	cmp	r3, #1
 80026cc:	d01b      	beq.n	8002706 <USB_CoreInit+0x66>
}
 80026ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80026d2:	b004      	add	sp, #16
 80026d4:	4770      	bx	lr
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80026d6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80026d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026dc:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80026de:	68e2      	ldr	r2, [r4, #12]
 80026e0:	4b0d      	ldr	r3, [pc, #52]	; (8002718 <USB_CoreInit+0x78>)
 80026e2:	4013      	ands	r3, r2
 80026e4:	60e3      	str	r3, [r4, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80026e6:	68e3      	ldr	r3, [r4, #12]
 80026e8:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80026ec:	60e3      	str	r3, [r4, #12]
    if (cfg.use_external_vbus == 1U)
 80026ee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80026f0:	2b01      	cmp	r3, #1
 80026f2:	d003      	beq.n	80026fc <USB_CoreInit+0x5c>
    ret = USB_CoreReset(USBx);
 80026f4:	4620      	mov	r0, r4
 80026f6:	f7ff ffb5 	bl	8002664 <USB_CoreReset>
 80026fa:	e7e5      	b.n	80026c8 <USB_CoreInit+0x28>
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80026fc:	68e3      	ldr	r3, [r4, #12]
 80026fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002702:	60e3      	str	r3, [r4, #12]
 8002704:	e7f6      	b.n	80026f4 <USB_CoreInit+0x54>
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8002706:	68a3      	ldr	r3, [r4, #8]
 8002708:	f043 0306 	orr.w	r3, r3, #6
 800270c:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800270e:	68a3      	ldr	r3, [r4, #8]
 8002710:	f043 0320 	orr.w	r3, r3, #32
 8002714:	60a3      	str	r3, [r4, #8]
 8002716:	e7da      	b.n	80026ce <USB_CoreInit+0x2e>
 8002718:	ffbdffbf 	.word	0xffbdffbf

0800271c <USB_DisableGlobalInt>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800271c:	6883      	ldr	r3, [r0, #8]
 800271e:	f023 0301 	bic.w	r3, r3, #1
 8002722:	6083      	str	r3, [r0, #8]
}
 8002724:	2000      	movs	r0, #0
 8002726:	4770      	bx	lr

08002728 <USB_SetCurrentMode>:
{
 8002728:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800272a:	68c3      	ldr	r3, [r0, #12]
 800272c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8002730:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8002732:	2901      	cmp	r1, #1
 8002734:	d009      	beq.n	800274a <USB_SetCurrentMode+0x22>
  else if (mode == USB_DEVICE_MODE)
 8002736:	b969      	cbnz	r1, 8002754 <USB_SetCurrentMode+0x2c>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8002738:	68c3      	ldr	r3, [r0, #12]
 800273a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800273e:	60c3      	str	r3, [r0, #12]
  HAL_Delay(50U);
 8002740:	2032      	movs	r0, #50	; 0x32
 8002742:	f7fd ff91 	bl	8000668 <HAL_Delay>
  return HAL_OK;
 8002746:	2000      	movs	r0, #0
 8002748:	bd08      	pop	{r3, pc}
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800274a:	68c3      	ldr	r3, [r0, #12]
 800274c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002750:	60c3      	str	r3, [r0, #12]
 8002752:	e7f5      	b.n	8002740 <USB_SetCurrentMode+0x18>
    return HAL_ERROR;
 8002754:	2001      	movs	r0, #1
}
 8002756:	bd08      	pop	{r3, pc}

08002758 <USB_FlushTxFifo>:
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8002758:	0189      	lsls	r1, r1, #6
 800275a:	f041 0120 	orr.w	r1, r1, #32
 800275e:	6101      	str	r1, [r0, #16]
  uint32_t count = 0U;
 8002760:	2300      	movs	r3, #0
    if (++count > 200000U)
 8002762:	3301      	adds	r3, #1
 8002764:	4a05      	ldr	r2, [pc, #20]	; (800277c <USB_FlushTxFifo+0x24>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d805      	bhi.n	8002776 <USB_FlushTxFifo+0x1e>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800276a:	6902      	ldr	r2, [r0, #16]
 800276c:	f012 0f20 	tst.w	r2, #32
 8002770:	d1f7      	bne.n	8002762 <USB_FlushTxFifo+0xa>
  return HAL_OK;
 8002772:	2000      	movs	r0, #0
 8002774:	4770      	bx	lr
      return HAL_TIMEOUT;
 8002776:	2003      	movs	r0, #3
}
 8002778:	4770      	bx	lr
 800277a:	bf00      	nop
 800277c:	00030d40 	.word	0x00030d40

08002780 <USB_FlushRxFifo>:
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8002780:	2310      	movs	r3, #16
 8002782:	6103      	str	r3, [r0, #16]
  uint32_t count = 0;
 8002784:	2300      	movs	r3, #0
    if (++count > 200000U)
 8002786:	3301      	adds	r3, #1
 8002788:	4a05      	ldr	r2, [pc, #20]	; (80027a0 <USB_FlushRxFifo+0x20>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d805      	bhi.n	800279a <USB_FlushRxFifo+0x1a>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800278e:	6902      	ldr	r2, [r0, #16]
 8002790:	f012 0f10 	tst.w	r2, #16
 8002794:	d1f7      	bne.n	8002786 <USB_FlushRxFifo+0x6>
  return HAL_OK;
 8002796:	2000      	movs	r0, #0
 8002798:	4770      	bx	lr
      return HAL_TIMEOUT;
 800279a:	2003      	movs	r0, #3
}
 800279c:	4770      	bx	lr
 800279e:	bf00      	nop
 80027a0:	00030d40 	.word	0x00030d40

080027a4 <USB_SetDevSpeed>:
  USBx_DEVICE->DCFG |= speed;
 80027a4:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 80027a8:	4319      	orrs	r1, r3
 80027aa:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
}
 80027ae:	2000      	movs	r0, #0
 80027b0:	4770      	bx	lr
	...

080027b4 <USB_DevInit>:
{
 80027b4:	b084      	sub	sp, #16
 80027b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80027ba:	4604      	mov	r4, r0
 80027bc:	a807      	add	r0, sp, #28
 80027be:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 80027c2:	4625      	mov	r5, r4
  for (i = 0U; i < 15U; i++)
 80027c4:	2300      	movs	r3, #0
 80027c6:	e006      	b.n	80027d6 <USB_DevInit+0x22>
    USBx->DIEPTXF[i] = 0U;
 80027c8:	f103 0240 	add.w	r2, r3, #64	; 0x40
 80027cc:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80027d0:	2100      	movs	r1, #0
 80027d2:	6051      	str	r1, [r2, #4]
  for (i = 0U; i < 15U; i++)
 80027d4:	3301      	adds	r3, #1
 80027d6:	2b0e      	cmp	r3, #14
 80027d8:	d9f6      	bls.n	80027c8 <USB_DevInit+0x14>
  if (cfg.vbus_sensing_enable == 0U)
 80027da:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80027dc:	bb83      	cbnz	r3, 8002840 <USB_DevInit+0x8c>
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80027de:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80027e0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80027e4:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80027e6:	6823      	ldr	r3, [r4, #0]
 80027e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80027ec:	6023      	str	r3, [r4, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80027ee:	6823      	ldr	r3, [r4, #0]
 80027f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027f4:	6023      	str	r3, [r4, #0]
  USBx_PCGCCTL = 0U;
 80027f6:	2300      	movs	r3, #0
 80027f8:	f8c4 3e00 	str.w	r3, [r4, #3584]	; 0xe00
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80027fc:	f504 6600 	add.w	r6, r4, #2048	; 0x800
 8002800:	f8d4 3800 	ldr.w	r3, [r4, #2048]	; 0x800
 8002804:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002808:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800280a:	2b01      	cmp	r3, #1
 800280c:	d01d      	beq.n	800284a <USB_DevInit+0x96>
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 800280e:	2b03      	cmp	r3, #3
 8002810:	d027      	beq.n	8002862 <USB_DevInit+0xae>
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8002812:	2103      	movs	r1, #3
 8002814:	4620      	mov	r0, r4
 8002816:	f7ff ffc5 	bl	80027a4 <USB_SetDevSpeed>
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800281a:	2110      	movs	r1, #16
 800281c:	4620      	mov	r0, r4
 800281e:	f7ff ff9b 	bl	8002758 <USB_FlushTxFifo>
 8002822:	4680      	mov	r8, r0
 8002824:	b108      	cbz	r0, 800282a <USB_DevInit+0x76>
    ret = HAL_ERROR;
 8002826:	f04f 0801 	mov.w	r8, #1
  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800282a:	4620      	mov	r0, r4
 800282c:	f7ff ffa8 	bl	8002780 <USB_FlushRxFifo>
 8002830:	b108      	cbz	r0, 8002836 <USB_DevInit+0x82>
    ret = HAL_ERROR;
 8002832:	f04f 0801 	mov.w	r8, #1
  USBx_DEVICE->DIEPMSK = 0U;
 8002836:	2300      	movs	r3, #0
 8002838:	6133      	str	r3, [r6, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800283a:	6173      	str	r3, [r6, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800283c:	61f3      	str	r3, [r6, #28]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800283e:	e027      	b.n	8002890 <USB_DevInit+0xdc>
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8002840:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002842:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002846:	63a3      	str	r3, [r4, #56]	; 0x38
 8002848:	e7d5      	b.n	80027f6 <USB_DevInit+0x42>
    if (cfg.speed == USB_OTG_SPEED_HIGH)
 800284a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800284c:	b923      	cbnz	r3, 8002858 <USB_DevInit+0xa4>
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800284e:	2100      	movs	r1, #0
 8002850:	4620      	mov	r0, r4
 8002852:	f7ff ffa7 	bl	80027a4 <USB_SetDevSpeed>
 8002856:	e7e0      	b.n	800281a <USB_DevInit+0x66>
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8002858:	2101      	movs	r1, #1
 800285a:	4620      	mov	r0, r4
 800285c:	f7ff ffa2 	bl	80027a4 <USB_SetDevSpeed>
 8002860:	e7db      	b.n	800281a <USB_DevInit+0x66>
    if (cfg.speed == USB_OTG_SPEED_HIGH)
 8002862:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002864:	b923      	cbnz	r3, 8002870 <USB_DevInit+0xbc>
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8002866:	2100      	movs	r1, #0
 8002868:	4620      	mov	r0, r4
 800286a:	f7ff ff9b 	bl	80027a4 <USB_SetDevSpeed>
 800286e:	e7d4      	b.n	800281a <USB_DevInit+0x66>
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8002870:	2101      	movs	r1, #1
 8002872:	4620      	mov	r0, r4
 8002874:	f7ff ff96 	bl	80027a4 <USB_SetDevSpeed>
 8002878:	e7cf      	b.n	800281a <USB_DevInit+0x66>
      if (i == 0U)
 800287a:	b9c3      	cbnz	r3, 80028ae <USB_DevInit+0xfa>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800287c:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8002880:	f8c2 0900 	str.w	r0, [r2, #2304]	; 0x900
    USBx_INEP(i)->DIEPTSIZ = 0U;
 8002884:	2200      	movs	r2, #0
 8002886:	610a      	str	r2, [r1, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8002888:	f64f 327f 	movw	r2, #64383	; 0xfb7f
 800288c:	608a      	str	r2, [r1, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800288e:	3301      	adds	r3, #1
 8002890:	9907      	ldr	r1, [sp, #28]
 8002892:	428b      	cmp	r3, r1
 8002894:	d210      	bcs.n	80028b8 <USB_DevInit+0x104>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8002896:	eb05 1243 	add.w	r2, r5, r3, lsl #5
 800289a:	f502 6110 	add.w	r1, r2, #2304	; 0x900
 800289e:	f8d2 0900 	ldr.w	r0, [r2, #2304]	; 0x900
 80028a2:	2800      	cmp	r0, #0
 80028a4:	dbe9      	blt.n	800287a <USB_DevInit+0xc6>
      USBx_INEP(i)->DIEPCTL = 0U;
 80028a6:	2000      	movs	r0, #0
 80028a8:	f8c2 0900 	str.w	r0, [r2, #2304]	; 0x900
 80028ac:	e7ea      	b.n	8002884 <USB_DevInit+0xd0>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80028ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80028b2:	f8c2 0900 	str.w	r0, [r2, #2304]	; 0x900
 80028b6:	e7e5      	b.n	8002884 <USB_DevInit+0xd0>
 80028b8:	2300      	movs	r3, #0
 80028ba:	e00a      	b.n	80028d2 <USB_DevInit+0x11e>
      if (i == 0U)
 80028bc:	b1bb      	cbz	r3, 80028ee <USB_DevInit+0x13a>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80028be:	f04f 4790 	mov.w	r7, #1207959552	; 0x48000000
 80028c2:	f8c2 7b00 	str.w	r7, [r2, #2816]	; 0xb00
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80028c6:	2200      	movs	r2, #0
 80028c8:	6102      	str	r2, [r0, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80028ca:	f64f 327f 	movw	r2, #64383	; 0xfb7f
 80028ce:	6082      	str	r2, [r0, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80028d0:	3301      	adds	r3, #1
 80028d2:	428b      	cmp	r3, r1
 80028d4:	d210      	bcs.n	80028f8 <USB_DevInit+0x144>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80028d6:	eb05 1243 	add.w	r2, r5, r3, lsl #5
 80028da:	f502 6030 	add.w	r0, r2, #2816	; 0xb00
 80028de:	f8d2 7b00 	ldr.w	r7, [r2, #2816]	; 0xb00
 80028e2:	2f00      	cmp	r7, #0
 80028e4:	dbea      	blt.n	80028bc <USB_DevInit+0x108>
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80028e6:	2700      	movs	r7, #0
 80028e8:	f8c2 7b00 	str.w	r7, [r2, #2816]	; 0xb00
 80028ec:	e7eb      	b.n	80028c6 <USB_DevInit+0x112>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80028ee:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
 80028f2:	f8c2 7b00 	str.w	r7, [r2, #2816]	; 0xb00
 80028f6:	e7e6      	b.n	80028c6 <USB_DevInit+0x112>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80028f8:	6933      	ldr	r3, [r6, #16]
 80028fa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80028fe:	6133      	str	r3, [r6, #16]
  if (cfg.dma_enable == 1U)
 8002900:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002902:	2b01      	cmp	r3, #1
 8002904:	d01b      	beq.n	800293e <USB_DevInit+0x18a>
  USBx->GINTMSK = 0U;
 8002906:	2200      	movs	r2, #0
 8002908:	61a2      	str	r2, [r4, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 800290a:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800290e:	6162      	str	r2, [r4, #20]
  if (cfg.dma_enable == 0U)
 8002910:	b91b      	cbnz	r3, 800291a <USB_DevInit+0x166>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8002912:	69a3      	ldr	r3, [r4, #24]
 8002914:	f043 0310 	orr.w	r3, r3, #16
 8002918:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800291a:	69a2      	ldr	r2, [r4, #24]
 800291c:	4b0e      	ldr	r3, [pc, #56]	; (8002958 <USB_DevInit+0x1a4>)
 800291e:	4313      	orrs	r3, r2
 8002920:	61a3      	str	r3, [r4, #24]
  if (cfg.Sof_enable != 0U)
 8002922:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002924:	b11b      	cbz	r3, 800292e <USB_DevInit+0x17a>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8002926:	69a3      	ldr	r3, [r4, #24]
 8002928:	f043 0308 	orr.w	r3, r3, #8
 800292c:	61a3      	str	r3, [r4, #24]
  if (cfg.vbus_sensing_enable == 1U)
 800292e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002930:	2b01      	cmp	r3, #1
 8002932:	d00b      	beq.n	800294c <USB_DevInit+0x198>
}
 8002934:	4640      	mov	r0, r8
 8002936:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800293a:	b004      	add	sp, #16
 800293c:	4770      	bx	lr
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 800293e:	4a07      	ldr	r2, [pc, #28]	; (800295c <USB_DevInit+0x1a8>)
 8002940:	6332      	str	r2, [r6, #48]	; 0x30
    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 8002942:	6b31      	ldr	r1, [r6, #48]	; 0x30
 8002944:	4a06      	ldr	r2, [pc, #24]	; (8002960 <USB_DevInit+0x1ac>)
 8002946:	430a      	orrs	r2, r1
 8002948:	6332      	str	r2, [r6, #48]	; 0x30
 800294a:	e7dc      	b.n	8002906 <USB_DevInit+0x152>
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800294c:	69a2      	ldr	r2, [r4, #24]
 800294e:	4b05      	ldr	r3, [pc, #20]	; (8002964 <USB_DevInit+0x1b0>)
 8002950:	4313      	orrs	r3, r2
 8002952:	61a3      	str	r3, [r4, #24]
 8002954:	e7ee      	b.n	8002934 <USB_DevInit+0x180>
 8002956:	bf00      	nop
 8002958:	803c3800 	.word	0x803c3800
 800295c:	00800100 	.word	0x00800100
 8002960:	00010003 	.word	0x00010003
 8002964:	40000004 	.word	0x40000004

08002968 <USB_DevDisconnect>:
{
 8002968:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800296a:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 800296e:	f043 0302 	orr.w	r3, r3, #2
 8002972:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
  HAL_Delay(3U);
 8002976:	2003      	movs	r0, #3
 8002978:	f7fd fe76 	bl	8000668 <HAL_Delay>
}
 800297c:	2000      	movs	r0, #0
 800297e:	bd08      	pop	{r3, pc}

08002980 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002980:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002982:	b08d      	sub	sp, #52	; 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002984:	2400      	movs	r4, #0
 8002986:	9407      	str	r4, [sp, #28]
 8002988:	9408      	str	r4, [sp, #32]
 800298a:	9409      	str	r4, [sp, #36]	; 0x24
 800298c:	940a      	str	r4, [sp, #40]	; 0x28
 800298e:	940b      	str	r4, [sp, #44]	; 0x2c

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002990:	4b35      	ldr	r3, [pc, #212]	; (8002a68 <MX_GPIO_Init+0xe8>)
 8002992:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002994:	f042 0204 	orr.w	r2, r2, #4
 8002998:	631a      	str	r2, [r3, #48]	; 0x30
 800299a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800299c:	f002 0204 	and.w	r2, r2, #4
 80029a0:	9201      	str	r2, [sp, #4]
 80029a2:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80029a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80029a6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80029aa:	631a      	str	r2, [r3, #48]	; 0x30
 80029ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80029ae:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80029b2:	9202      	str	r2, [sp, #8]
 80029b4:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80029b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80029b8:	f042 0202 	orr.w	r2, r2, #2
 80029bc:	631a      	str	r2, [r3, #48]	; 0x30
 80029be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80029c0:	f002 0202 	and.w	r2, r2, #2
 80029c4:	9203      	str	r2, [sp, #12]
 80029c6:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80029c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80029ca:	f042 0208 	orr.w	r2, r2, #8
 80029ce:	631a      	str	r2, [r3, #48]	; 0x30
 80029d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80029d2:	f002 0208 	and.w	r2, r2, #8
 80029d6:	9204      	str	r2, [sp, #16]
 80029d8:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80029da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80029dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80029e0:	631a      	str	r2, [r3, #48]	; 0x30
 80029e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80029e4:	f002 0240 	and.w	r2, r2, #64	; 0x40
 80029e8:	9205      	str	r2, [sp, #20]
 80029ea:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80029ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80029ee:	f042 0201 	orr.w	r2, r2, #1
 80029f2:	631a      	str	r2, [r3, #48]	; 0x30
 80029f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029f6:	f003 0301 	and.w	r3, r3, #1
 80029fa:	9306      	str	r3, [sp, #24]
 80029fc:	9b06      	ldr	r3, [sp, #24]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80029fe:	4f1b      	ldr	r7, [pc, #108]	; (8002a6c <MX_GPIO_Init+0xec>)
 8002a00:	4622      	mov	r2, r4
 8002a02:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8002a06:	4638      	mov	r0, r7
 8002a08:	f7fe f918 	bl	8000c3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8002a0c:	4d18      	ldr	r5, [pc, #96]	; (8002a70 <MX_GPIO_Init+0xf0>)
 8002a0e:	4622      	mov	r2, r4
 8002a10:	2140      	movs	r1, #64	; 0x40
 8002a12:	4628      	mov	r0, r5
 8002a14:	f7fe f912 	bl	8000c3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8002a18:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002a1c:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002a1e:	4b15      	ldr	r3, [pc, #84]	; (8002a74 <MX_GPIO_Init+0xf4>)
 8002a20:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a22:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8002a24:	a907      	add	r1, sp, #28
 8002a26:	4814      	ldr	r0, [pc, #80]	; (8002a78 <MX_GPIO_Init+0xf8>)
 8002a28:	f7fe f826 	bl	8000a78 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8002a2c:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8002a30:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a32:	2601      	movs	r6, #1
 8002a34:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a36:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a38:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a3a:	a907      	add	r1, sp, #28
 8002a3c:	4638      	mov	r0, r7
 8002a3e:	f7fe f81b 	bl	8000a78 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8002a42:	2340      	movs	r3, #64	; 0x40
 8002a44:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a46:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a48:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a4a:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8002a4c:	a907      	add	r1, sp, #28
 8002a4e:	4628      	mov	r0, r5
 8002a50:	f7fe f812 	bl	8000a78 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8002a54:	2380      	movs	r3, #128	; 0x80
 8002a56:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a58:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a5a:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002a5c:	a907      	add	r1, sp, #28
 8002a5e:	4628      	mov	r0, r5
 8002a60:	f7fe f80a 	bl	8000a78 <HAL_GPIO_Init>

}
 8002a64:	b00d      	add	sp, #52	; 0x34
 8002a66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002a68:	40023800 	.word	0x40023800
 8002a6c:	40020400 	.word	0x40020400
 8002a70:	40021800 	.word	0x40021800
 8002a74:	10110000 	.word	0x10110000
 8002a78:	40020800 	.word	0x40020800

08002a7c <MX_USART3_UART_Init>:
{
 8002a7c:	b508      	push	{r3, lr}
  huart3.Instance = USART3;
 8002a7e:	4809      	ldr	r0, [pc, #36]	; (8002aa4 <MX_USART3_UART_Init+0x28>)
 8002a80:	4b09      	ldr	r3, [pc, #36]	; (8002aa8 <MX_USART3_UART_Init+0x2c>)
 8002a82:	6003      	str	r3, [r0, #0]
  huart3.Init.BaudRate = 115200;
 8002a84:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8002a88:	6043      	str	r3, [r0, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	6083      	str	r3, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002a8e:	60c3      	str	r3, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002a90:	6103      	str	r3, [r0, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002a92:	220c      	movs	r2, #12
 8002a94:	6142      	str	r2, [r0, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a96:	6183      	str	r3, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a98:	61c3      	str	r3, [r0, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002a9a:	6203      	str	r3, [r0, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002a9c:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002a9e:	f7ff fdae 	bl	80025fe <HAL_UART_Init>
 8002aa2:	bd08      	pop	{r3, pc}
 8002aa4:	200001ac 	.word	0x200001ac
 8002aa8:	40004800 	.word	0x40004800

08002aac <MX_USB_OTG_FS_PCD_Init>:
{
 8002aac:	b508      	push	{r3, lr}
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8002aae:	480a      	ldr	r0, [pc, #40]	; (8002ad8 <MX_USB_OTG_FS_PCD_Init+0x2c>)
 8002ab0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002ab4:	6003      	str	r3, [r0, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8002ab6:	2306      	movs	r3, #6
 8002ab8:	6043      	str	r3, [r0, #4]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8002aba:	2300      	movs	r3, #0
 8002abc:	6103      	str	r3, [r0, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8002abe:	2202      	movs	r2, #2
 8002ac0:	6182      	str	r2, [r0, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8002ac2:	2201      	movs	r2, #1
 8002ac4:	61c2      	str	r2, [r0, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8002ac6:	6203      	str	r3, [r0, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8002ac8:	6243      	str	r3, [r0, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8002aca:	6282      	str	r2, [r0, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8002acc:	62c2      	str	r2, [r0, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8002ace:	6303      	str	r3, [r0, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8002ad0:	f7fe fc26 	bl	8001320 <HAL_PCD_Init>
 8002ad4:	bd08      	pop	{r3, pc}
 8002ad6:	bf00      	nop
 8002ad8:	20000278 	.word	0x20000278

08002adc <MX_ADC1_Init>:
{
 8002adc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  hadc1.Instance = ADC1;
 8002ade:	4c14      	ldr	r4, [pc, #80]	; (8002b30 <MX_ADC1_Init+0x54>)
 8002ae0:	4b14      	ldr	r3, [pc, #80]	; (8002b34 <MX_ADC1_Init+0x58>)
 8002ae2:	6023      	str	r3, [r4, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002ae4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002ae8:	6063      	str	r3, [r4, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002aea:	2500      	movs	r5, #0
 8002aec:	60a5      	str	r5, [r4, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8002aee:	2701      	movs	r7, #1
 8002af0:	6127      	str	r7, [r4, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002af2:	61a5      	str	r5, [r4, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002af4:	f884 5020 	strb.w	r5, [r4, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002af8:	62e5      	str	r5, [r4, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002afa:	4b0f      	ldr	r3, [pc, #60]	; (8002b38 <MX_ADC1_Init+0x5c>)
 8002afc:	62a3      	str	r3, [r4, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002afe:	60e5      	str	r5, [r4, #12]
  hadc1.Init.NbrOfConversion = 1;
 8002b00:	61e7      	str	r7, [r4, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002b02:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8002b06:	6165      	str	r5, [r4, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002b08:	4620      	mov	r0, r4
 8002b0a:	f7fd fe5b 	bl	80007c4 <HAL_ADC_Init>
  sConfig.Channel = ADC_CHANNEL_9;
 8002b0e:	4e0b      	ldr	r6, [pc, #44]	; (8002b3c <MX_ADC1_Init+0x60>)
 8002b10:	2309      	movs	r3, #9
 8002b12:	6033      	str	r3, [r6, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002b14:	6077      	str	r7, [r6, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002b16:	60b5      	str	r5, [r6, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002b18:	4631      	mov	r1, r6
 8002b1a:	4620      	mov	r0, r4
 8002b1c:	f7fd fe7e 	bl	800081c <HAL_ADC_ConfigChannel>
  sConfig.Channel = ADC_CHANNEL_12;
 8002b20:	230c      	movs	r3, #12
 8002b22:	6033      	str	r3, [r6, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002b24:	4631      	mov	r1, r6
 8002b26:	4620      	mov	r0, r4
 8002b28:	f7fd fe78 	bl	800081c <HAL_ADC_ConfigChannel>
 8002b2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002b2e:	bf00      	nop
 8002b30:	2000067c 	.word	0x2000067c
 8002b34:	40012000 	.word	0x40012000
 8002b38:	0f000001 	.word	0x0f000001
 8002b3c:	2000018c 	.word	0x2000018c

08002b40 <MX_I2C1_Init>:
{
 8002b40:	b538      	push	{r3, r4, r5, lr}
  hi2c1.Instance = I2C1;
 8002b42:	4c0d      	ldr	r4, [pc, #52]	; (8002b78 <MX_I2C1_Init+0x38>)
 8002b44:	4b0d      	ldr	r3, [pc, #52]	; (8002b7c <MX_I2C1_Init+0x3c>)
 8002b46:	6023      	str	r3, [r4, #0]
  hi2c1.Init.Timing = 0x6000030D;
 8002b48:	4b0d      	ldr	r3, [pc, #52]	; (8002b80 <MX_I2C1_Init+0x40>)
 8002b4a:	6063      	str	r3, [r4, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002b4c:	2500      	movs	r5, #0
 8002b4e:	60a5      	str	r5, [r4, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002b50:	2301      	movs	r3, #1
 8002b52:	60e3      	str	r3, [r4, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002b54:	6125      	str	r5, [r4, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002b56:	6165      	str	r5, [r4, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002b58:	61a5      	str	r5, [r4, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002b5a:	61e5      	str	r5, [r4, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002b5c:	6225      	str	r5, [r4, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002b5e:	4620      	mov	r0, r4
 8002b60:	f7fe f9ae 	bl	8000ec0 <HAL_I2C_Init>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002b64:	4629      	mov	r1, r5
 8002b66:	4620      	mov	r0, r4
 8002b68:	f7fe fb80 	bl	800126c <HAL_I2CEx_ConfigAnalogFilter>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002b6c:	4629      	mov	r1, r5
 8002b6e:	4620      	mov	r0, r4
 8002b70:	f7fe fbaa 	bl	80012c8 <HAL_I2CEx_ConfigDigitalFilter>
 8002b74:	bd38      	pop	{r3, r4, r5, pc}
 8002b76:	bf00      	nop
 8002b78:	2000022c 	.word	0x2000022c
 8002b7c:	40005400 	.word	0x40005400
 8002b80:	6000030d 	.word	0x6000030d

08002b84 <ADS1015_readADC_SingleEnded>:
{
 8002b84:	b510      	push	{r4, lr}
 8002b86:	b084      	sub	sp, #16
	switch (channel)
 8002b88:	2803      	cmp	r0, #3
 8002b8a:	d803      	bhi.n	8002b94 <ADS1015_readADC_SingleEnded+0x10>
 8002b8c:	e8df f000 	tbb	[pc, r0]
 8002b90:	0b08050e 	.word	0x0b08050e
	config |= ADS1015_REG_CONFIG_PGA_6_144V;
 8002b94:	f240 1383 	movw	r3, #387	; 0x183
 8002b98:	e00a      	b.n	8002bb0 <ADS1015_readADC_SingleEnded+0x2c>
			config |= ADS1015_REG_CONFIG_MUX_SINGLE_1;
 8002b9a:	f245 1383 	movw	r3, #20867	; 0x5183
		} break;
 8002b9e:	e007      	b.n	8002bb0 <ADS1015_readADC_SingleEnded+0x2c>
			config |= ADS1015_REG_CONFIG_MUX_SINGLE_2;
 8002ba0:	f246 1383 	movw	r3, #24963	; 0x6183
		} break;
 8002ba4:	e004      	b.n	8002bb0 <ADS1015_readADC_SingleEnded+0x2c>
			config |= ADS1015_REG_CONFIG_MUX_SINGLE_3;
 8002ba6:	f247 1383 	movw	r3, #29059	; 0x7183
		} break;
 8002baa:	e001      	b.n	8002bb0 <ADS1015_readADC_SingleEnded+0x2c>
			config |= ADS1015_REG_CONFIG_MUX_SINGLE_0;
 8002bac:	f244 1383 	movw	r3, #16771	; 0x4183
        config |= ADS1015_REG_CONFIG_OS_SINGLE;
 8002bb0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
        I2C_Buffer[0] = ADS1015_REG_POINTER_CONFIG;
 8002bb4:	2201      	movs	r2, #1
 8002bb6:	f88d 200c 	strb.w	r2, [sp, #12]
        I2C_Buffer[1] = ((config >> 8) & 0xff);
 8002bba:	0a1a      	lsrs	r2, r3, #8
 8002bbc:	f88d 200d 	strb.w	r2, [sp, #13]
        I2C_Buffer[2] = ((config >> 0) & 0xff);
 8002bc0:	f88d 300e 	strb.w	r3, [sp, #14]
        Tickstart = HAL_GetTick();
 8002bc4:	f7fd fd4a 	bl	800065c <HAL_GetTick>
 8002bc8:	4604      	mov	r4, r0
        HAL_I2C_Master_Transmit(&hi2c1, ADS1015_ADDRESS, &I2C_Buffer[0], 3, I2C_TX_TIMEOUT);
 8002bca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002bce:	9300      	str	r3, [sp, #0]
 8002bd0:	2303      	movs	r3, #3
 8002bd2:	aa03      	add	r2, sp, #12
 8002bd4:	2148      	movs	r1, #72	; 0x48
 8002bd6:	480b      	ldr	r0, [pc, #44]	; (8002c04 <ADS1015_readADC_SingleEnded+0x80>)
 8002bd8:	f7fe f9d0 	bl	8000f7c <HAL_I2C_Master_Transmit>
        while ((HAL_GetTick() - Tickstart) < 10);
 8002bdc:	f7fd fd3e 	bl	800065c <HAL_GetTick>
 8002be0:	1b00      	subs	r0, r0, r4
 8002be2:	2809      	cmp	r0, #9
 8002be4:	d9fa      	bls.n	8002bdc <ADS1015_readADC_SingleEnded+0x58>
        memset(&I2C_Buffer[0], 0, SIZE_OF_I2C_TX_BUFFER);
 8002be6:	2300      	movs	r3, #0
 8002be8:	9303      	str	r3, [sp, #12]
        HAL_I2C_Master_Receive(&hi2c1, ADS1015_ADDRESS, &I2C_Buffer[0], 2, 1000);
 8002bea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002bee:	9300      	str	r3, [sp, #0]
 8002bf0:	2302      	movs	r3, #2
 8002bf2:	aa03      	add	r2, sp, #12
 8002bf4:	2148      	movs	r1, #72	; 0x48
 8002bf6:	4803      	ldr	r0, [pc, #12]	; (8002c04 <ADS1015_readADC_SingleEnded+0x80>)
 8002bf8:	f7fe fa7c 	bl	80010f4 <HAL_I2C_Master_Receive>
}
 8002bfc:	f89d 000d 	ldrb.w	r0, [sp, #13]
 8002c00:	b004      	add	sp, #16
 8002c02:	bd10      	pop	{r4, pc}
 8002c04:	2000022c 	.word	0x2000022c

08002c08 <TestI2C_A2D>:
{
 8002c08:	b510      	push	{r4, lr}
	A2D_Data = ADS1015_readADC_SingleEnded(A2D_Channel);
 8002c0a:	f7ff ffbb 	bl	8002b84 <ADS1015_readADC_SingleEnded>
	sprintf(pPrintStr, "A2D %d\n\r", A2D_Data);
 8002c0e:	4c08      	ldr	r4, [pc, #32]	; (8002c30 <TestI2C_A2D+0x28>)
 8002c10:	4602      	mov	r2, r0
 8002c12:	4908      	ldr	r1, [pc, #32]	; (8002c34 <TestI2C_A2D+0x2c>)
 8002c14:	4620      	mov	r0, r4
 8002c16:	f000 fa47 	bl	80030a8 <siprintf>
	HAL_UART_Transmit(&huart3, (uint8_t *)pPrintStr, strlen(pPrintStr), 10);
 8002c1a:	4620      	mov	r0, r4
 8002c1c:	f7fd fb00 	bl	8000220 <strlen>
 8002c20:	230a      	movs	r3, #10
 8002c22:	b282      	uxth	r2, r0
 8002c24:	4621      	mov	r1, r4
 8002c26:	4804      	ldr	r0, [pc, #16]	; (8002c38 <TestI2C_A2D+0x30>)
 8002c28:	f7ff fc5c 	bl	80024e4 <HAL_UART_Transmit>
 8002c2c:	bd10      	pop	{r4, pc}
 8002c2e:	bf00      	nop
 8002c30:	20000008 	.word	0x20000008
 8002c34:	080038fc 	.word	0x080038fc
 8002c38:	200001ac 	.word	0x200001ac

08002c3c <SystemClock_Config>:
{
 8002c3c:	b530      	push	{r4, r5, lr}
 8002c3e:	b0b5      	sub	sp, #212	; 0xd4
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002c40:	2230      	movs	r2, #48	; 0x30
 8002c42:	2100      	movs	r1, #0
 8002c44:	a828      	add	r0, sp, #160	; 0xa0
 8002c46:	f000 fa27 	bl	8003098 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002c4a:	2400      	movs	r4, #0
 8002c4c:	9423      	str	r4, [sp, #140]	; 0x8c
 8002c4e:	9424      	str	r4, [sp, #144]	; 0x90
 8002c50:	9425      	str	r4, [sp, #148]	; 0x94
 8002c52:	9426      	str	r4, [sp, #152]	; 0x98
 8002c54:	9427      	str	r4, [sp, #156]	; 0x9c
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002c56:	2280      	movs	r2, #128	; 0x80
 8002c58:	4621      	mov	r1, r4
 8002c5a:	a803      	add	r0, sp, #12
 8002c5c:	f000 fa1c 	bl	8003098 <memset>
  HAL_PWR_EnableBkUpAccess();
 8002c60:	f7fe fc04 	bl	800146c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c64:	4b21      	ldr	r3, [pc, #132]	; (8002cec <SystemClock_Config+0xb0>)
 8002c66:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c68:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002c6c:	641a      	str	r2, [r3, #64]	; 0x40
 8002c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c74:	9301      	str	r3, [sp, #4]
 8002c76:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002c78:	4b1d      	ldr	r3, [pc, #116]	; (8002cf0 <SystemClock_Config+0xb4>)
 8002c7a:	681a      	ldr	r2, [r3, #0]
 8002c7c:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8002c80:	601a      	str	r2, [r3, #0]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002c88:	9302      	str	r3, [sp, #8]
 8002c8a:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	9328      	str	r3, [sp, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8002c90:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8002c94:	9329      	str	r3, [sp, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002c96:	2502      	movs	r5, #2
 8002c98:	952e      	str	r5, [sp, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002c9a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002c9e:	932f      	str	r3, [sp, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 25;
 8002ca0:	2319      	movs	r3, #25
 8002ca2:	9330      	str	r3, [sp, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 432;
 8002ca4:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8002ca8:	9331      	str	r3, [sp, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002caa:	9532      	str	r5, [sp, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8002cac:	2309      	movs	r3, #9
 8002cae:	9333      	str	r3, [sp, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002cb0:	a828      	add	r0, sp, #160	; 0xa0
 8002cb2:	f7fe fc21 	bl	80014f8 <HAL_RCC_OscConfig>
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002cb6:	f7fe fbe1 	bl	800147c <HAL_PWREx_EnableOverDrive>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002cba:	230f      	movs	r3, #15
 8002cbc:	9323      	str	r3, [sp, #140]	; 0x8c
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002cbe:	9524      	str	r5, [sp, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002cc0:	9425      	str	r4, [sp, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002cc2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002cc6:	9326      	str	r3, [sp, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002cc8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ccc:	9327      	str	r3, [sp, #156]	; 0x9c
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8002cce:	2107      	movs	r1, #7
 8002cd0:	a823      	add	r0, sp, #140	; 0x8c
 8002cd2:	f7fe fe65 	bl	80019a0 <HAL_RCC_ClockConfig>
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_I2C1
 8002cd6:	4b07      	ldr	r3, [pc, #28]	; (8002cf4 <SystemClock_Config+0xb8>)
 8002cd8:	9303      	str	r3, [sp, #12]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002cda:	9414      	str	r4, [sp, #80]	; 0x50
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002cdc:	941a      	str	r4, [sp, #104]	; 0x68
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8002cde:	9420      	str	r4, [sp, #128]	; 0x80
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002ce0:	a803      	add	r0, sp, #12
 8002ce2:	f7fe ff35 	bl	8001b50 <HAL_RCCEx_PeriphCLKConfig>
}
 8002ce6:	b035      	add	sp, #212	; 0xd4
 8002ce8:	bd30      	pop	{r4, r5, pc}
 8002cea:	bf00      	nop
 8002cec:	40023800 	.word	0x40023800
 8002cf0:	40007000 	.word	0x40007000
 8002cf4:	00204100 	.word	0x00204100

08002cf8 <main>:
{
 8002cf8:	b510      	push	{r4, lr}
  HAL_Init();
 8002cfa:	f7fd fc97 	bl	800062c <HAL_Init>
  SystemClock_Config();
 8002cfe:	f7ff ff9d 	bl	8002c3c <SystemClock_Config>
  MX_GPIO_Init();
 8002d02:	f7ff fe3d 	bl	8002980 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8002d06:	f7ff feb9 	bl	8002a7c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8002d0a:	f7ff fecf 	bl	8002aac <MX_USB_OTG_FS_PCD_Init>
  MX_ADC1_Init();
 8002d0e:	f7ff fee5 	bl	8002adc <MX_ADC1_Init>
  MX_I2C1_Init();
 8002d12:	f7ff ff15 	bl	8002b40 <MX_I2C1_Init>
unsigned char A2D_Channel = 0;
 8002d16:	2000      	movs	r0, #0
	  TestI2C_A2D((A2D_Channel++ & 0x03));
 8002d18:	1c44      	adds	r4, r0, #1
 8002d1a:	b2e4      	uxtb	r4, r4
 8002d1c:	f000 0003 	and.w	r0, r0, #3
 8002d20:	f7ff ff72 	bl	8002c08 <TestI2C_A2D>
 8002d24:	4620      	mov	r0, r4
 8002d26:	e7f7      	b.n	8002d18 <main+0x20>

08002d28 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002d28:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002d2a:	4b0a      	ldr	r3, [pc, #40]	; (8002d54 <HAL_MspInit+0x2c>)
 8002d2c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d2e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002d32:	641a      	str	r2, [r3, #64]	; 0x40
 8002d34:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d36:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8002d3a:	9200      	str	r2, [sp, #0]
 8002d3c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d3e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002d40:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002d44:	645a      	str	r2, [r3, #68]	; 0x44
 8002d46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d48:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d4c:	9301      	str	r3, [sp, #4]
 8002d4e:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002d50:	b002      	add	sp, #8
 8002d52:	4770      	bx	lr
 8002d54:	40023800 	.word	0x40023800

08002d58 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002d58:	b510      	push	{r4, lr}
 8002d5a:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	9303      	str	r3, [sp, #12]
 8002d60:	9304      	str	r3, [sp, #16]
 8002d62:	9305      	str	r3, [sp, #20]
 8002d64:	9306      	str	r3, [sp, #24]
 8002d66:	9307      	str	r3, [sp, #28]
  if(hadc->Instance==ADC1)
 8002d68:	6802      	ldr	r2, [r0, #0]
 8002d6a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002d6e:	f503 3390 	add.w	r3, r3, #73728	; 0x12000
 8002d72:	429a      	cmp	r2, r3
 8002d74:	d001      	beq.n	8002d7a <HAL_ADC_MspInit+0x22>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002d76:	b008      	add	sp, #32
 8002d78:	bd10      	pop	{r4, pc}
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002d7a:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 8002d7e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002d80:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d84:	645a      	str	r2, [r3, #68]	; 0x44
 8002d86:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002d88:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8002d8c:	9200      	str	r2, [sp, #0]
 8002d8e:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d90:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d92:	f042 0204 	orr.w	r2, r2, #4
 8002d96:	631a      	str	r2, [r3, #48]	; 0x30
 8002d98:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d9a:	f002 0204 	and.w	r2, r2, #4
 8002d9e:	9201      	str	r2, [sp, #4]
 8002da0:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002da2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002da4:	f042 0202 	orr.w	r2, r2, #2
 8002da8:	631a      	str	r2, [r3, #48]	; 0x30
 8002daa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dac:	f003 0302 	and.w	r3, r3, #2
 8002db0:	9302      	str	r3, [sp, #8]
 8002db2:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002db4:	2304      	movs	r3, #4
 8002db6:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002db8:	2403      	movs	r4, #3
 8002dba:	9404      	str	r4, [sp, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002dbc:	a903      	add	r1, sp, #12
 8002dbe:	4806      	ldr	r0, [pc, #24]	; (8002dd8 <HAL_ADC_MspInit+0x80>)
 8002dc0:	f7fd fe5a 	bl	8000a78 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002dc4:	2302      	movs	r3, #2
 8002dc6:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002dc8:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002dce:	a903      	add	r1, sp, #12
 8002dd0:	4802      	ldr	r0, [pc, #8]	; (8002ddc <HAL_ADC_MspInit+0x84>)
 8002dd2:	f7fd fe51 	bl	8000a78 <HAL_GPIO_Init>
}
 8002dd6:	e7ce      	b.n	8002d76 <HAL_ADC_MspInit+0x1e>
 8002dd8:	40020800 	.word	0x40020800
 8002ddc:	40020400 	.word	0x40020400

08002de0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002de0:	b510      	push	{r4, lr}
 8002de2:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002de4:	2300      	movs	r3, #0
 8002de6:	9303      	str	r3, [sp, #12]
 8002de8:	9304      	str	r3, [sp, #16]
 8002dea:	9305      	str	r3, [sp, #20]
 8002dec:	9306      	str	r3, [sp, #24]
 8002dee:	9307      	str	r3, [sp, #28]
  if(hi2c->Instance==I2C1)
 8002df0:	6802      	ldr	r2, [r0, #0]
 8002df2:	4b14      	ldr	r3, [pc, #80]	; (8002e44 <HAL_I2C_MspInit+0x64>)
 8002df4:	429a      	cmp	r2, r3
 8002df6:	d001      	beq.n	8002dfc <HAL_I2C_MspInit+0x1c>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002df8:	b008      	add	sp, #32
 8002dfa:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002dfc:	4c12      	ldr	r4, [pc, #72]	; (8002e48 <HAL_I2C_MspInit+0x68>)
 8002dfe:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002e00:	f043 0302 	orr.w	r3, r3, #2
 8002e04:	6323      	str	r3, [r4, #48]	; 0x30
 8002e06:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002e08:	f003 0302 	and.w	r3, r3, #2
 8002e0c:	9301      	str	r3, [sp, #4]
 8002e0e:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8002e10:	f44f 7310 	mov.w	r3, #576	; 0x240
 8002e14:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002e16:	2312      	movs	r3, #18
 8002e18:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e1e:	2303      	movs	r3, #3
 8002e20:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002e22:	2304      	movs	r3, #4
 8002e24:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e26:	a903      	add	r1, sp, #12
 8002e28:	4808      	ldr	r0, [pc, #32]	; (8002e4c <HAL_I2C_MspInit+0x6c>)
 8002e2a:	f7fd fe25 	bl	8000a78 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002e2e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002e30:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002e34:	6423      	str	r3, [r4, #64]	; 0x40
 8002e36:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002e38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e3c:	9302      	str	r3, [sp, #8]
 8002e3e:	9b02      	ldr	r3, [sp, #8]
}
 8002e40:	e7da      	b.n	8002df8 <HAL_I2C_MspInit+0x18>
 8002e42:	bf00      	nop
 8002e44:	40005400 	.word	0x40005400
 8002e48:	40023800 	.word	0x40023800
 8002e4c:	40020400 	.word	0x40020400

08002e50 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002e50:	b500      	push	{lr}
 8002e52:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e54:	2300      	movs	r3, #0
 8002e56:	9303      	str	r3, [sp, #12]
 8002e58:	9304      	str	r3, [sp, #16]
 8002e5a:	9305      	str	r3, [sp, #20]
 8002e5c:	9306      	str	r3, [sp, #24]
 8002e5e:	9307      	str	r3, [sp, #28]
  if(huart->Instance==USART3)
 8002e60:	6802      	ldr	r2, [r0, #0]
 8002e62:	4b14      	ldr	r3, [pc, #80]	; (8002eb4 <HAL_UART_MspInit+0x64>)
 8002e64:	429a      	cmp	r2, r3
 8002e66:	d002      	beq.n	8002e6e <HAL_UART_MspInit+0x1e>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002e68:	b009      	add	sp, #36	; 0x24
 8002e6a:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_USART3_CLK_ENABLE();
 8002e6e:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
 8002e72:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e74:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002e78:	641a      	str	r2, [r3, #64]	; 0x40
 8002e7a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e7c:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8002e80:	9201      	str	r2, [sp, #4]
 8002e82:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002e84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e86:	f042 0208 	orr.w	r2, r2, #8
 8002e8a:	631a      	str	r2, [r3, #48]	; 0x30
 8002e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e8e:	f003 0308 	and.w	r3, r3, #8
 8002e92:	9302      	str	r3, [sp, #8]
 8002e94:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002e96:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002e9a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e9c:	2302      	movs	r3, #2
 8002e9e:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ea0:	2303      	movs	r3, #3
 8002ea2:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002ea4:	2307      	movs	r3, #7
 8002ea6:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002ea8:	a903      	add	r1, sp, #12
 8002eaa:	4803      	ldr	r0, [pc, #12]	; (8002eb8 <HAL_UART_MspInit+0x68>)
 8002eac:	f7fd fde4 	bl	8000a78 <HAL_GPIO_Init>
}
 8002eb0:	e7da      	b.n	8002e68 <HAL_UART_MspInit+0x18>
 8002eb2:	bf00      	nop
 8002eb4:	40004800 	.word	0x40004800
 8002eb8:	40020c00 	.word	0x40020c00

08002ebc <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002ebc:	b530      	push	{r4, r5, lr}
 8002ebe:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	9303      	str	r3, [sp, #12]
 8002ec4:	9304      	str	r3, [sp, #16]
 8002ec6:	9305      	str	r3, [sp, #20]
 8002ec8:	9306      	str	r3, [sp, #24]
 8002eca:	9307      	str	r3, [sp, #28]
  if(hpcd->Instance==USB_OTG_FS)
 8002ecc:	6803      	ldr	r3, [r0, #0]
 8002ece:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ed2:	d001      	beq.n	8002ed8 <HAL_PCD_MspInit+0x1c>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8002ed4:	b009      	add	sp, #36	; 0x24
 8002ed6:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ed8:	4c1a      	ldr	r4, [pc, #104]	; (8002f44 <HAL_PCD_MspInit+0x88>)
 8002eda:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002edc:	f043 0301 	orr.w	r3, r3, #1
 8002ee0:	6323      	str	r3, [r4, #48]	; 0x30
 8002ee2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002ee4:	f003 0301 	and.w	r3, r3, #1
 8002ee8:	9300      	str	r3, [sp, #0]
 8002eea:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8002eec:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8002ef0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ef2:	2302      	movs	r3, #2
 8002ef4:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ef6:	2303      	movs	r3, #3
 8002ef8:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002efa:	230a      	movs	r3, #10
 8002efc:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002efe:	4d12      	ldr	r5, [pc, #72]	; (8002f48 <HAL_PCD_MspInit+0x8c>)
 8002f00:	a903      	add	r1, sp, #12
 8002f02:	4628      	mov	r0, r5
 8002f04:	f7fd fdb8 	bl	8000a78 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8002f08:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002f0c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f12:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002f14:	a903      	add	r1, sp, #12
 8002f16:	4628      	mov	r0, r5
 8002f18:	f7fd fdae 	bl	8000a78 <HAL_GPIO_Init>
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002f1c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002f1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f22:	6363      	str	r3, [r4, #52]	; 0x34
 8002f24:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002f26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f2a:	9301      	str	r3, [sp, #4]
 8002f2c:	9b01      	ldr	r3, [sp, #4]
 8002f2e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002f30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f34:	6463      	str	r3, [r4, #68]	; 0x44
 8002f36:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002f38:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f3c:	9302      	str	r3, [sp, #8]
 8002f3e:	9b02      	ldr	r3, [sp, #8]
}
 8002f40:	e7c8      	b.n	8002ed4 <HAL_PCD_MspInit+0x18>
 8002f42:	bf00      	nop
 8002f44:	40023800 	.word	0x40023800
 8002f48:	40020000 	.word	0x40020000

08002f4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002f4c:	4770      	bx	lr

08002f4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002f4e:	e7fe      	b.n	8002f4e <HardFault_Handler>

08002f50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002f50:	e7fe      	b.n	8002f50 <MemManage_Handler>

08002f52 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002f52:	e7fe      	b.n	8002f52 <BusFault_Handler>

08002f54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002f54:	e7fe      	b.n	8002f54 <UsageFault_Handler>

08002f56 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002f56:	4770      	bx	lr

08002f58 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002f58:	4770      	bx	lr

08002f5a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002f5a:	4770      	bx	lr

08002f5c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002f5c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002f5e:	f7fd fb71 	bl	8000644 <HAL_IncTick>
 8002f62:	bd08      	pop	{r3, pc}

08002f64 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8002f64:	b508      	push	{r3, lr}
 8002f66:	4603      	mov	r3, r0
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002f68:	4a0b      	ldr	r2, [pc, #44]	; (8002f98 <_sbrk+0x34>)
 8002f6a:	6812      	ldr	r2, [r2, #0]
 8002f6c:	b142      	cbz	r2, 8002f80 <_sbrk+0x1c>
		heap_end = &end;

	prev_heap_end = heap_end;
 8002f6e:	4a0a      	ldr	r2, [pc, #40]	; (8002f98 <_sbrk+0x34>)
 8002f70:	6810      	ldr	r0, [r2, #0]
	if (heap_end + incr > stack_ptr)
 8002f72:	4403      	add	r3, r0
 8002f74:	466a      	mov	r2, sp
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d806      	bhi.n	8002f88 <_sbrk+0x24>
//		abort();
		errno = ENOMEM;
		return (caddr_t) -1;
	}

	heap_end += incr;
 8002f7a:	4a07      	ldr	r2, [pc, #28]	; (8002f98 <_sbrk+0x34>)
 8002f7c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
}
 8002f7e:	bd08      	pop	{r3, pc}
		heap_end = &end;
 8002f80:	4906      	ldr	r1, [pc, #24]	; (8002f9c <_sbrk+0x38>)
 8002f82:	4a05      	ldr	r2, [pc, #20]	; (8002f98 <_sbrk+0x34>)
 8002f84:	6011      	str	r1, [r2, #0]
 8002f86:	e7f2      	b.n	8002f6e <_sbrk+0xa>
		errno = ENOMEM;
 8002f88:	f000 f85c 	bl	8003044 <__errno>
 8002f8c:	230c      	movs	r3, #12
 8002f8e:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8002f90:	f04f 30ff 	mov.w	r0, #4294967295
 8002f94:	bd08      	pop	{r3, pc}
 8002f96:	bf00      	nop
 8002f98:	2000019c 	.word	0x2000019c
 8002f9c:	200006c8 	.word	0x200006c8

08002fa0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002fa0:	b410      	push	{r4}
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002fa2:	4a0f      	ldr	r2, [pc, #60]	; (8002fe0 <SystemInit+0x40>)
 8002fa4:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002fa8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002fac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8002fb0:	4b0c      	ldr	r3, [pc, #48]	; (8002fe4 <SystemInit+0x44>)
 8002fb2:	6819      	ldr	r1, [r3, #0]
 8002fb4:	f041 0101 	orr.w	r1, r1, #1
 8002fb8:	6019      	str	r1, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002fba:	2000      	movs	r0, #0
 8002fbc:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8002fbe:	681c      	ldr	r4, [r3, #0]
 8002fc0:	4909      	ldr	r1, [pc, #36]	; (8002fe8 <SystemInit+0x48>)
 8002fc2:	4021      	ands	r1, r4
 8002fc4:	6019      	str	r1, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8002fc6:	4909      	ldr	r1, [pc, #36]	; (8002fec <SystemInit+0x4c>)
 8002fc8:	6059      	str	r1, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002fca:	6819      	ldr	r1, [r3, #0]
 8002fcc:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 8002fd0:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8002fd2:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002fd4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002fd8:	6093      	str	r3, [r2, #8]
#endif
}
 8002fda:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002fde:	4770      	bx	lr
 8002fe0:	e000ed00 	.word	0xe000ed00
 8002fe4:	40023800 	.word	0x40023800
 8002fe8:	fef6ffff 	.word	0xfef6ffff
 8002fec:	24003010 	.word	0x24003010

08002ff0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002ff0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003028 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002ff4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002ff6:	e003      	b.n	8003000 <LoopCopyDataInit>

08002ff8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002ff8:	4b0c      	ldr	r3, [pc, #48]	; (800302c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002ffa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002ffc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002ffe:	3104      	adds	r1, #4

08003000 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003000:	480b      	ldr	r0, [pc, #44]	; (8003030 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003002:	4b0c      	ldr	r3, [pc, #48]	; (8003034 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003004:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003006:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003008:	d3f6      	bcc.n	8002ff8 <CopyDataInit>
  ldr  r2, =_sbss
 800300a:	4a0b      	ldr	r2, [pc, #44]	; (8003038 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800300c:	e002      	b.n	8003014 <LoopFillZerobss>

0800300e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800300e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003010:	f842 3b04 	str.w	r3, [r2], #4

08003014 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003014:	4b09      	ldr	r3, [pc, #36]	; (800303c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003016:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003018:	d3f9      	bcc.n	800300e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800301a:	f7ff ffc1 	bl	8002fa0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800301e:	f000 f817 	bl	8003050 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003022:	f7ff fe69 	bl	8002cf8 <main>
  bx  lr    
 8003026:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003028:	20040000 	.word	0x20040000
  ldr  r3, =_sidata
 800302c:	08003964 	.word	0x08003964
  ldr  r0, =_sdata
 8003030:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003034:	20000170 	.word	0x20000170
  ldr  r2, =_sbss
 8003038:	20000170 	.word	0x20000170
  ldr  r3, = _ebss
 800303c:	200006c8 	.word	0x200006c8

08003040 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003040:	e7fe      	b.n	8003040 <ADC_IRQHandler>
	...

08003044 <__errno>:
 8003044:	4b01      	ldr	r3, [pc, #4]	; (800304c <__errno+0x8>)
 8003046:	6818      	ldr	r0, [r3, #0]
 8003048:	4770      	bx	lr
 800304a:	bf00      	nop
 800304c:	2000010c 	.word	0x2000010c

08003050 <__libc_init_array>:
 8003050:	b570      	push	{r4, r5, r6, lr}
 8003052:	4e0d      	ldr	r6, [pc, #52]	; (8003088 <__libc_init_array+0x38>)
 8003054:	4c0d      	ldr	r4, [pc, #52]	; (800308c <__libc_init_array+0x3c>)
 8003056:	1ba4      	subs	r4, r4, r6
 8003058:	10a4      	asrs	r4, r4, #2
 800305a:	2500      	movs	r5, #0
 800305c:	42a5      	cmp	r5, r4
 800305e:	d109      	bne.n	8003074 <__libc_init_array+0x24>
 8003060:	4e0b      	ldr	r6, [pc, #44]	; (8003090 <__libc_init_array+0x40>)
 8003062:	4c0c      	ldr	r4, [pc, #48]	; (8003094 <__libc_init_array+0x44>)
 8003064:	f000 fc3e 	bl	80038e4 <_init>
 8003068:	1ba4      	subs	r4, r4, r6
 800306a:	10a4      	asrs	r4, r4, #2
 800306c:	2500      	movs	r5, #0
 800306e:	42a5      	cmp	r5, r4
 8003070:	d105      	bne.n	800307e <__libc_init_array+0x2e>
 8003072:	bd70      	pop	{r4, r5, r6, pc}
 8003074:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003078:	4798      	blx	r3
 800307a:	3501      	adds	r5, #1
 800307c:	e7ee      	b.n	800305c <__libc_init_array+0xc>
 800307e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003082:	4798      	blx	r3
 8003084:	3501      	adds	r5, #1
 8003086:	e7f2      	b.n	800306e <__libc_init_array+0x1e>
 8003088:	0800395c 	.word	0x0800395c
 800308c:	0800395c 	.word	0x0800395c
 8003090:	0800395c 	.word	0x0800395c
 8003094:	08003960 	.word	0x08003960

08003098 <memset>:
 8003098:	4402      	add	r2, r0
 800309a:	4603      	mov	r3, r0
 800309c:	4293      	cmp	r3, r2
 800309e:	d100      	bne.n	80030a2 <memset+0xa>
 80030a0:	4770      	bx	lr
 80030a2:	f803 1b01 	strb.w	r1, [r3], #1
 80030a6:	e7f9      	b.n	800309c <memset+0x4>

080030a8 <siprintf>:
 80030a8:	b40e      	push	{r1, r2, r3}
 80030aa:	b500      	push	{lr}
 80030ac:	b09c      	sub	sp, #112	; 0x70
 80030ae:	f44f 7102 	mov.w	r1, #520	; 0x208
 80030b2:	ab1d      	add	r3, sp, #116	; 0x74
 80030b4:	f8ad 1014 	strh.w	r1, [sp, #20]
 80030b8:	9002      	str	r0, [sp, #8]
 80030ba:	9006      	str	r0, [sp, #24]
 80030bc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80030c0:	480a      	ldr	r0, [pc, #40]	; (80030ec <siprintf+0x44>)
 80030c2:	9104      	str	r1, [sp, #16]
 80030c4:	9107      	str	r1, [sp, #28]
 80030c6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80030ca:	f853 2b04 	ldr.w	r2, [r3], #4
 80030ce:	f8ad 1016 	strh.w	r1, [sp, #22]
 80030d2:	6800      	ldr	r0, [r0, #0]
 80030d4:	9301      	str	r3, [sp, #4]
 80030d6:	a902      	add	r1, sp, #8
 80030d8:	f000 f866 	bl	80031a8 <_svfiprintf_r>
 80030dc:	9b02      	ldr	r3, [sp, #8]
 80030de:	2200      	movs	r2, #0
 80030e0:	701a      	strb	r2, [r3, #0]
 80030e2:	b01c      	add	sp, #112	; 0x70
 80030e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80030e8:	b003      	add	sp, #12
 80030ea:	4770      	bx	lr
 80030ec:	2000010c 	.word	0x2000010c

080030f0 <__ssputs_r>:
 80030f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80030f4:	688e      	ldr	r6, [r1, #8]
 80030f6:	429e      	cmp	r6, r3
 80030f8:	4682      	mov	sl, r0
 80030fa:	460c      	mov	r4, r1
 80030fc:	4691      	mov	r9, r2
 80030fe:	4698      	mov	r8, r3
 8003100:	d835      	bhi.n	800316e <__ssputs_r+0x7e>
 8003102:	898a      	ldrh	r2, [r1, #12]
 8003104:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003108:	d031      	beq.n	800316e <__ssputs_r+0x7e>
 800310a:	6825      	ldr	r5, [r4, #0]
 800310c:	6909      	ldr	r1, [r1, #16]
 800310e:	1a6f      	subs	r7, r5, r1
 8003110:	6965      	ldr	r5, [r4, #20]
 8003112:	2302      	movs	r3, #2
 8003114:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003118:	fb95 f5f3 	sdiv	r5, r5, r3
 800311c:	f108 0301 	add.w	r3, r8, #1
 8003120:	443b      	add	r3, r7
 8003122:	429d      	cmp	r5, r3
 8003124:	bf38      	it	cc
 8003126:	461d      	movcc	r5, r3
 8003128:	0553      	lsls	r3, r2, #21
 800312a:	d531      	bpl.n	8003190 <__ssputs_r+0xa0>
 800312c:	4629      	mov	r1, r5
 800312e:	f000 fb39 	bl	80037a4 <_malloc_r>
 8003132:	4606      	mov	r6, r0
 8003134:	b950      	cbnz	r0, 800314c <__ssputs_r+0x5c>
 8003136:	230c      	movs	r3, #12
 8003138:	f8ca 3000 	str.w	r3, [sl]
 800313c:	89a3      	ldrh	r3, [r4, #12]
 800313e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003142:	81a3      	strh	r3, [r4, #12]
 8003144:	f04f 30ff 	mov.w	r0, #4294967295
 8003148:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800314c:	463a      	mov	r2, r7
 800314e:	6921      	ldr	r1, [r4, #16]
 8003150:	f000 fab4 	bl	80036bc <memcpy>
 8003154:	89a3      	ldrh	r3, [r4, #12]
 8003156:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800315a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800315e:	81a3      	strh	r3, [r4, #12]
 8003160:	6126      	str	r6, [r4, #16]
 8003162:	6165      	str	r5, [r4, #20]
 8003164:	443e      	add	r6, r7
 8003166:	1bed      	subs	r5, r5, r7
 8003168:	6026      	str	r6, [r4, #0]
 800316a:	60a5      	str	r5, [r4, #8]
 800316c:	4646      	mov	r6, r8
 800316e:	4546      	cmp	r6, r8
 8003170:	bf28      	it	cs
 8003172:	4646      	movcs	r6, r8
 8003174:	4632      	mov	r2, r6
 8003176:	4649      	mov	r1, r9
 8003178:	6820      	ldr	r0, [r4, #0]
 800317a:	f000 faaa 	bl	80036d2 <memmove>
 800317e:	68a3      	ldr	r3, [r4, #8]
 8003180:	1b9b      	subs	r3, r3, r6
 8003182:	60a3      	str	r3, [r4, #8]
 8003184:	6823      	ldr	r3, [r4, #0]
 8003186:	441e      	add	r6, r3
 8003188:	6026      	str	r6, [r4, #0]
 800318a:	2000      	movs	r0, #0
 800318c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003190:	462a      	mov	r2, r5
 8003192:	f000 fb65 	bl	8003860 <_realloc_r>
 8003196:	4606      	mov	r6, r0
 8003198:	2800      	cmp	r0, #0
 800319a:	d1e1      	bne.n	8003160 <__ssputs_r+0x70>
 800319c:	6921      	ldr	r1, [r4, #16]
 800319e:	4650      	mov	r0, sl
 80031a0:	f000 fab2 	bl	8003708 <_free_r>
 80031a4:	e7c7      	b.n	8003136 <__ssputs_r+0x46>
	...

080031a8 <_svfiprintf_r>:
 80031a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80031ac:	b09d      	sub	sp, #116	; 0x74
 80031ae:	4680      	mov	r8, r0
 80031b0:	9303      	str	r3, [sp, #12]
 80031b2:	898b      	ldrh	r3, [r1, #12]
 80031b4:	061c      	lsls	r4, r3, #24
 80031b6:	460d      	mov	r5, r1
 80031b8:	4616      	mov	r6, r2
 80031ba:	d50f      	bpl.n	80031dc <_svfiprintf_r+0x34>
 80031bc:	690b      	ldr	r3, [r1, #16]
 80031be:	b96b      	cbnz	r3, 80031dc <_svfiprintf_r+0x34>
 80031c0:	2140      	movs	r1, #64	; 0x40
 80031c2:	f000 faef 	bl	80037a4 <_malloc_r>
 80031c6:	6028      	str	r0, [r5, #0]
 80031c8:	6128      	str	r0, [r5, #16]
 80031ca:	b928      	cbnz	r0, 80031d8 <_svfiprintf_r+0x30>
 80031cc:	230c      	movs	r3, #12
 80031ce:	f8c8 3000 	str.w	r3, [r8]
 80031d2:	f04f 30ff 	mov.w	r0, #4294967295
 80031d6:	e0c5      	b.n	8003364 <_svfiprintf_r+0x1bc>
 80031d8:	2340      	movs	r3, #64	; 0x40
 80031da:	616b      	str	r3, [r5, #20]
 80031dc:	2300      	movs	r3, #0
 80031de:	9309      	str	r3, [sp, #36]	; 0x24
 80031e0:	2320      	movs	r3, #32
 80031e2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80031e6:	2330      	movs	r3, #48	; 0x30
 80031e8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80031ec:	f04f 0b01 	mov.w	fp, #1
 80031f0:	4637      	mov	r7, r6
 80031f2:	463c      	mov	r4, r7
 80031f4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d13c      	bne.n	8003276 <_svfiprintf_r+0xce>
 80031fc:	ebb7 0a06 	subs.w	sl, r7, r6
 8003200:	d00b      	beq.n	800321a <_svfiprintf_r+0x72>
 8003202:	4653      	mov	r3, sl
 8003204:	4632      	mov	r2, r6
 8003206:	4629      	mov	r1, r5
 8003208:	4640      	mov	r0, r8
 800320a:	f7ff ff71 	bl	80030f0 <__ssputs_r>
 800320e:	3001      	adds	r0, #1
 8003210:	f000 80a3 	beq.w	800335a <_svfiprintf_r+0x1b2>
 8003214:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003216:	4453      	add	r3, sl
 8003218:	9309      	str	r3, [sp, #36]	; 0x24
 800321a:	783b      	ldrb	r3, [r7, #0]
 800321c:	2b00      	cmp	r3, #0
 800321e:	f000 809c 	beq.w	800335a <_svfiprintf_r+0x1b2>
 8003222:	2300      	movs	r3, #0
 8003224:	f04f 32ff 	mov.w	r2, #4294967295
 8003228:	9304      	str	r3, [sp, #16]
 800322a:	9307      	str	r3, [sp, #28]
 800322c:	9205      	str	r2, [sp, #20]
 800322e:	9306      	str	r3, [sp, #24]
 8003230:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003234:	931a      	str	r3, [sp, #104]	; 0x68
 8003236:	2205      	movs	r2, #5
 8003238:	7821      	ldrb	r1, [r4, #0]
 800323a:	4850      	ldr	r0, [pc, #320]	; (800337c <_svfiprintf_r+0x1d4>)
 800323c:	f7fc fff8 	bl	8000230 <memchr>
 8003240:	1c67      	adds	r7, r4, #1
 8003242:	9b04      	ldr	r3, [sp, #16]
 8003244:	b9d8      	cbnz	r0, 800327e <_svfiprintf_r+0xd6>
 8003246:	06d9      	lsls	r1, r3, #27
 8003248:	bf44      	itt	mi
 800324a:	2220      	movmi	r2, #32
 800324c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003250:	071a      	lsls	r2, r3, #28
 8003252:	bf44      	itt	mi
 8003254:	222b      	movmi	r2, #43	; 0x2b
 8003256:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800325a:	7822      	ldrb	r2, [r4, #0]
 800325c:	2a2a      	cmp	r2, #42	; 0x2a
 800325e:	d016      	beq.n	800328e <_svfiprintf_r+0xe6>
 8003260:	9a07      	ldr	r2, [sp, #28]
 8003262:	2100      	movs	r1, #0
 8003264:	200a      	movs	r0, #10
 8003266:	4627      	mov	r7, r4
 8003268:	3401      	adds	r4, #1
 800326a:	783b      	ldrb	r3, [r7, #0]
 800326c:	3b30      	subs	r3, #48	; 0x30
 800326e:	2b09      	cmp	r3, #9
 8003270:	d951      	bls.n	8003316 <_svfiprintf_r+0x16e>
 8003272:	b1c9      	cbz	r1, 80032a8 <_svfiprintf_r+0x100>
 8003274:	e011      	b.n	800329a <_svfiprintf_r+0xf2>
 8003276:	2b25      	cmp	r3, #37	; 0x25
 8003278:	d0c0      	beq.n	80031fc <_svfiprintf_r+0x54>
 800327a:	4627      	mov	r7, r4
 800327c:	e7b9      	b.n	80031f2 <_svfiprintf_r+0x4a>
 800327e:	4a3f      	ldr	r2, [pc, #252]	; (800337c <_svfiprintf_r+0x1d4>)
 8003280:	1a80      	subs	r0, r0, r2
 8003282:	fa0b f000 	lsl.w	r0, fp, r0
 8003286:	4318      	orrs	r0, r3
 8003288:	9004      	str	r0, [sp, #16]
 800328a:	463c      	mov	r4, r7
 800328c:	e7d3      	b.n	8003236 <_svfiprintf_r+0x8e>
 800328e:	9a03      	ldr	r2, [sp, #12]
 8003290:	1d11      	adds	r1, r2, #4
 8003292:	6812      	ldr	r2, [r2, #0]
 8003294:	9103      	str	r1, [sp, #12]
 8003296:	2a00      	cmp	r2, #0
 8003298:	db01      	blt.n	800329e <_svfiprintf_r+0xf6>
 800329a:	9207      	str	r2, [sp, #28]
 800329c:	e004      	b.n	80032a8 <_svfiprintf_r+0x100>
 800329e:	4252      	negs	r2, r2
 80032a0:	f043 0302 	orr.w	r3, r3, #2
 80032a4:	9207      	str	r2, [sp, #28]
 80032a6:	9304      	str	r3, [sp, #16]
 80032a8:	783b      	ldrb	r3, [r7, #0]
 80032aa:	2b2e      	cmp	r3, #46	; 0x2e
 80032ac:	d10e      	bne.n	80032cc <_svfiprintf_r+0x124>
 80032ae:	787b      	ldrb	r3, [r7, #1]
 80032b0:	2b2a      	cmp	r3, #42	; 0x2a
 80032b2:	f107 0101 	add.w	r1, r7, #1
 80032b6:	d132      	bne.n	800331e <_svfiprintf_r+0x176>
 80032b8:	9b03      	ldr	r3, [sp, #12]
 80032ba:	1d1a      	adds	r2, r3, #4
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	9203      	str	r2, [sp, #12]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	bfb8      	it	lt
 80032c4:	f04f 33ff 	movlt.w	r3, #4294967295
 80032c8:	3702      	adds	r7, #2
 80032ca:	9305      	str	r3, [sp, #20]
 80032cc:	4c2c      	ldr	r4, [pc, #176]	; (8003380 <_svfiprintf_r+0x1d8>)
 80032ce:	7839      	ldrb	r1, [r7, #0]
 80032d0:	2203      	movs	r2, #3
 80032d2:	4620      	mov	r0, r4
 80032d4:	f7fc ffac 	bl	8000230 <memchr>
 80032d8:	b138      	cbz	r0, 80032ea <_svfiprintf_r+0x142>
 80032da:	2340      	movs	r3, #64	; 0x40
 80032dc:	1b00      	subs	r0, r0, r4
 80032de:	fa03 f000 	lsl.w	r0, r3, r0
 80032e2:	9b04      	ldr	r3, [sp, #16]
 80032e4:	4303      	orrs	r3, r0
 80032e6:	9304      	str	r3, [sp, #16]
 80032e8:	3701      	adds	r7, #1
 80032ea:	7839      	ldrb	r1, [r7, #0]
 80032ec:	4825      	ldr	r0, [pc, #148]	; (8003384 <_svfiprintf_r+0x1dc>)
 80032ee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80032f2:	2206      	movs	r2, #6
 80032f4:	1c7e      	adds	r6, r7, #1
 80032f6:	f7fc ff9b 	bl	8000230 <memchr>
 80032fa:	2800      	cmp	r0, #0
 80032fc:	d035      	beq.n	800336a <_svfiprintf_r+0x1c2>
 80032fe:	4b22      	ldr	r3, [pc, #136]	; (8003388 <_svfiprintf_r+0x1e0>)
 8003300:	b9fb      	cbnz	r3, 8003342 <_svfiprintf_r+0x19a>
 8003302:	9b03      	ldr	r3, [sp, #12]
 8003304:	3307      	adds	r3, #7
 8003306:	f023 0307 	bic.w	r3, r3, #7
 800330a:	3308      	adds	r3, #8
 800330c:	9303      	str	r3, [sp, #12]
 800330e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003310:	444b      	add	r3, r9
 8003312:	9309      	str	r3, [sp, #36]	; 0x24
 8003314:	e76c      	b.n	80031f0 <_svfiprintf_r+0x48>
 8003316:	fb00 3202 	mla	r2, r0, r2, r3
 800331a:	2101      	movs	r1, #1
 800331c:	e7a3      	b.n	8003266 <_svfiprintf_r+0xbe>
 800331e:	2300      	movs	r3, #0
 8003320:	9305      	str	r3, [sp, #20]
 8003322:	4618      	mov	r0, r3
 8003324:	240a      	movs	r4, #10
 8003326:	460f      	mov	r7, r1
 8003328:	3101      	adds	r1, #1
 800332a:	783a      	ldrb	r2, [r7, #0]
 800332c:	3a30      	subs	r2, #48	; 0x30
 800332e:	2a09      	cmp	r2, #9
 8003330:	d903      	bls.n	800333a <_svfiprintf_r+0x192>
 8003332:	2b00      	cmp	r3, #0
 8003334:	d0ca      	beq.n	80032cc <_svfiprintf_r+0x124>
 8003336:	9005      	str	r0, [sp, #20]
 8003338:	e7c8      	b.n	80032cc <_svfiprintf_r+0x124>
 800333a:	fb04 2000 	mla	r0, r4, r0, r2
 800333e:	2301      	movs	r3, #1
 8003340:	e7f1      	b.n	8003326 <_svfiprintf_r+0x17e>
 8003342:	ab03      	add	r3, sp, #12
 8003344:	9300      	str	r3, [sp, #0]
 8003346:	462a      	mov	r2, r5
 8003348:	4b10      	ldr	r3, [pc, #64]	; (800338c <_svfiprintf_r+0x1e4>)
 800334a:	a904      	add	r1, sp, #16
 800334c:	4640      	mov	r0, r8
 800334e:	f3af 8000 	nop.w
 8003352:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003356:	4681      	mov	r9, r0
 8003358:	d1d9      	bne.n	800330e <_svfiprintf_r+0x166>
 800335a:	89ab      	ldrh	r3, [r5, #12]
 800335c:	065b      	lsls	r3, r3, #25
 800335e:	f53f af38 	bmi.w	80031d2 <_svfiprintf_r+0x2a>
 8003362:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003364:	b01d      	add	sp, #116	; 0x74
 8003366:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800336a:	ab03      	add	r3, sp, #12
 800336c:	9300      	str	r3, [sp, #0]
 800336e:	462a      	mov	r2, r5
 8003370:	4b06      	ldr	r3, [pc, #24]	; (800338c <_svfiprintf_r+0x1e4>)
 8003372:	a904      	add	r1, sp, #16
 8003374:	4640      	mov	r0, r8
 8003376:	f000 f881 	bl	800347c <_printf_i>
 800337a:	e7ea      	b.n	8003352 <_svfiprintf_r+0x1aa>
 800337c:	08003920 	.word	0x08003920
 8003380:	08003926 	.word	0x08003926
 8003384:	0800392a 	.word	0x0800392a
 8003388:	00000000 	.word	0x00000000
 800338c:	080030f1 	.word	0x080030f1

08003390 <_printf_common>:
 8003390:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003394:	4691      	mov	r9, r2
 8003396:	461f      	mov	r7, r3
 8003398:	688a      	ldr	r2, [r1, #8]
 800339a:	690b      	ldr	r3, [r1, #16]
 800339c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80033a0:	4293      	cmp	r3, r2
 80033a2:	bfb8      	it	lt
 80033a4:	4613      	movlt	r3, r2
 80033a6:	f8c9 3000 	str.w	r3, [r9]
 80033aa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80033ae:	4606      	mov	r6, r0
 80033b0:	460c      	mov	r4, r1
 80033b2:	b112      	cbz	r2, 80033ba <_printf_common+0x2a>
 80033b4:	3301      	adds	r3, #1
 80033b6:	f8c9 3000 	str.w	r3, [r9]
 80033ba:	6823      	ldr	r3, [r4, #0]
 80033bc:	0699      	lsls	r1, r3, #26
 80033be:	bf42      	ittt	mi
 80033c0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80033c4:	3302      	addmi	r3, #2
 80033c6:	f8c9 3000 	strmi.w	r3, [r9]
 80033ca:	6825      	ldr	r5, [r4, #0]
 80033cc:	f015 0506 	ands.w	r5, r5, #6
 80033d0:	d107      	bne.n	80033e2 <_printf_common+0x52>
 80033d2:	f104 0a19 	add.w	sl, r4, #25
 80033d6:	68e3      	ldr	r3, [r4, #12]
 80033d8:	f8d9 2000 	ldr.w	r2, [r9]
 80033dc:	1a9b      	subs	r3, r3, r2
 80033de:	429d      	cmp	r5, r3
 80033e0:	db29      	blt.n	8003436 <_printf_common+0xa6>
 80033e2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80033e6:	6822      	ldr	r2, [r4, #0]
 80033e8:	3300      	adds	r3, #0
 80033ea:	bf18      	it	ne
 80033ec:	2301      	movne	r3, #1
 80033ee:	0692      	lsls	r2, r2, #26
 80033f0:	d42e      	bmi.n	8003450 <_printf_common+0xc0>
 80033f2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80033f6:	4639      	mov	r1, r7
 80033f8:	4630      	mov	r0, r6
 80033fa:	47c0      	blx	r8
 80033fc:	3001      	adds	r0, #1
 80033fe:	d021      	beq.n	8003444 <_printf_common+0xb4>
 8003400:	6823      	ldr	r3, [r4, #0]
 8003402:	68e5      	ldr	r5, [r4, #12]
 8003404:	f8d9 2000 	ldr.w	r2, [r9]
 8003408:	f003 0306 	and.w	r3, r3, #6
 800340c:	2b04      	cmp	r3, #4
 800340e:	bf08      	it	eq
 8003410:	1aad      	subeq	r5, r5, r2
 8003412:	68a3      	ldr	r3, [r4, #8]
 8003414:	6922      	ldr	r2, [r4, #16]
 8003416:	bf0c      	ite	eq
 8003418:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800341c:	2500      	movne	r5, #0
 800341e:	4293      	cmp	r3, r2
 8003420:	bfc4      	itt	gt
 8003422:	1a9b      	subgt	r3, r3, r2
 8003424:	18ed      	addgt	r5, r5, r3
 8003426:	f04f 0900 	mov.w	r9, #0
 800342a:	341a      	adds	r4, #26
 800342c:	454d      	cmp	r5, r9
 800342e:	d11b      	bne.n	8003468 <_printf_common+0xd8>
 8003430:	2000      	movs	r0, #0
 8003432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003436:	2301      	movs	r3, #1
 8003438:	4652      	mov	r2, sl
 800343a:	4639      	mov	r1, r7
 800343c:	4630      	mov	r0, r6
 800343e:	47c0      	blx	r8
 8003440:	3001      	adds	r0, #1
 8003442:	d103      	bne.n	800344c <_printf_common+0xbc>
 8003444:	f04f 30ff 	mov.w	r0, #4294967295
 8003448:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800344c:	3501      	adds	r5, #1
 800344e:	e7c2      	b.n	80033d6 <_printf_common+0x46>
 8003450:	18e1      	adds	r1, r4, r3
 8003452:	1c5a      	adds	r2, r3, #1
 8003454:	2030      	movs	r0, #48	; 0x30
 8003456:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800345a:	4422      	add	r2, r4
 800345c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003460:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003464:	3302      	adds	r3, #2
 8003466:	e7c4      	b.n	80033f2 <_printf_common+0x62>
 8003468:	2301      	movs	r3, #1
 800346a:	4622      	mov	r2, r4
 800346c:	4639      	mov	r1, r7
 800346e:	4630      	mov	r0, r6
 8003470:	47c0      	blx	r8
 8003472:	3001      	adds	r0, #1
 8003474:	d0e6      	beq.n	8003444 <_printf_common+0xb4>
 8003476:	f109 0901 	add.w	r9, r9, #1
 800347a:	e7d7      	b.n	800342c <_printf_common+0x9c>

0800347c <_printf_i>:
 800347c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003480:	4617      	mov	r7, r2
 8003482:	7e0a      	ldrb	r2, [r1, #24]
 8003484:	b085      	sub	sp, #20
 8003486:	2a6e      	cmp	r2, #110	; 0x6e
 8003488:	4698      	mov	r8, r3
 800348a:	4606      	mov	r6, r0
 800348c:	460c      	mov	r4, r1
 800348e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003490:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8003494:	f000 80bc 	beq.w	8003610 <_printf_i+0x194>
 8003498:	d81a      	bhi.n	80034d0 <_printf_i+0x54>
 800349a:	2a63      	cmp	r2, #99	; 0x63
 800349c:	d02e      	beq.n	80034fc <_printf_i+0x80>
 800349e:	d80a      	bhi.n	80034b6 <_printf_i+0x3a>
 80034a0:	2a00      	cmp	r2, #0
 80034a2:	f000 80c8 	beq.w	8003636 <_printf_i+0x1ba>
 80034a6:	2a58      	cmp	r2, #88	; 0x58
 80034a8:	f000 808a 	beq.w	80035c0 <_printf_i+0x144>
 80034ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80034b0:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 80034b4:	e02a      	b.n	800350c <_printf_i+0x90>
 80034b6:	2a64      	cmp	r2, #100	; 0x64
 80034b8:	d001      	beq.n	80034be <_printf_i+0x42>
 80034ba:	2a69      	cmp	r2, #105	; 0x69
 80034bc:	d1f6      	bne.n	80034ac <_printf_i+0x30>
 80034be:	6821      	ldr	r1, [r4, #0]
 80034c0:	681a      	ldr	r2, [r3, #0]
 80034c2:	f011 0f80 	tst.w	r1, #128	; 0x80
 80034c6:	d023      	beq.n	8003510 <_printf_i+0x94>
 80034c8:	1d11      	adds	r1, r2, #4
 80034ca:	6019      	str	r1, [r3, #0]
 80034cc:	6813      	ldr	r3, [r2, #0]
 80034ce:	e027      	b.n	8003520 <_printf_i+0xa4>
 80034d0:	2a73      	cmp	r2, #115	; 0x73
 80034d2:	f000 80b4 	beq.w	800363e <_printf_i+0x1c2>
 80034d6:	d808      	bhi.n	80034ea <_printf_i+0x6e>
 80034d8:	2a6f      	cmp	r2, #111	; 0x6f
 80034da:	d02a      	beq.n	8003532 <_printf_i+0xb6>
 80034dc:	2a70      	cmp	r2, #112	; 0x70
 80034de:	d1e5      	bne.n	80034ac <_printf_i+0x30>
 80034e0:	680a      	ldr	r2, [r1, #0]
 80034e2:	f042 0220 	orr.w	r2, r2, #32
 80034e6:	600a      	str	r2, [r1, #0]
 80034e8:	e003      	b.n	80034f2 <_printf_i+0x76>
 80034ea:	2a75      	cmp	r2, #117	; 0x75
 80034ec:	d021      	beq.n	8003532 <_printf_i+0xb6>
 80034ee:	2a78      	cmp	r2, #120	; 0x78
 80034f0:	d1dc      	bne.n	80034ac <_printf_i+0x30>
 80034f2:	2278      	movs	r2, #120	; 0x78
 80034f4:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 80034f8:	496e      	ldr	r1, [pc, #440]	; (80036b4 <_printf_i+0x238>)
 80034fa:	e064      	b.n	80035c6 <_printf_i+0x14a>
 80034fc:	681a      	ldr	r2, [r3, #0]
 80034fe:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8003502:	1d11      	adds	r1, r2, #4
 8003504:	6019      	str	r1, [r3, #0]
 8003506:	6813      	ldr	r3, [r2, #0]
 8003508:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800350c:	2301      	movs	r3, #1
 800350e:	e0a3      	b.n	8003658 <_printf_i+0x1dc>
 8003510:	f011 0f40 	tst.w	r1, #64	; 0x40
 8003514:	f102 0104 	add.w	r1, r2, #4
 8003518:	6019      	str	r1, [r3, #0]
 800351a:	d0d7      	beq.n	80034cc <_printf_i+0x50>
 800351c:	f9b2 3000 	ldrsh.w	r3, [r2]
 8003520:	2b00      	cmp	r3, #0
 8003522:	da03      	bge.n	800352c <_printf_i+0xb0>
 8003524:	222d      	movs	r2, #45	; 0x2d
 8003526:	425b      	negs	r3, r3
 8003528:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800352c:	4962      	ldr	r1, [pc, #392]	; (80036b8 <_printf_i+0x23c>)
 800352e:	220a      	movs	r2, #10
 8003530:	e017      	b.n	8003562 <_printf_i+0xe6>
 8003532:	6820      	ldr	r0, [r4, #0]
 8003534:	6819      	ldr	r1, [r3, #0]
 8003536:	f010 0f80 	tst.w	r0, #128	; 0x80
 800353a:	d003      	beq.n	8003544 <_printf_i+0xc8>
 800353c:	1d08      	adds	r0, r1, #4
 800353e:	6018      	str	r0, [r3, #0]
 8003540:	680b      	ldr	r3, [r1, #0]
 8003542:	e006      	b.n	8003552 <_printf_i+0xd6>
 8003544:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003548:	f101 0004 	add.w	r0, r1, #4
 800354c:	6018      	str	r0, [r3, #0]
 800354e:	d0f7      	beq.n	8003540 <_printf_i+0xc4>
 8003550:	880b      	ldrh	r3, [r1, #0]
 8003552:	4959      	ldr	r1, [pc, #356]	; (80036b8 <_printf_i+0x23c>)
 8003554:	2a6f      	cmp	r2, #111	; 0x6f
 8003556:	bf14      	ite	ne
 8003558:	220a      	movne	r2, #10
 800355a:	2208      	moveq	r2, #8
 800355c:	2000      	movs	r0, #0
 800355e:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8003562:	6865      	ldr	r5, [r4, #4]
 8003564:	60a5      	str	r5, [r4, #8]
 8003566:	2d00      	cmp	r5, #0
 8003568:	f2c0 809c 	blt.w	80036a4 <_printf_i+0x228>
 800356c:	6820      	ldr	r0, [r4, #0]
 800356e:	f020 0004 	bic.w	r0, r0, #4
 8003572:	6020      	str	r0, [r4, #0]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d13f      	bne.n	80035f8 <_printf_i+0x17c>
 8003578:	2d00      	cmp	r5, #0
 800357a:	f040 8095 	bne.w	80036a8 <_printf_i+0x22c>
 800357e:	4675      	mov	r5, lr
 8003580:	2a08      	cmp	r2, #8
 8003582:	d10b      	bne.n	800359c <_printf_i+0x120>
 8003584:	6823      	ldr	r3, [r4, #0]
 8003586:	07da      	lsls	r2, r3, #31
 8003588:	d508      	bpl.n	800359c <_printf_i+0x120>
 800358a:	6923      	ldr	r3, [r4, #16]
 800358c:	6862      	ldr	r2, [r4, #4]
 800358e:	429a      	cmp	r2, r3
 8003590:	bfde      	ittt	le
 8003592:	2330      	movle	r3, #48	; 0x30
 8003594:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003598:	f105 35ff 	addle.w	r5, r5, #4294967295
 800359c:	ebae 0305 	sub.w	r3, lr, r5
 80035a0:	6123      	str	r3, [r4, #16]
 80035a2:	f8cd 8000 	str.w	r8, [sp]
 80035a6:	463b      	mov	r3, r7
 80035a8:	aa03      	add	r2, sp, #12
 80035aa:	4621      	mov	r1, r4
 80035ac:	4630      	mov	r0, r6
 80035ae:	f7ff feef 	bl	8003390 <_printf_common>
 80035b2:	3001      	adds	r0, #1
 80035b4:	d155      	bne.n	8003662 <_printf_i+0x1e6>
 80035b6:	f04f 30ff 	mov.w	r0, #4294967295
 80035ba:	b005      	add	sp, #20
 80035bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80035c0:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 80035c4:	493c      	ldr	r1, [pc, #240]	; (80036b8 <_printf_i+0x23c>)
 80035c6:	6822      	ldr	r2, [r4, #0]
 80035c8:	6818      	ldr	r0, [r3, #0]
 80035ca:	f012 0f80 	tst.w	r2, #128	; 0x80
 80035ce:	f100 0504 	add.w	r5, r0, #4
 80035d2:	601d      	str	r5, [r3, #0]
 80035d4:	d001      	beq.n	80035da <_printf_i+0x15e>
 80035d6:	6803      	ldr	r3, [r0, #0]
 80035d8:	e002      	b.n	80035e0 <_printf_i+0x164>
 80035da:	0655      	lsls	r5, r2, #25
 80035dc:	d5fb      	bpl.n	80035d6 <_printf_i+0x15a>
 80035de:	8803      	ldrh	r3, [r0, #0]
 80035e0:	07d0      	lsls	r0, r2, #31
 80035e2:	bf44      	itt	mi
 80035e4:	f042 0220 	orrmi.w	r2, r2, #32
 80035e8:	6022      	strmi	r2, [r4, #0]
 80035ea:	b91b      	cbnz	r3, 80035f4 <_printf_i+0x178>
 80035ec:	6822      	ldr	r2, [r4, #0]
 80035ee:	f022 0220 	bic.w	r2, r2, #32
 80035f2:	6022      	str	r2, [r4, #0]
 80035f4:	2210      	movs	r2, #16
 80035f6:	e7b1      	b.n	800355c <_printf_i+0xe0>
 80035f8:	4675      	mov	r5, lr
 80035fa:	fbb3 f0f2 	udiv	r0, r3, r2
 80035fe:	fb02 3310 	mls	r3, r2, r0, r3
 8003602:	5ccb      	ldrb	r3, [r1, r3]
 8003604:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003608:	4603      	mov	r3, r0
 800360a:	2800      	cmp	r0, #0
 800360c:	d1f5      	bne.n	80035fa <_printf_i+0x17e>
 800360e:	e7b7      	b.n	8003580 <_printf_i+0x104>
 8003610:	6808      	ldr	r0, [r1, #0]
 8003612:	681a      	ldr	r2, [r3, #0]
 8003614:	6949      	ldr	r1, [r1, #20]
 8003616:	f010 0f80 	tst.w	r0, #128	; 0x80
 800361a:	d004      	beq.n	8003626 <_printf_i+0x1aa>
 800361c:	1d10      	adds	r0, r2, #4
 800361e:	6018      	str	r0, [r3, #0]
 8003620:	6813      	ldr	r3, [r2, #0]
 8003622:	6019      	str	r1, [r3, #0]
 8003624:	e007      	b.n	8003636 <_printf_i+0x1ba>
 8003626:	f010 0f40 	tst.w	r0, #64	; 0x40
 800362a:	f102 0004 	add.w	r0, r2, #4
 800362e:	6018      	str	r0, [r3, #0]
 8003630:	6813      	ldr	r3, [r2, #0]
 8003632:	d0f6      	beq.n	8003622 <_printf_i+0x1a6>
 8003634:	8019      	strh	r1, [r3, #0]
 8003636:	2300      	movs	r3, #0
 8003638:	6123      	str	r3, [r4, #16]
 800363a:	4675      	mov	r5, lr
 800363c:	e7b1      	b.n	80035a2 <_printf_i+0x126>
 800363e:	681a      	ldr	r2, [r3, #0]
 8003640:	1d11      	adds	r1, r2, #4
 8003642:	6019      	str	r1, [r3, #0]
 8003644:	6815      	ldr	r5, [r2, #0]
 8003646:	6862      	ldr	r2, [r4, #4]
 8003648:	2100      	movs	r1, #0
 800364a:	4628      	mov	r0, r5
 800364c:	f7fc fdf0 	bl	8000230 <memchr>
 8003650:	b108      	cbz	r0, 8003656 <_printf_i+0x1da>
 8003652:	1b40      	subs	r0, r0, r5
 8003654:	6060      	str	r0, [r4, #4]
 8003656:	6863      	ldr	r3, [r4, #4]
 8003658:	6123      	str	r3, [r4, #16]
 800365a:	2300      	movs	r3, #0
 800365c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003660:	e79f      	b.n	80035a2 <_printf_i+0x126>
 8003662:	6923      	ldr	r3, [r4, #16]
 8003664:	462a      	mov	r2, r5
 8003666:	4639      	mov	r1, r7
 8003668:	4630      	mov	r0, r6
 800366a:	47c0      	blx	r8
 800366c:	3001      	adds	r0, #1
 800366e:	d0a2      	beq.n	80035b6 <_printf_i+0x13a>
 8003670:	6823      	ldr	r3, [r4, #0]
 8003672:	079b      	lsls	r3, r3, #30
 8003674:	d507      	bpl.n	8003686 <_printf_i+0x20a>
 8003676:	2500      	movs	r5, #0
 8003678:	f104 0919 	add.w	r9, r4, #25
 800367c:	68e3      	ldr	r3, [r4, #12]
 800367e:	9a03      	ldr	r2, [sp, #12]
 8003680:	1a9b      	subs	r3, r3, r2
 8003682:	429d      	cmp	r5, r3
 8003684:	db05      	blt.n	8003692 <_printf_i+0x216>
 8003686:	68e0      	ldr	r0, [r4, #12]
 8003688:	9b03      	ldr	r3, [sp, #12]
 800368a:	4298      	cmp	r0, r3
 800368c:	bfb8      	it	lt
 800368e:	4618      	movlt	r0, r3
 8003690:	e793      	b.n	80035ba <_printf_i+0x13e>
 8003692:	2301      	movs	r3, #1
 8003694:	464a      	mov	r2, r9
 8003696:	4639      	mov	r1, r7
 8003698:	4630      	mov	r0, r6
 800369a:	47c0      	blx	r8
 800369c:	3001      	adds	r0, #1
 800369e:	d08a      	beq.n	80035b6 <_printf_i+0x13a>
 80036a0:	3501      	adds	r5, #1
 80036a2:	e7eb      	b.n	800367c <_printf_i+0x200>
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d1a7      	bne.n	80035f8 <_printf_i+0x17c>
 80036a8:	780b      	ldrb	r3, [r1, #0]
 80036aa:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80036ae:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80036b2:	e765      	b.n	8003580 <_printf_i+0x104>
 80036b4:	08003942 	.word	0x08003942
 80036b8:	08003931 	.word	0x08003931

080036bc <memcpy>:
 80036bc:	b510      	push	{r4, lr}
 80036be:	1e43      	subs	r3, r0, #1
 80036c0:	440a      	add	r2, r1
 80036c2:	4291      	cmp	r1, r2
 80036c4:	d100      	bne.n	80036c8 <memcpy+0xc>
 80036c6:	bd10      	pop	{r4, pc}
 80036c8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80036cc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80036d0:	e7f7      	b.n	80036c2 <memcpy+0x6>

080036d2 <memmove>:
 80036d2:	4288      	cmp	r0, r1
 80036d4:	b510      	push	{r4, lr}
 80036d6:	eb01 0302 	add.w	r3, r1, r2
 80036da:	d803      	bhi.n	80036e4 <memmove+0x12>
 80036dc:	1e42      	subs	r2, r0, #1
 80036de:	4299      	cmp	r1, r3
 80036e0:	d10c      	bne.n	80036fc <memmove+0x2a>
 80036e2:	bd10      	pop	{r4, pc}
 80036e4:	4298      	cmp	r0, r3
 80036e6:	d2f9      	bcs.n	80036dc <memmove+0xa>
 80036e8:	1881      	adds	r1, r0, r2
 80036ea:	1ad2      	subs	r2, r2, r3
 80036ec:	42d3      	cmn	r3, r2
 80036ee:	d100      	bne.n	80036f2 <memmove+0x20>
 80036f0:	bd10      	pop	{r4, pc}
 80036f2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80036f6:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80036fa:	e7f7      	b.n	80036ec <memmove+0x1a>
 80036fc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003700:	f802 4f01 	strb.w	r4, [r2, #1]!
 8003704:	e7eb      	b.n	80036de <memmove+0xc>
	...

08003708 <_free_r>:
 8003708:	b538      	push	{r3, r4, r5, lr}
 800370a:	4605      	mov	r5, r0
 800370c:	2900      	cmp	r1, #0
 800370e:	d045      	beq.n	800379c <_free_r+0x94>
 8003710:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003714:	1f0c      	subs	r4, r1, #4
 8003716:	2b00      	cmp	r3, #0
 8003718:	bfb8      	it	lt
 800371a:	18e4      	addlt	r4, r4, r3
 800371c:	f000 f8d6 	bl	80038cc <__malloc_lock>
 8003720:	4a1f      	ldr	r2, [pc, #124]	; (80037a0 <_free_r+0x98>)
 8003722:	6813      	ldr	r3, [r2, #0]
 8003724:	4610      	mov	r0, r2
 8003726:	b933      	cbnz	r3, 8003736 <_free_r+0x2e>
 8003728:	6063      	str	r3, [r4, #4]
 800372a:	6014      	str	r4, [r2, #0]
 800372c:	4628      	mov	r0, r5
 800372e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003732:	f000 b8cc 	b.w	80038ce <__malloc_unlock>
 8003736:	42a3      	cmp	r3, r4
 8003738:	d90c      	bls.n	8003754 <_free_r+0x4c>
 800373a:	6821      	ldr	r1, [r4, #0]
 800373c:	1862      	adds	r2, r4, r1
 800373e:	4293      	cmp	r3, r2
 8003740:	bf04      	itt	eq
 8003742:	681a      	ldreq	r2, [r3, #0]
 8003744:	685b      	ldreq	r3, [r3, #4]
 8003746:	6063      	str	r3, [r4, #4]
 8003748:	bf04      	itt	eq
 800374a:	1852      	addeq	r2, r2, r1
 800374c:	6022      	streq	r2, [r4, #0]
 800374e:	6004      	str	r4, [r0, #0]
 8003750:	e7ec      	b.n	800372c <_free_r+0x24>
 8003752:	4613      	mov	r3, r2
 8003754:	685a      	ldr	r2, [r3, #4]
 8003756:	b10a      	cbz	r2, 800375c <_free_r+0x54>
 8003758:	42a2      	cmp	r2, r4
 800375a:	d9fa      	bls.n	8003752 <_free_r+0x4a>
 800375c:	6819      	ldr	r1, [r3, #0]
 800375e:	1858      	adds	r0, r3, r1
 8003760:	42a0      	cmp	r0, r4
 8003762:	d10b      	bne.n	800377c <_free_r+0x74>
 8003764:	6820      	ldr	r0, [r4, #0]
 8003766:	4401      	add	r1, r0
 8003768:	1858      	adds	r0, r3, r1
 800376a:	4282      	cmp	r2, r0
 800376c:	6019      	str	r1, [r3, #0]
 800376e:	d1dd      	bne.n	800372c <_free_r+0x24>
 8003770:	6810      	ldr	r0, [r2, #0]
 8003772:	6852      	ldr	r2, [r2, #4]
 8003774:	605a      	str	r2, [r3, #4]
 8003776:	4401      	add	r1, r0
 8003778:	6019      	str	r1, [r3, #0]
 800377a:	e7d7      	b.n	800372c <_free_r+0x24>
 800377c:	d902      	bls.n	8003784 <_free_r+0x7c>
 800377e:	230c      	movs	r3, #12
 8003780:	602b      	str	r3, [r5, #0]
 8003782:	e7d3      	b.n	800372c <_free_r+0x24>
 8003784:	6820      	ldr	r0, [r4, #0]
 8003786:	1821      	adds	r1, r4, r0
 8003788:	428a      	cmp	r2, r1
 800378a:	bf04      	itt	eq
 800378c:	6811      	ldreq	r1, [r2, #0]
 800378e:	6852      	ldreq	r2, [r2, #4]
 8003790:	6062      	str	r2, [r4, #4]
 8003792:	bf04      	itt	eq
 8003794:	1809      	addeq	r1, r1, r0
 8003796:	6021      	streq	r1, [r4, #0]
 8003798:	605c      	str	r4, [r3, #4]
 800379a:	e7c7      	b.n	800372c <_free_r+0x24>
 800379c:	bd38      	pop	{r3, r4, r5, pc}
 800379e:	bf00      	nop
 80037a0:	200001a0 	.word	0x200001a0

080037a4 <_malloc_r>:
 80037a4:	b570      	push	{r4, r5, r6, lr}
 80037a6:	1ccd      	adds	r5, r1, #3
 80037a8:	f025 0503 	bic.w	r5, r5, #3
 80037ac:	3508      	adds	r5, #8
 80037ae:	2d0c      	cmp	r5, #12
 80037b0:	bf38      	it	cc
 80037b2:	250c      	movcc	r5, #12
 80037b4:	2d00      	cmp	r5, #0
 80037b6:	4606      	mov	r6, r0
 80037b8:	db01      	blt.n	80037be <_malloc_r+0x1a>
 80037ba:	42a9      	cmp	r1, r5
 80037bc:	d903      	bls.n	80037c6 <_malloc_r+0x22>
 80037be:	230c      	movs	r3, #12
 80037c0:	6033      	str	r3, [r6, #0]
 80037c2:	2000      	movs	r0, #0
 80037c4:	bd70      	pop	{r4, r5, r6, pc}
 80037c6:	f000 f881 	bl	80038cc <__malloc_lock>
 80037ca:	4a23      	ldr	r2, [pc, #140]	; (8003858 <_malloc_r+0xb4>)
 80037cc:	6814      	ldr	r4, [r2, #0]
 80037ce:	4621      	mov	r1, r4
 80037d0:	b991      	cbnz	r1, 80037f8 <_malloc_r+0x54>
 80037d2:	4c22      	ldr	r4, [pc, #136]	; (800385c <_malloc_r+0xb8>)
 80037d4:	6823      	ldr	r3, [r4, #0]
 80037d6:	b91b      	cbnz	r3, 80037e0 <_malloc_r+0x3c>
 80037d8:	4630      	mov	r0, r6
 80037da:	f000 f867 	bl	80038ac <_sbrk_r>
 80037de:	6020      	str	r0, [r4, #0]
 80037e0:	4629      	mov	r1, r5
 80037e2:	4630      	mov	r0, r6
 80037e4:	f000 f862 	bl	80038ac <_sbrk_r>
 80037e8:	1c43      	adds	r3, r0, #1
 80037ea:	d126      	bne.n	800383a <_malloc_r+0x96>
 80037ec:	230c      	movs	r3, #12
 80037ee:	6033      	str	r3, [r6, #0]
 80037f0:	4630      	mov	r0, r6
 80037f2:	f000 f86c 	bl	80038ce <__malloc_unlock>
 80037f6:	e7e4      	b.n	80037c2 <_malloc_r+0x1e>
 80037f8:	680b      	ldr	r3, [r1, #0]
 80037fa:	1b5b      	subs	r3, r3, r5
 80037fc:	d41a      	bmi.n	8003834 <_malloc_r+0x90>
 80037fe:	2b0b      	cmp	r3, #11
 8003800:	d90f      	bls.n	8003822 <_malloc_r+0x7e>
 8003802:	600b      	str	r3, [r1, #0]
 8003804:	50cd      	str	r5, [r1, r3]
 8003806:	18cc      	adds	r4, r1, r3
 8003808:	4630      	mov	r0, r6
 800380a:	f000 f860 	bl	80038ce <__malloc_unlock>
 800380e:	f104 000b 	add.w	r0, r4, #11
 8003812:	1d23      	adds	r3, r4, #4
 8003814:	f020 0007 	bic.w	r0, r0, #7
 8003818:	1ac3      	subs	r3, r0, r3
 800381a:	d01b      	beq.n	8003854 <_malloc_r+0xb0>
 800381c:	425a      	negs	r2, r3
 800381e:	50e2      	str	r2, [r4, r3]
 8003820:	bd70      	pop	{r4, r5, r6, pc}
 8003822:	428c      	cmp	r4, r1
 8003824:	bf0d      	iteet	eq
 8003826:	6863      	ldreq	r3, [r4, #4]
 8003828:	684b      	ldrne	r3, [r1, #4]
 800382a:	6063      	strne	r3, [r4, #4]
 800382c:	6013      	streq	r3, [r2, #0]
 800382e:	bf18      	it	ne
 8003830:	460c      	movne	r4, r1
 8003832:	e7e9      	b.n	8003808 <_malloc_r+0x64>
 8003834:	460c      	mov	r4, r1
 8003836:	6849      	ldr	r1, [r1, #4]
 8003838:	e7ca      	b.n	80037d0 <_malloc_r+0x2c>
 800383a:	1cc4      	adds	r4, r0, #3
 800383c:	f024 0403 	bic.w	r4, r4, #3
 8003840:	42a0      	cmp	r0, r4
 8003842:	d005      	beq.n	8003850 <_malloc_r+0xac>
 8003844:	1a21      	subs	r1, r4, r0
 8003846:	4630      	mov	r0, r6
 8003848:	f000 f830 	bl	80038ac <_sbrk_r>
 800384c:	3001      	adds	r0, #1
 800384e:	d0cd      	beq.n	80037ec <_malloc_r+0x48>
 8003850:	6025      	str	r5, [r4, #0]
 8003852:	e7d9      	b.n	8003808 <_malloc_r+0x64>
 8003854:	bd70      	pop	{r4, r5, r6, pc}
 8003856:	bf00      	nop
 8003858:	200001a0 	.word	0x200001a0
 800385c:	200001a4 	.word	0x200001a4

08003860 <_realloc_r>:
 8003860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003862:	4607      	mov	r7, r0
 8003864:	4614      	mov	r4, r2
 8003866:	460e      	mov	r6, r1
 8003868:	b921      	cbnz	r1, 8003874 <_realloc_r+0x14>
 800386a:	4611      	mov	r1, r2
 800386c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003870:	f7ff bf98 	b.w	80037a4 <_malloc_r>
 8003874:	b922      	cbnz	r2, 8003880 <_realloc_r+0x20>
 8003876:	f7ff ff47 	bl	8003708 <_free_r>
 800387a:	4625      	mov	r5, r4
 800387c:	4628      	mov	r0, r5
 800387e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003880:	f000 f826 	bl	80038d0 <_malloc_usable_size_r>
 8003884:	4284      	cmp	r4, r0
 8003886:	d90f      	bls.n	80038a8 <_realloc_r+0x48>
 8003888:	4621      	mov	r1, r4
 800388a:	4638      	mov	r0, r7
 800388c:	f7ff ff8a 	bl	80037a4 <_malloc_r>
 8003890:	4605      	mov	r5, r0
 8003892:	2800      	cmp	r0, #0
 8003894:	d0f2      	beq.n	800387c <_realloc_r+0x1c>
 8003896:	4631      	mov	r1, r6
 8003898:	4622      	mov	r2, r4
 800389a:	f7ff ff0f 	bl	80036bc <memcpy>
 800389e:	4631      	mov	r1, r6
 80038a0:	4638      	mov	r0, r7
 80038a2:	f7ff ff31 	bl	8003708 <_free_r>
 80038a6:	e7e9      	b.n	800387c <_realloc_r+0x1c>
 80038a8:	4635      	mov	r5, r6
 80038aa:	e7e7      	b.n	800387c <_realloc_r+0x1c>

080038ac <_sbrk_r>:
 80038ac:	b538      	push	{r3, r4, r5, lr}
 80038ae:	4c06      	ldr	r4, [pc, #24]	; (80038c8 <_sbrk_r+0x1c>)
 80038b0:	2300      	movs	r3, #0
 80038b2:	4605      	mov	r5, r0
 80038b4:	4608      	mov	r0, r1
 80038b6:	6023      	str	r3, [r4, #0]
 80038b8:	f7ff fb54 	bl	8002f64 <_sbrk>
 80038bc:	1c43      	adds	r3, r0, #1
 80038be:	d102      	bne.n	80038c6 <_sbrk_r+0x1a>
 80038c0:	6823      	ldr	r3, [r4, #0]
 80038c2:	b103      	cbz	r3, 80038c6 <_sbrk_r+0x1a>
 80038c4:	602b      	str	r3, [r5, #0]
 80038c6:	bd38      	pop	{r3, r4, r5, pc}
 80038c8:	200006c4 	.word	0x200006c4

080038cc <__malloc_lock>:
 80038cc:	4770      	bx	lr

080038ce <__malloc_unlock>:
 80038ce:	4770      	bx	lr

080038d0 <_malloc_usable_size_r>:
 80038d0:	f851 0c04 	ldr.w	r0, [r1, #-4]
 80038d4:	2800      	cmp	r0, #0
 80038d6:	f1a0 0004 	sub.w	r0, r0, #4
 80038da:	bfbc      	itt	lt
 80038dc:	580b      	ldrlt	r3, [r1, r0]
 80038de:	18c0      	addlt	r0, r0, r3
 80038e0:	4770      	bx	lr
	...

080038e4 <_init>:
 80038e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038e6:	bf00      	nop
 80038e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038ea:	bc08      	pop	{r3}
 80038ec:	469e      	mov	lr, r3
 80038ee:	4770      	bx	lr

080038f0 <_fini>:
 80038f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038f2:	bf00      	nop
 80038f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038f6:	bc08      	pop	{r3}
 80038f8:	469e      	mov	lr, r3
 80038fa:	4770      	bx	lr
